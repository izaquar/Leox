.. rst3: filename: html\install.html


|back| |leo| |next|

##########################################
Chapter 1: Installing Leo
##########################################

This chapter tells how to install and run_ Leo.

.. contents::

.. Links used in this document...

.. _`Pmw`:      http://pmw.sourceforge.net/
.. _run:        `Running Leo`_
.. _`run Leo`:  `Running Leo`_

.. _`associated .leo files with Leo`:           `How to associate Leo with .leo files on Windows`_

.. WARNING: image targets may not have upper case letters!

.. _back: FAQ.html
.. _home: front.html
.. _next: intro.html

.. |back| image:: arrow_lt.gif
    :target: FAQ.html

.. |leo|   image:: leo.gif
    :target: front.html

.. |next| image:: arrow_rt.gif
    :target: intro.html

System requirements
+++++++++++++++++++

Leo will work on any platform that supports Python 2.2.1 or later and Tk 8.4 or later.

-   Download the latest version of Leo from:
    http://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106

-   Download Python from: http://python.org/

-   Most installations of Python have Tk pre-installed.
    If your doesn't, you may download it from: http://tcl.activestate.com/software/tcltk/

-   Leo uses `Pmw`_ (Python Mega Widgets). Leo's extensions folder contains a copy
    of Pmw for use if needed. Leo first tries to import Pmw normally. If that
    fails, Leo will use the version of Pmw in the extensions folder.

See `How to install Leo on MacOS`_ for installation instructions
for MacOs X. Leo will not run on MacOs 9.

How to install Leo on Linux
+++++++++++++++++++++++++++

**Warning**: When building Tcl on Linux, do **not** specify::

    "--enable-threads"

Only use Tcl with the default "threads not enabled" case.

Leo is distributed as a single compressed folder. Simply uncompress this folder,
then `run Leo`_.

How to install Leo on Windows
+++++++++++++++++++++++++++++

Leo is distributed either as an executable installer (.exe) file or as a .zip file.
**Note**: the present version of the installer does not work properly with Python 2.4.
You can install Leo from the .zip file as follows:

-   Unzip the .zip file and place the leo folder somewhere, say under the Python directory.
    **Important**: When using the installer, do not install Leo in a folder whose full path name contains a space,
    such as 'Program Files'. Yes, this sucks.

-   Copy your existing Leo shortcut then modify the original so that it points to
    pythonw.exe (in the python24 dir) and has the location of Leo within quotes.

-   Set the working directory wherever you want the leo files to reside, say ``\leo\usr``.

Now you are ready to `run Leo`_.

How to install Leo on MacOS
+++++++++++++++++++++++++++

By Randall Voth:
Leo works reliably only on MacOS X 10.3 (Panther) and above.
To run Leo on Macintosh OS X 10:

1.  Download and install ``MacPython 2.3 for Panther addons``.
    Python is already included in OS X 10.3 so only the addons are necessary at
    http://www.cwi.nl/~jack/macpython.html

2.  Download and install TclTkAqua from http://tcltkaqua.sourceforge.net/

3.  Run the PackageManager found in ``/Applications/MacPython-2.3`` and  
    install ``_tkinter-2.3-binary`` by clicking on the package in the list  
    and clicking the [Install:] button with ``Install dependencies`` checked.

4.  Download Leo (platform independent source.zip) from http://leo.sourceforge.net/

5.  Unzip the contents into a directory by double-clicking the downloaded file.
    Typically you would put the Leo folder into the ``Applications`` directory.

6.  Control-click on ``/path_to_unzipped_dir/leo/src/leo.py`` and open with ``PythonLauncher``.

7.  It is a good idea to set ``PythonLauncher`` as the default program to  
    open python scripts by clicking on ``leo.py``, choosing Get Info from the  
    Finder's File menu, and selecting "PythonLauncher" as the default  
    program to ``Open With:``
    By clicking the ``Change All...`` button, all python scripts will be  
    opened with ``PythonLauncher``.
    
8.  Download ``Pmw`` from http://pmw.sourceforge.net/
    ``Pmw`` must be installed in order to use the Settings panel.
    Drag the downloaded gzip file into
    ``/System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/site-packages``
    Double click on it to unzip and untar the file into a folder to make it available to Python

How to use Platypus to create a Mac launcher for Leo
++++++++++++++++++++++++++++++++++++++++++++++++++++

This documents how I used Platypus 3.0 to create MacLeo, the MacOS X launcher
for Leo. You don't need Platypus to _use_ MacLeo, but you do need Platypus to
*create* MacLeo. You may download Platypus 3.0 from http://sveinbjorn.vefsyn.is/platypus
Platypus creates something called an "application bundle," essentially a wrapper
for the shell script called openLeoScript.sh.

At present this script contains just::

    #!/bin/sh
    # $2 only works if .leo is one of the extensions.
    /usr/bin/pythonw ~/leo/src/leo.py $2

In detail, here is how I created MacLeo:

1.  Open Platypus.

2.  Set the Platypus settings::

	- Name: MacLeo
	- Script type: shell
	- Icon: Python Icon
		- Using the standard Leo outline doesn't work, but one could be createdâ€¦
	- Script Path: /Users/edream/dist/Platypus 3.0/openLeoScript.sh
	- Is droppable checkbox (checked)
		- Edit Types:  .leo only, not *, not folders.
		- N.B.  There MUST be a period in front of .leo!  Otherwise $2 will be empty in the script.
	- Output: None (progress bar and text window appear to be essentially useless)

3.  Hit the create button to create MacLeo.

How to create MacOS X .pkg files
++++++++++++++++++++++++++++++++

This tells how I created ``leo-4-3-a3.pkg`` using ``PackageMaker``.

``PackageMaker`` is included in the ``Xtools`` disk that comes with MacOS X. Installing
``PackageMaker`` was easy, but I don't remember the details.

1.  Make sure ``~/dist/make-leo-dist`` contains a folder called ``leo-(version)``.
    The ``~/dist/make-leo-dist/leo-(version)`` folder should contain a *folder* called just ``leo``.
    This is the folder that should have the files to be distributed.
    I got this folder by downloading ``leo-4-3-a3.zip``, the official a3 distribution.

2.  Open ``PackageMaker`` by double-clicking the file ``~/dist/LeoPackage.pmsp``
    I originally created this .pmsp file in ``PackageMaker``.
    It will be included in the next official release.  I'll also add it to cvs.
    ``LeoPackage.pmsp`` contains most of the information needed to create the .pkg file,
    but even without the .pmsp file using ``PackageMaker`` is pretty self-explanatory

3.  Update the description in the ``PackageMaker`` dialog.
    This should be similar to the readme file.

4. Browse to ``~/dist/make-leo-dist/leo-(version)`` in the ``Files`` tab in the ``PackageMaker`` dialog.

5.  Choose ``Make Package`` from the ``PackageMaker File`` menu.
    If necessary, set the file name to ``Leo.pkg``.  This will create ``Leo.pkg``.

6.  Quit ``PackageMaker``.  Choose 'yes' when prompted to save ``LeoPackage.pmsp``.

How to associate Leo with .leo files on Windows
+++++++++++++++++++++++++++++++++++++++++++++++

Leo will open .leo files automatically provided that you associate leo.py with .leo files.
Here is how to open Leo when double-clicking a .leo file on Windows 2K or XP:


-   In Windows 2K or XP, go to ``Start->Settings->Control panel``, open the ``Folder Options`` tab.
-   Select the ``file types`` tab. Press the ``New`` button.
-   Enter ``Leo`` into the ``Create New File Extension`` field. Press OK.
-   With ``Leo`` still highlighted in the ``Registered File Types`` list box, press the ``Advanced`` button.
-   Change the default file type field to something like ``Leo Literate Outline``.
-   Press the ``Icon`` button and browse to the ``LeoDoc`` icon in Leo's ``Icons`` folder.
-   Click OK. This gets the icons right and registers the description of the .leo file.

You now have to tell windows what to do to open the file properly:

-   Press the new button to open the ``New Action`` window.
-   In the ``Action`` field type ``Open``, then type **one** of the following lines::

    [python install dir]\pythonw.exe   [leo install dir]\leo.py %1
    [python install dir]\python.exe -i [leo install dir]\leo.py %1

The first  line opens Leo files with no console window.
The second line opens Leo files with a console window and leaves the window open after Leo exits.
You should now be able to double click on a leo file in explorer with Leo.

Putting the Leo icon in Leo windows
+++++++++++++++++++++++++++++++++++

Leo will draw a Leo icon in all Leo windows without PIL or tkIcon.
For versions of Leo before 4.0 and for versions of Python before 2.3,
Leo will draw a Leo icon in Leo windows only if you have installed Fredrik Lundh's PIL and tkIcon packages.

-   Download PIL from http://www.pythonware.com/downloads/index.htm#pil

-   Download tkIcon from http://www.effbot.org/downloads/#tkIcon

Running Leo
+++++++++++

You can run Leo from a Python interpreter as follows::

	import leo
	leo.run() # runs Leo, opening a new outline.
	leo.go() # runs Leo after reloading all modules.
	leo.leoOpen(fileName) # runs Leo, reloads all modules, and opens fileName.

Here are some tips that may make running Leo easier:

**Linux**
    The following shell script will allow you to open foo.leo files by typing leo foo::
    
        #!/bin/sh 
        python <leopath>/leo.py $1
    
    where <leopath> is replaced with the path to the leo directory. 

**Windows**
    If you have `associated .leo files with Leo`_ you may run Leo by double-clicking any .leo file.
    You can also use a batch file.
    Put the following .bat file in c:\\Windows::

        cd c:\prog\LeoCVS\leo
        c:\python22\python c:\prog\LeoCVS\leo\leo.py %1
    
    This opens the file specified by the first argument (%1).

The first time you start Leo, a dialog will ask you for a unique identifier. If
you are use cvs, use your cvs login name. Otherwise your initials will do. Leo
stores this identifier in the file ``.leoID.txt``. Leo attempts to create
``leoID.txt`` in your home directory, then in Leo's config directory, and
finally in Leo's src directory. You can change this identifier at any time by
editing ``.leoID.txt``.

How to install the Aspell spell checker
+++++++++++++++++++++++++++++++++++++++

You must install the Aspell package if you want to use Leo's Spell tab.

1.  Download and install the Aspell package from http://aspell.sourceforge.net/

Typically this will create a directory called Aspell/bin

2.  Leo's extensions folder comes with two dll's: aspell23.pyd and aspell24.pyd, for Python 2.3 and 2.4 respectively.  Make a copy of the appropriate dll, and **rename it** to be aspell.pyd.

3. Copy aspell.pyd to aspell\bin.

4. Specify the aspell_dir and aspell_bin_dir settings in leoSettings.leo.

Updating settings from previous versions of Leo
+++++++++++++++++++++++++++++++++++++++++++++++

Your copy of the leoSettings.leo file may contain many settings that are different
from the standard version of leoSettings.leo file distributed with Leo,
so updating leoSettings.leo in new versions of Leo could be tedious.
Fortunately there is help.
scripts.leo contains the node::
    
    @file leoScripts.txt-->Important-->updateSettings

This is a **preliminary** script that updates a new leoSettings.leo file
(path2) from the settings in a previous leoSettings.leo file (path1).
Presumably, the path2 file is the leoSettings.leo file from a new distribution,
and the path1 file a leoSettings.leo file containing settings that you have
modified.  You must specify the full path of both files in the top-level @button node.

**Warning**: This script modifies the path2 file. Make sure that you don't mind
modifying this file.

**Warning**: This script is unsophisticated in its update algorithm. If if finds
corresponding nodes (node with the same settings name) in both outlines it simply
replaces the node in the path2 file with the node in the path1 file. In
particular, it does not keep track of individual shortcuts: it repaces the body
of one @shortcuts node with the body of the corresponding @shortcuts node.

**Note**: If the path1 file contains a settings node not in the path2 file it
attempts to create a new node in the corresponding place in the path2 file. If
this is not possible, say because the structures of the files are different, the
script places the new node as the last child of the @settings node in the path2
file.

-------------

|back| |leo| |next|

