<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_test?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.464183381089">
	<global_window_position top="30" left="439" height="607" width="1047"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20051031040240" str_leo_pos="9"><vh>Buttons &amp; commands</vh>
<v t="ekr.20060531093331"><vh>@command clones-tab</vh>
<v t="ekr.20060531093331.1"><vh>class cloneNavigator</vh>
<v t="ekr.20060531093331.2"><vh>init</vh></v>
<v t="ekr.20060531093331.3"><vh>getAllClones</vh></v>
<v t="ekr.20060531093331.4"><vh>displayClones</vh>
<v t="ekr.20060531093331.5"><vh>&lt;&lt;Fill listbox with clone parent headlines&gt;&gt;</vh></v>
<v t="ekr.20060531093331.6"><vh>&lt;&lt;Goto selected position when listbox selection changes&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20060910141935"><vh>ZODB plugin buttons</vh>
<v t="ekr.20060910141935.1"><vh>@@button zodb-read</vh></v>
<v t="ekr.20060910141935.2"><vh>@@button zodb-write</vh></v>
</v>
</v>
<v t="EKR.20040430162943"><vh>Notes</vh>
<v t="ekr.20060217111834"><vh>@url http://docs.python.org/lib/re-syntax.html</vh></v>
<v t="ekr.20060908104329"><vh>@url file:c:/prog/tigris-cvs/leo/doc/leoDocs.leo#Users Guide</vh></v>
<v t="ekr.20031218072017.329"><vh>thin ../doc/leoNotes.txt</vh>
<v t="ekr.20050123161408"><vh>ExamDiff files</vh>
<v t="ekr.20050123160215.1"><vh>Put all files in alpha order in ExamDiff</vh></v>
</v>
<v t="ekr.20031218072017.365"><vh>How to...</vh>
<v t="ekr.20060208112908"><vh>CVS stuff...</vh>
<v t="ekr.20060331094112"><vh>How to generate keys using putty</vh></v>
<v t="ekr.20060208112908.1"><vh>How to check out leo from SourceForge</vh></v>
<v t="ekr.20031218072017.366"><vh>How to add and remove files from CVS repository</vh></v>
<v t="ekr.20031218072017.391"><vh>How to use CVS branches</vh></v>
</v>
<v t="ekr.20031218072017.367"><vh>How to add support for a new language</vh>
<v t="EKR.20040623090054"><vh>&lt;&lt; define global colorizer data &gt;&gt;</vh></v>
<v t="ekr.20031218072017.368"><vh>&lt;&lt; define global data structures &gt;&gt; app</vh></v>
<v t="ekr.20031218072017.370"><vh>&lt;&lt; configure language-specific settings &gt;&gt; colorizer</vh></v>
<v t="ekr.20031218072017.371"><vh>&lt;&lt; define colorizer keywords &gt;&gt; colorizer</vh>
<v t="ekr.20031218072017.372"><vh>actionscript keywords</vh></v>
<v t="bwmulder.20041023131509"><vh>ada keywords</vh></v>
<v t="ekr.20040206072057"><vh>c# keywords</vh></v>
<v t="ekr.20031218072017.373"><vh>c/c++ keywords</vh></v>
<v t="ekr.20040401103539"><vh>css keywords</vh></v>
<v t="ekr.20031218072017.374"><vh>elisp keywords</vh></v>
<v t="ekr.20041107093834"><vh>forth keywords</vh></v>
<v t="ekr.20031218072017.375"><vh>html keywords</vh></v>
<v t="ekr.20031218072017.376"><vh>java keywords</vh></v>
<v t="ekr.20031218072017.377"><vh>latex keywords</vh></v>
<v t="ekr.20060328110802"><vh>lua keywords</vh></v>
<v t="ekr.20031218072017.378"><vh>pascal keywords</vh></v>
<v t="ekr.20031218072017.379"><vh>perl keywords</vh></v>
<v t="ekr.20031218072017.380"><vh>php keywords</vh></v>
<v t="ekr.20050618052653"><vh>plsql keywords</vh></v>
<v t="ekr.20031218072017.381"><vh>python keywords</vh></v>
<v t="ekr.20040331145826"><vh>rapidq keywords</vh></v>
<v t="ekr.20031218072017.382"><vh>rebol keywords</vh></v>
<v t="ekr.20040401111125"><vh>shell keywords</vh></v>
<v t="ekr.20031218072017.383"><vh>tcl/tk keywords</vh></v>
</v>
<v t="ekr.20050618052621"><vh>Add the language name to @language default_target_language entry in leoSettings.leo</vh></v>
</v>
<v t="ekr.20031218072017.384"><vh>How to export syntax colored code preserving colors</vh></v>
<v t="ekr.20031218072017.385"><vh>How to Increase environment space</vh></v>
<v t="ekr.20051203084725"><vh>How to expand java .jar files</vh></v>
<v t="ekr.20051129084430"><vh>How to install jython</vh>
<v t="ekr.20051129084430.1"><vh>@url http://www.jython.org/install.html</vh></v>
</v>
<v t="ekr.20051203084725.1"><vh>How to install and run jythonShell</vh></v>
<v t="ekr.20050316092232"><vh>How to install jyLeo</vh>
<v t="ekr.20050716104357"><vh>Old instructions</vh></v>
<v t="ekr.20050317153447"><vh>jy-Leo install instructions by Paul Paterson</vh></v>
</v>
<v t="ekr.20031218072017.386"><vh>How to remove cursed newlines: use binary mode</vh>
<v t="ekr.20031218072017.387"><vh>The solution</vh></v>
<v t="ekr.20031218072017.388"><vh>cursed newline answer</vh></v>
<v t="ekr.20031218072017.389"><vh>cursed newline answer 2</vh></v>
</v>
<v t="ekr.20061023153133"><vh>How to run patch</vh></v>
<v t="ekr.20031218072017.390"><vh>How to run Pychecker</vh></v>
<v t="ekr.20050510071834"><vh>How to use a temp file with pdb</vh></v>
<v t="ekr.20041214135556"><vh>How to use Tile</vh></v>
</v>
<v t="ekr.20050214055018"><vh>Mac Notes</vh>
<v t="ekr.20050221054932"><vh>How to make monolithic Leo app on MacOS X</vh></v>
<v t="ekr.20050214055018.4"><vh>@url http://idisk.mac.com/genthaler-Public/Leo.zip (download)</vh></v>
<v t="ekr.20050214055018.5"><vh>@url http://www.wordtech-software.com/leo.html  (Mac Bundle)</vh></v>
<v t="ekr.20050513164506"><vh>Problems with run script command on Mac x11</vh></v>
<v t="ekr.20040104162835.8"><vh>Linux/Mac notes: Dan Winkler</vh>
<v t="ekr.20040104162835.13"><vh>Fink &amp; aqua</vh></v>
<v t="ekr.20040104162835.14"><vh>Mac, Fink, etc.</vh></v>
<v t="ekr.20040104162835.15"><vh>Double clicking on Linux</vh></v>
</v>
</v>
<v t="ekr.20060111112513.1"><vh>New jyLeo notes</vh></v>
<v t="ekr.20031218072017.392"><vh>Python Notes...</vh>
<v t="ekr.20031218072017.398"><vh>How to call any Python method from the C API</vh></v>
<v t="ekr.20031218072017.399"><vh>How to run Python programs easily on NT,2K,XP</vh>
<v t="ekr.20031218072017.400"><vh>setting the PATHEXT env var</vh></v>
<v t="ekr.20031218072017.401"><vh>Yet another Python .bat wrapper</vh></v>
</v>
</v>
<v t="ekr.20060106082440"><vh>Statistics</vh></v>
<v t="ekr.20050306070535"><vh>Tk Notes</vh>
<v t="ekr.20050306070535.3"><vh>How to detect changes in text</vh></v>
</v>
<v t="ekr.20050712092501.1"><vh>xemacs variables</vh>
<v t="ekr.20050712092501.2"><vh>top, bottom, left, right, horizontal vertical, gutter</vh></v>
<v t="ekr.20050712092501.5"><vh>prev...</vh>
<v t="ekr.20050712092501.6"><vh>*</vh></v>
<v t="ekr.20050712092501.7"><vh>:</vh></v>
<v t="ekr.20050712092501.8"><vh>abbrev-</vh></v>
<v t="ekr.20050712092501.9"><vh>after-</vh></v>
<v t="ekr.20050712092501.10"><vh>auto-</vh></v>
<v t="ekr.20050712092501.11"><vh>backup-</vh></v>
<v t="ekr.20050712092501.12"><vh>bbdb</vh></v>
<v t="ekr.20050712092501.13"><vh>before-</vh></v>
<v t="ekr.20050712092501.14"><vh>browse-url-</vh></v>
<v t="ekr.20050712092501.15"><vh>buffer</vh></v>
<v t="ekr.20050712092501.16"><vh>buffers-</vh></v>
<v t="ekr.20050712092501.17"><vh>cl-</vh></v>
<v t="ekr.20050712092501.18"><vh>command-</vh></v>
<v t="ekr.20050712092501.19"><vh>comment-</vh></v>
<v t="ekr.20050712092501.20"><vh>compilation</vh></v>
<v t="ekr.20050712092501.21"><vh>completion</vh></v>
<v t="ekr.20050712092501.22"><vh>configure</vh></v>
<v t="ekr.20050712092501.23"><vh>dabbrev- and dabbrev--</vh></v>
<v t="ekr.20050712094115"><vh>debug-</vh></v>
<v t="ekr.20050712094115.1"><vh>default-</vh></v>
<v t="ekr.20050712094115.2"><vh>global</vh></v>
<v t="ekr.20050712094115.3"><vh>help</vh></v>
<v t="ekr.20050712092501.24"><vh>isearch-</vh></v>
</v>
<v t="ekr.20050712092501.25"><vh>lisp</vh></v>
<v t="ekr.20050712092501.26"><vh>list-</vh></v>
<v t="ekr.20050712094115.4"><vh>load-</vh></v>
<v t="ekr.20050712092501.27"><vh>mail</vh></v>
<v t="ekr.20050712094115.5"><vh>message-</vh></v>
<v t="ekr.20050712092501.28"><vh>minibuffer-</vh></v>
<v t="ekr.20050712092501.29"><vh>mode-</vh></v>
<v t="ekr.20050712092501.30"><vh>modeline-</vh></v>
<v t="ekr.20050712092501.31"><vh>mouse-</vh></v>
<v t="ekr.20050712092501.32"><vh>mswindows-</vh></v>
<v t="ekr.20050712092501.33"><vh>package- &amp; packages-</vh></v>
<v t="ekr.20050712094115.6"><vh>paths-</vh></v>
<v t="ekr.20050712092501.34"><vh>regexp- &amp; search-</vh></v>
<v t="ekr.20050712092501.35"><vh>toolbar-</vh></v>
<v t="ekr.20050712094115.7"><vh>xwem</vh></v>
</v>
<v t="ekr.20031218072017.434"><vh>Unused code</vh>
<v t="ekr.20061026071140"><vh>Abandoned new commands</vh></v>
</v>
</v>
</v>
<v t="EKR.20040519090151.3"><vh>Projects</vh>
<v t="EKR.20040429143933"><vh>thin leoProjects.txt</vh>
<v t="ekr.20061021144254"><vh>Leo 4.4.2 final projects</vh>
<v t="ekr.20061021150733"><vh>Bugs</vh>
<v t="ekr.20061019170752.1"><vh>Changed leo_rst.css to pass the w3 validator</vh></v>
<v t="ekr.20061021100018"><vh>Fixed 'Run on string' message when typing ( with no @color in effect</vh>
<v t="ekr.20031218072017.2369"><vh>skip_string</vh></v>
<v t="ekr.20051125080855"><vh>selfInsertCommand &amp; helpers</vh>
<v t="ekr.20051026171121"><vh>&lt;&lt; handle newline &gt;&gt;</vh></v>
<v t="ekr.20060831163241"><vh>test_selfInsertCommand</vh></v>
<v t="ekr.20060804095512"><vh>initBracketMatcher</vh></v>
<v t="ekr.20060627083506"><vh>flashMatchingBracketsHelper</vh></v>
<v t="ekr.20060627091557"><vh>flashCharacter</vh></v>
<v t="ekr.20051027172949"><vh>updateAutomatchBracket</vh></v>
<v t="ekr.20051026171121.1"><vh>udpateAutoIndent</vh></v>
<v t="ekr.20051026092433"><vh>updateTab</vh></v>
</v>
<v t="ekr.20031218072017.3189"><vh>skip_matching_python_delims</vh></v>
</v>
<v t="ekr.20061019171123.2"><vh>Fixed problem with c++ extensions</vh>
<v t="ekr.20031218072017.368"><vh>&lt;&lt; define global data structures &gt;&gt; app</vh></v>
</v>
<v t="ekr.20060927173836.2"><vh>Move on if regexp matches an empty string</vh>
<v t="ekr.20060526092203"><vh>regexHelper</vh></v>
</v>
<v t="ekr.20061019171123"><vh>Fixed several bugs related to multiple body panes</vh>
<v t="ekr.20061017083312"><vh>selectEditor</vh>
<v t="ekr.20061017083312.1"><vh>&lt;&lt; restore the selection, insertion point and the scrollbar &gt;&gt;</vh></v>
</v>
<v t="ekr.20060129052538.2"><vh>masterClickHandler</vh></v>
<v t="ekr.20061017082211"><vh>onClick</vh></v>
<v t="ekr.20060528100747.3" a="M"><vh>createTextWidget()</vh></v>
</v>
<v t="ekr.20061019171123.1"><vh>Fixed multipath plugin so it works with new colorizier</vh>
<v t="ekr.20041005105605.198" a="M"><vh>directiveKind4 &amp; test</vh>
<v t="ekr.20050608103755"><vh>test_directiveKind4</vh></v>
</v>
<v t="ekr.20031218072017.1595"><vh>&lt;&lt; define leo keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1260"><vh>get_directives_dict &amp; globalDirectiveList</vh>
<v t="ekr.20031218072017.1261"><vh>&lt;&lt; set theDict for @ directives &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1262"><vh>&lt;&lt; set theDict["root"] for noweb * chunks &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20061016104544"><vh>Fixed bug in new colorizer</vh></v>
<v t="ekr.20061023071509"><vh>Fixed config bug</vh>
<v t="ekr.20031218072017.1625"><vh>setInitialWindowGeometry</vh></v>
</v>
<v t="ekr.20061026083956"><vh>Investigated problems with leoRecentFiles.txt</vh>
<v t="ekr.20050304072744"><vh>Compute directories... (leoGlobals)</vh>
<v t="ekr.20041117155521"><vh>computeGlobalConfigDir</vh></v>
<v t="ekr.20041117151301"><vh>computeHomeDir</vh></v>
<v t="ekr.20060416113431"><vh>computeLeoDir</vh></v>
<v t="ekr.20031218072017.1937"><vh>computeLoadDir</vh></v>
<v t="ekr.20050328133444"><vh>computeStandardDirectories</vh></v>
<v t="ekr.20041117151301.1"><vh>startupEncoding</vh></v>
</v>
<v t="ekr.20050424114937.1"><vh>Reading and writing .leoRecentFiles.txt (g.app.config)</vh>
<v t="ekr.20061010121944"><vh>createRecentFiles</vh></v>
<v t="ekr.20050424115658"><vh>readRecentFilesFile</vh></v>
<v t="ekr.20050424114937.2"><vh>writeRecentFilesFile &amp; helper</vh>
<v t="ekr.20050424131051"><vh>writeRecentFilesFileHelper</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20061026081935"><vh>New features</vh>
<v t="ekr.20061023214728"><vh>Created leoPymacs.py for interaction with pymacs</vh></v>
<v t="ekr.20061025094855"><vh>Further improvements to leoPymacs</vh>
<v t="ekr.20031218072017.1624"><vh>createFrame (leo.py)</vh></v>
<v t="ekr.20031218072017.2188"><vh>app.newLeoCommanderAndFrame</vh>
<v t="ekr.20031218072017.2189"><vh>&lt;&lt; compute the window title &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2052"><vh>g.openWithFileName</vh></v>
<v t="ekr.20031218072017.1934"><vh>run &amp; allies</vh>
<v t="ekr.20041219072112"><vh>&lt;&lt; import leoGlobals and leoApp &gt;&gt;</vh></v>
<v t="ekr.20041219072416.1"><vh>&lt;&lt; import leoNodes and leoConfig &gt;&gt;</vh></v>
<v t="ekr.20040411081633"><vh>&lt;&lt; start psycho &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1936"><vh>isValidPython</vh></v>
<v t="ekr.20041124083125"><vh>completeFileName (leo.py)</vh></v>
<v t="ekr.20031218072017.1624"><vh>createFrame (leo.py)</vh></v>
<v t="ekr.20031218072017.1938"><vh>createNullGuiWithScript (leo.py)</vh></v>
<v t="ekr.20031218072017.1939"><vh>getBatchScript</vh></v>
<v t="ekr.20041130093254"><vh>reportDirectories</vh></v>
</v>
</v>
<v t="ekr.20061026054758"><vh>Added forward-end-word/-extend-selection commands</vh>
<v t="ekr.20060924124119"><vh>defineCmdsMenuCursorTable</vh></v>
<v t="ekr.20050920084036.55"><vh> getPublicCommands (editCommandsClass)</vh></v>
<v t="ekr.20050920084036.149"><vh>words</vh></v>
<v t="ekr.20051218121447"><vh>moveWordHelper</vh></v>
<v t="ekr.20061008140603"><vh>runEditCommandTest</vh></v>
</v>
</v>
</v>
<v t="ekr.20061028084753"><vh>Leo 4.4.2.1 final projects</vh>
<v t="ekr.20061028072406"><vh>Fixed bug reading recent files</vh>
<v t="ekr.20041201080436"><vh>appendToRecentFiles (g.app.config)</vh></v>
<v t="ekr.20041117083857"><vh>initSettingsFiles</vh></v>
<v t="ekr.20041120064303" a="M"><vh>g.app.config.readSettingsFiles</vh>
<v t="ekr.20061028082834"><vh>&lt;&lt; define localDirectory, localConfigFile &amp; myLocalConfigFile &gt;&gt;</vh></v>
</v>
<v t="ekr.20050424114937.1"><vh>Reading and writing .leoRecentFiles.txt (g.app.config)</vh>
<v t="ekr.20061010121944"><vh>createRecentFiles</vh></v>
<v t="ekr.20050424115658"><vh>readRecentFilesFile</vh></v>
<v t="ekr.20050424114937.2"><vh>writeRecentFilesFile &amp; helper</vh>
<v t="ekr.20050424131051"><vh>writeRecentFilesFileHelper</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="EKR.20040519090151.2"><vh>To do</vh>
<v t="ekr.20040117181936"
marks="ekr.20061028211424.46,ekr.20061028211424.47,ekr.20061028211424.50,ekr.20061028211424.52,ekr.20061028070057.22,ekr.20061028070057.37,ekr.20061028070057.54,ekr.20061028070057.55,ekr.20050920084036.138,ekr.20051126124705,ekr.20060216163305,"
expanded="ekr.20031218072017.2820,"><vh>@thin ../doc/leoToDo.txt</vh></v>
<v t="ekr.20060207133601"
marks="ekr.20040701065235.2,"><vh>@thin ../doc/leoToDoLater.txt</vh></v>
</v>
<v t="ekr.20031218072017.2406" a="E"><vh>Code</vh>
<v t="AGP.20240903164001" a="V"><vh>@version ../VERSION.MD</vh></v>
<v t="ekr.20031218072017.2606"><vh>&lt;&lt; Import pychecker &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2582"><vh> version &amp; signon stuff</vh>
<v t="ekr.20040629121554"><vh>getBuildNumber</vh></v>
<v t="ekr.20040629121554.1"><vh>getSignOnLine (Contains hard-coded version info)</vh></v>
<v t="ekr.20040629121554.2" a="M" labels="2858060000006c6162656ce"><vh>initVersion</vh></v>
<v t="ekr.20040629121554.3"><vh>c.signOnWithVersion</vh></v>
</v>
<v t="ekr.20031218072017.2604"><vh>Core classes...</vh>
<v t="ekr.20031218072017.2605" a="E"><vh>@thin leo.py </vh></v>
<v t="ekr.20031218072017.2608"
marks="ekr.20031218072017.2610,"><vh>@thin leoApp.py</vh></v>
<v t="ekr.20041005105605.1"
marks="ekr.20041005105605.52,ekr.20041005105605.198,"><vh>@thin leoAtFile.py</vh></v>
<v t="ekr.20031218072017.1602"><vh>&lt;&lt; initialize ivars &amp; tags &gt;&gt; colorizeAnyLanguage</vh>
<v t="ekr.20060829084924"><vh>&lt;&lt; configure fonts &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1603" a="M"><vh>&lt;&lt; configure tags &gt;&gt;</vh></v>
<v t="ekr.20031218072017.370"><vh>&lt;&lt; configure language-specific settings &gt;&gt; colorizer</vh></v>
</v>
<v t="ekr.20031218072017.2794"
marks="ekr.20031218072017.1607,AGP.20240323143050,AGP.20240323150504.2,ekr.20031218072017.1896,ekr.20031218072017.2803,"><vh>@thin leoColor.py</vh></v>
<v t="ekr.20031218072017.2810" a="E"
marks="ekr.20040629121554.2,AGP.20231026214426,AGP.20231026221751,AGP.20231124105345,"
expanded="ekr.20041118104831,ekr.20031218072017.2811,ekr.20031218072017.2818,ekr.20031218072017.2819,ekr.20031218072017.2820,ekr.20031218072017.2861,ekr.20031218072017.2862,ekr.20031218072017.2864,ekr.20031218072017.1831,ekr.20031218072017.2949,ekr.20060906211747,ekr.20060906211747.1,"><vh>@thin leoCommands.py</vh></v>
<v t="ekr.20041117062700"
marks="ekr.20060608221203,ekr.20041120064303,"><vh>@thin leoConfig.py</vh></v>
<v t="ekr.20050710142719" a="E"
marks="ekr.20050920084036.138,ekr.20051020120306.6,ekr.20050920084036.257,ekr.20050920084036.259,ekr.20051022212004,"
expanded="ekr.20050920084036.186,ekr.20050920084036.188,"><vh>@thin leoEditCommands.py</vh></v>
<v t="ekr.20031218072017.3018" a="E"
marks="ekr.20060919110638.44,ekr.20031218072017.1553,ekr.20031218072017.2306,ekr.20031218072017.1561,ekr.20040701065235.2,"
expanded="ekr.20031218072017.3032,"><vh>@thin leoFileCommands.py</vh></v>
<v t="ekr.20031218072017.3093"
marks="AGP.20240831132732,AGP.20240831144820,AGP.20240311094204,AGP.20240823184728.1,AGP.20240311094204.10,ekr.20031218072017.3132,ekr.20031218072017.3124,ekr.20031218072017.2278,"><vh>@thin leoGlobals.py</vh></v>
<v t="ekr.20031218072017.3206"><vh>@thin leoImport.py</vh></v>
<v t="ekr.20031218072017.3748"
marks="ekr.20051126124705,ekr.20060216163305,ekr.20060120200818,ekr.20060606095344,"><vh>@thin leoKeys.py</vh></v>
<v t="ekr.20031218072017.3320" a="E"
marks="ekr.20031218072017.1485,ekr.20031218072017.3419,ekr.20031218072017.3421,ekr.20031218072017.3426,ekr.20031218072017.3438,ekr.20031218072017.892,ekr.20040303214038,ekr.20040303163330,ekr.20040303175026.3,ekr.20040303175026.5,ekr.20040303175026.10,ekr.20040306060312,ekr.20040303175026.11,ekr.20040310062332.4,ekr.20040310062332.5,"
expanded="ekr.20031218072017.3321,ekr.20031218072017.3331,ekr.20031218072017.1484,"><vh>@thin leoNodes.py</vh></v>
<v t="ekr.20031218072017.3439"><vh>@thin leoPlugins.py</vh></v>
<v t="ekr.20061024060248.1"><vh>thin leoPymacs.py</vh>
<v t="ekr.20061024060248.2"><vh>&lt;&lt; docstring &gt;&gt;</vh></v>
<v t="ekr.20061024131236"><vh>dump</vh></v>
<v t="ekr.20061024130957"><vh>getters</vh></v>
<v t="ekr.20061024060248.3"><vh>hello</vh></v>
<v t="ekr.20061024075542"><vh>init</vh></v>
<v t="ekr.20061024075542.1"><vh>open</vh></v>
<v t="ekr.20061024084200"><vh>run-script</vh></v>
</v>
<v t="ekr.20031218072017.3446"
marks="ekr.20031218072017.3601,"><vh>@thin leoTangle.py</vh></v>
<v t="ekr.20051104075904" annotate="285808000000616e6e6f7461746571007d71017471022e"><vh>@thin leoTest.py</vh></v>
<v t="ekr.20031218072017.3603"><vh>@thin leoUndo.py</vh></v>
</v>
<v t="ekr.20031218072017.3625"><vh>Gui Base classes</vh>
<v t="ekr.20050721093241"><vh>&lt;&lt; about gui classes and gui plugins &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3630"><vh>thin leoCompare.py</vh>
<v t="ekr.20031218072017.3631"><vh>choose</vh></v>
<v t="ekr.20031218072017.3632"><vh>go</vh></v>
<v t="ekr.20031218072017.3633"><vh>class leoCompare</vh>
<v t="ekr.20031218072017.3634"><vh>compare.__init__</vh></v>
<v t="ekr.20031218072017.3635"><vh>compare_directories (entry)</vh></v>
<v t="ekr.20031218072017.3636"><vh>compare_files (entry)</vh></v>
<v t="ekr.20031218072017.3637"><vh>compare_lines</vh></v>
<v t="ekr.20031218072017.3638"><vh>compare_open_files</vh>
<v t="ekr.20031218072017.3639"><vh>&lt;&lt; handle opening lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3640"><vh>&lt;&lt; ignore blank lines and/or sentinels &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3641"><vh>&lt;&lt; print matches and/or mismatches &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3642"><vh>&lt;&lt; warn if mismatch limit reached &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3643"><vh>&lt;&lt; handle reporting after at least one eof is seen &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3644"><vh>filecmp</vh></v>
<v t="ekr.20031218072017.3645"><vh>utils...</vh>
<v t="ekr.20031218072017.3646"><vh>doOpen</vh></v>
<v t="ekr.20031218072017.3647"><vh>dump</vh></v>
<v t="ekr.20031218072017.3648"><vh>dumpToEndOfFile</vh></v>
<v t="ekr.20031218072017.3649"><vh>isLeoHeader &amp; isSentinel</vh></v>
<v t="ekr.20031218072017.1144"><vh>openOutputFile (compare)</vh></v>
<v t="ekr.20031218072017.3650"><vh>show</vh></v>
<v t="ekr.20031218072017.3651"><vh>showIvars</vh></v>
</v>
</v>
</v>
<v t="ekr.20060123151617"
marks="ekr.20051113110851,ekr.20031218072017.3074,ekr.20031218072017.3077,ekr.20031218072017.3081,"><vh>@thin leoFind.py</vh></v>
<v t="ekr.20031218072017.3655" a="E"
expanded="ekr.20031218072017.3678,ekr.20031218072017.3680,ekr.20031218072017.3704,ekr.20031218072017.3706,ekr.20031218072017.2233,ekr.20031218072017.2236,"><vh>@thin leoFrame.py</vh></v>
<v t="ekr.20031218072017.3719"><vh>@thin leoGui.py</vh></v>
<v t="ekr.20031218072017.3749"
marks="ekr.20031218072017.3785,ekr.20050921103736,ekr.20031218072017.3803,ekr.20031218072017.3804,"><vh>@thin leoMenu.py</vh></v>
</v>
<v t="ekr.20031218072017.3821" a="E"><vh>Gui Tkinter classes</vh>
<v t="ekr.20031218072017.4099"><vh>thin leoTkinterKeys.py</vh></v>
<v t="ekr.20031218072017.3838"><vh>thin leoTkinterComparePanel.py</vh>
<v t="ekr.20031218072017.3839"><vh>Birth...</vh>
<v t="ekr.20031218072017.3840"><vh> tkinterComparePanel.__init__</vh>
<v t="ekr.20031218072017.3841"><vh>&lt;&lt; init tkinter compare ivars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3842"><vh>finishCreate (tkComparePanel)</vh></v>
<v t="ekr.20031218072017.3843"><vh>createFrame (tkComparePanel)</vh>
<v t="ekr.20031218072017.3844"><vh>&lt;&lt; create the organizer frames &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3845"><vh>&lt;&lt; create the browser rows &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3846"><vh>&lt;&lt; create the extension row &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3847"><vh>&lt;&lt; create the whitespace options frame &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3848"><vh>&lt;&lt; create the print options frame &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3849"><vh>&lt;&lt; create the compare buttons &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3850"><vh>setIvarsFromWidgets</vh></v>
</v>
<v t="ekr.20031218072017.3851"><vh>bringToFront</vh></v>
<v t="ekr.20031218072017.3852"><vh>browser</vh></v>
<v t="ekr.20031218072017.3853"><vh>Event handlers...</vh>
<v t="ekr.20031218072017.3854"><vh>onBrowse...</vh></v>
<v t="ekr.20031218072017.3855"><vh>onClose</vh></v>
<v t="ekr.20031218072017.3856"><vh>onCompare...</vh></v>
<v t="ekr.20031218072017.3857"><vh>onPrintMatchedLines</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3897"><vh>thin leoTkinterFind.py</vh>
<v t="ekr.20041025152343"><vh>class underlinedTkButton</vh>
<v t="ekr.20041025152712"><vh>__init__</vh>
<v t="ekr.20041025152712.2"><vh>&lt;&lt; set self.hotKey if '&amp;' is in the string &gt;&gt;</vh></v>
</v>
<v t="ekr.20041026080125"><vh>bindHotKey</vh></v>
<v t="ekr.20041025152717"><vh>buttonCallback</vh></v>
</v>
<v t="ekr.20041025152343.1"><vh>class leoTkinterFind</vh>
<v t="ekr.20031218072017.3898"><vh>Birth &amp; death</vh>
<v t="ekr.20031218072017.3899"><vh>__init__</vh>
<v t="ekr.20031218072017.3900"><vh>&lt;&lt; create the tkinter intVars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3901"><vh>destroySelf</vh></v>
<v t="ekr.20031218072017.3902"><vh>find.createFrame</vh>
<v t="ekr.20031218072017.3904"><vh>&lt;&lt; Create the Find and Change panes &gt;&gt;</vh>
<v t="ekr.20041026092141"><vh>&lt;&lt; Bind Tab and control-tab &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3903"><vh>&lt;&lt; Create four columns of radio and checkboxes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3905"><vh>&lt;&lt; Create two rows of buttons &gt;&gt;</vh></v>
</v>
<v t="ekr.20060207080537"><vh>find.createBindings</vh></v>
<v t="ekr.20031218072017.2059"><vh>find.init</vh>
<v t="ekr.20031218072017.2060"><vh>&lt;&lt; set find/change widgets &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2061"><vh>&lt;&lt; set radio buttons from ivars &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1460"><vh>find.update_ivars</vh></v>
<v t="ekr.20050204090259"><vh>tkFind.adjust_find_text</vh></v>
<v t="ekr.20031218072017.3906"><vh>onCloseWindow</vh></v>
<v t="ekr.20051013084256"><vh>dismiss</vh></v>
<v t="ekr.20031218072017.3907"><vh>bringToFront</vh></v>
<v t="EKR.20040603221140"><vh>selectAllFindText</vh></v>
<v t="ekr.20031218072017.3908"><vh>Tkinter wrappers (leoTkinterFind)</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3858"><vh>@thin leoTkinterDialog.py</vh></v>
<v t="ekr.20031218072017.3939"
marks="AGP.20231124085841.5,AGP.20231115182509.1,AGP.20231106120102,ekr.20051009044751,ekr.20051009045208,AGP.20231104061353,ekr.20031218072017.3947,ekr.20041223102225.1,AGP.20231115175745.1,ekr.20031218072017.3968,AGP.20231020155235,AGP.20231020122619,ekr.20041221122440.2,ekr.20041217135735.1,ekr.20051016103459,ekr.20041217135735.2,ekr.20031218072017.4046,EKR.20040423082910,"
expanded="ekr.20031218072017.3940,ekr.20031218072017.3979,ekr.20031218072017.3980,"><vh>@thin leoTkinterFrame.py</vh></v>
<v t="ekr.20031218072017.4047"
marks="AGP.20231109145044,"><vh>@thin leoTkinterGui.py</vh></v>
<v t="ekr.20031218072017.4100"
marks="ekr.20060211144330.1,ekr.20031218072017.4113,ekr.20031218072017.4115,"><vh>@thin leoTkinterMenu.py</vh></v>
<v t="ekr.20040803072955"
marks="ekr.20040803072955.16,ekr.20040803072955.17,AGP.20240318174543.1,ekr.20060131173440,ekr.20040803072955.42,AGP.20231106213403.1,ekr.20040803072955.53,ekr.20040803072955.91,ekr.20040803072955.110,ekr.20040803072955.128,"
expanded="ekr.20040803072955.2,ekr.20040803072955.16,ekr.20040803072955.35,ekr.20040803072955.90,ekr.20040803072955.91,ekr.20040803072955.80,ekr.20040803072955.84,"><vh>@thin leoTkinterTree.py</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="AGP.20240903164001"></t>
<t tx="EKR.20040429143933">@ This part of the tree shows views of the outline related to specific projects or tasks.  I put such headlines in parentheses, and that is just my convention.

I create a new view by cloning headlines that relate to its task, and moving the cloned headlines under the task headline.  This greatly increases my focus.  Any changes made in a task view to clone headlines affect the other clones scattered throughout the outline.  In particular, all @file nodes containing changed clones become marked as dirty, so they will be written when the entire outline is saved.
@c

@language python 
@tabwidth -4

@all</t>
<t tx="EKR.20040430162943"></t>
<t tx="EKR.20040519090151.2"></t>
<t tx="EKR.20040519090151.3"></t>
<t tx="EKR.20040603221140">def selectAllFindText (self,event=None):

    try:
        w = self.frame.focus_get()
        g.app.gui.setTextSelection(w,"1.0","end")
        return "break"
    except:
        return None # To keep pychecker happy.
</t>
<t tx="EKR.20040623090054">case_insensitiveLanguages = ['plsql',]
</t>
<t tx="bwmulder.20041023131509">ada_keywords = [
    "abort",       "else",       "new",        "return",
    "abs",         "elsif",      "not",        "reverse",
    "abstract",    "end",        "null",
    "accept",      "entry",      "select",
    "access",      "exception",  "separate",
    "aliased",     "exit",       "of",         "subtype",
    "all",                       "or",
    "and",         "for",        "others",     "tagged",
    "array",       "function",   "out",        "task",
    "at",                                      "terminate",
                   "generic",    "package",    "then",
    "begin",       "goto",       "pragma",     "type",
    "body",                      "private",
                   "if",         "procedure",
    "case",        "in",         "protected",  "until",
    "constant",    "is",                       "use",
                                 "raise",
    "declare",                   "range",      "when",
    "delay",       "limited",    "record",     "while",
    "delta",       "loop",       "rem",        "with",
    "digits",                    "renames",
    "do",          "mod",        "requeue",    "xor"
   ]
</t>
<t tx="ekr.20031218072017.329">@nocolor

@all</t>
<t tx="ekr.20031218072017.365"></t>
<t tx="ekr.20031218072017.366">use the command line option in the admin menu to do the following:

add leoConfig.py and leoConfig.txt
	cvs add leoConfig.txt
	cvs add leoConfig.py
	(then do commit)

remove readme*.doc
	remove files from working area (done)
	cvs remove readme1.doc
	cvs remove readme2.doc
	...
	(then do commit)</t>
<t tx="ekr.20031218072017.367">@nocolor

- Add a new entries in &lt;&lt; define global data structures &gt;&gt; app

- Add a new Tk.Radiobutton in &lt;&lt;create the Target Language frame&gt;&gt;

- Add an entry to the languages list in &lt;&lt;configure language-specific settings&gt;&gt;

- Add a list of the keywords of the language to &lt;&lt; define colorizer keywords &gt;&gt;

  N.B.: the name of this list must be x_keywords, where x is the entry in language in step a.

- Add any language-specifig code to leoColor.colorizeAnyLanguage.
  For most languages nothing need be done in this step.
  
- If the language is case insensitive, add it to the list of
case_insensitiveLanguages found in  &lt;&lt; define global colorizer data &gt;&gt;

TESTS

- Test the syntax coloring for the new language by using the @language directive.

- Test workings of the Preferences Panel by choosing the language in the panel and by looking at code that is _not_ under control of an @language directive.

- Test the leoConfig.txt by setting default_target_language to the name of the new language.  When you restart Leo, the new language should be selected in the Prefs panel.

- Remove leoConfig.txt, select the new language in the Prefs panel, and save the .leo file.  Open the file with a text editor and check to make sure that the &lt;preferences&gt; tag (near the top) contains an entry like this:

&lt;preferences allow_rich_text="0" defaultTargetLanguage="Python"&gt;
&lt;/preferences&gt;

but with the name of your new language instead of "Python".

- Create an @root node and verify that you can Tangle it.

@color</t>
<t tx="ekr.20031218072017.368"># Internally, lower case is used for all language names.
self.language_delims_dict = {
    "ada" : "--",
    "actionscript" : "// /* */", #jason 2003-07-03
    "c" : "// /* */", # C, C++ or objective C.
    "csharp" : "// /* */", # C#
    "cpp" : "// /* */",# C++.
    "css" : "/* */", # 4/1/04
    "cweb" : "@q@ @&gt;", # Use the "cweb hack"
    "elisp" : ";",
    "forth" : "\\_ _(_ _)", # Use the "REM hack"
    "fortran" : "C",
    "fortran90" : "!",
    "html" : "&lt;!-- --&gt;",
    "java" : "// /* */",
    "latex" : "%",
    "lua" : "--",  # ddm 13/02/06
    "pascal" : "// { }",
    "perl" : "#",
    "perlpod" : "# __=pod__ __=cut__", # 9/25/02: The perlpod hack.
    "php" : "//",
    "plain" : "#", # We must pick something.
    "plsql" : "-- /* */", # SQL scripts qt02537 2005-05-27
    "python" : "#",
    "rapidq" : "'", # fil 2004-march-11
    "rebol" : ";",  # jason 2003-07-03
    "shell" : "#",  # shell scripts
    "tcltk" : "#",
    "unknown" : "#" } # Set when @comment is seen.

self.language_extension_dict = {
    "ada" : "ads",
    "actionscript" : "as", #jason 2003-07-03
    "c" : "c",
    "cpp" : "cpp",
    "css" : "css", # 4/1/04
    "cweb" : "w",
    "elisp" : "el",
    "forth" : "forth",
    "fortran" : "f",
    "fortran90" : "f",
    "html" : "html",
    "java" : "java",
    "latex" : "tex", # 1/8/04
    "lua" : "lua",  # ddm 13/02/06
    "noweb" : "nw",
    "pascal" : "p",
    # "perl" : "perl",
    # "perlpod" : "perl",
    "perl" : "pl",      # 11/7/05
    "perlpod" : "pod",  # 11/7/05
    "php" : "php",
    "plain" : "txt",
    "python" : "py",
    "plsql" : "sql", # qt02537 2005-05-27
    "rapidq" : "bas", # fil 2004-march-11
    "rebol" : "r",    # jason 2003-07-03
    "shell" : "sh",   # DS 4/1/04
    "tex" : "tex",
    "tcltk" : "tcl",
    "unknown" : "txt" } # Set when @comment is seen.
    
self.extension_dict = {
    "ads"   : "ada",
    "adb"   : "ada",
    "as"    : "actionscript",
    "bas"   : "rapidq",
    "c"     : "c",
    "cpp"   : "cpp",
    "css"   : "css",
    "el"    : "elisp",
    "forth" : "forth",
    "f"     : "fortran90", # or fortran ?
    "html"  : "html",
    "java"  : "java",
    "lua" : "lua",  # ddm 13/02/06
    "noweb" : "nw",
    "p"     : "pascal",
    # "perl"  : "perl",
    "pl"    : "perl",   # 11/7/05
    "pod"   : "perlpod", # 11/7/05
    "php"   : "php",
    "py"    : "python",
    "sql"   : "plsql", # qt02537 2005-05-27
    "r"     : "rebol",
    "sh"    : "shell",
    "tex"   : "tex",
    "txt"   : "plain",
    "tcl"   : "tcltk",
    "w"     : "cweb" }
</t>
<t tx="ekr.20031218072017.370"># Define has_string, keywords, single_comment_start, block_comment_start, block_comment_end.

if self.language == "cweb": # Use C comments, not cweb sentinel comments.
    delim1,delim2,delim3 = g.set_delims_from_language("c")
elif self.comment_string:
    delim1,delim2,delim3 = g.set_delims_from_string(self.comment_string)
elif self.language == "plain": # 1/30/03
    delim1,delim2,delim3 = None,None,None
else:
    delim1,delim2,delim3 = g.set_delims_from_language(self.language)

self.single_comment_start = delim1
self.block_comment_start = delim2
self.block_comment_end = delim3

# A strong case can be made for making this code as fast as possible.
# Whether this is compatible with general language descriptions remains to be seen.
self.case_sensitiveLanguage = self.language not in case_insensitiveLanguages
self.has_string = self.language != "plain"
if self.language == "plain":
    self.string_delims = ()
elif self.language in ("elisp","html"):
    self.string_delims = ('"')
else:
    self.string_delims = ("'",'"')
self.has_pp_directives = self.language in ("c","csharp","cweb","latex")

# The list of languages for which keywords exist.
# Eventually we might just use language_delims_dict.keys()
languages = [
    "actionscript","ada","c","csharp","css","cweb","elisp","forth","html","java","latex","lua",
    "pascal","perl","perlpod","php","plsql","python","rapidq","rebol","shell","tcltk"]

self.keywords = []
if self.language == "cweb":
    for i in self.c_keywords:
        self.keywords.append(i)
    for i in self.cweb_keywords:
        self.keywords.append(i)
else:
    for name in languages:
        if self.language==name: 
            # g.trace("setting keywords for",name)
            self.keywords = getattr(self, name + "_keywords")

# For forth.
self.nextForthWordIsNew = False

# Color plain text unless we are under the control of @nocolor.
# state = g.choose(self.flag,"normal","nocolor")
state = self.setFirstLineState()

if 1: # 10/25/02: we color both kinds of references in cweb mode.
    self.lb = "&lt;&lt;"
    self.rb = "&gt;&gt;"
else:
    self.lb = g.choose(self.language == "cweb","@&lt;","&lt;&lt;")
    self.rb = g.choose(self.language == "cweb","@&gt;","&gt;&gt;")
</t>
<t tx="ekr.20031218072017.371">@others

cweb_keywords = c_keywords
perlpod_keywords = perl_keywords
</t>
<t tx="ekr.20031218072017.372">actionscript_keywords = [
#Jason 2003-07-03 
#Actionscript keywords for Leo adapted from UltraEdit syntax highlighting
"break", "call", "continue", "delete", "do", "else", "false", "for", "function", "goto", "if", "in", "new", "null", "return", "true", "typeof", "undefined", "var", "void", "while", "with", "#include", "catch", "constructor", "prototype", "this", "try", "_parent", "_root", "__proto__", "ASnative", "abs", "acos", "appendChild", "asfunction", "asin", "atan", "atan2", "attachMovie", "attachSound", "attributes", "BACKSPACE", "CAPSLOCK", "CONTROL", "ceil", "charAt", "charCodeAt", "childNodes", "chr", "cloneNode", "close", "concat", "connect", "cos", "createElement", "createTextNode", "DELETEKEY", "DOWN", "docTypeDecl", "duplicateMovieClip", "END", "ENTER", "ESCAPE", "enterFrame", "entry", "equal", "eval", "evaluate", "exp", "firstChild", "floor", "fromCharCode", "fscommand", "getAscii", "getBeginIndex", "getBounds", "getBytesLoaded", "getBytesTotal", "getCaretIndex", "getCode", "getDate", "getDay", "getEndIndex", "getFocus", "getFullYear", "getHours", "getMilliseconds", "getMinutes", "getMonth", "getPan", "getProperty", "getRGB", "getSeconds", "getTime", "getTimer", "getTimezoneOffset", "getTransform", "getURL", "getUTCDate", "getUTCDay", "getUTCFullYear", "getUTCHours", "getUTCMilliseconds", "getUTCMinutes", "getUTCMonth", "getUTCSeconds", "getVersion", "getVolume", "getYear", "globalToLocal", "gotoAndPlay", "gotoAndStop", "HOME", "haschildNodes", "hide", "hitTest", "INSERT", "Infinity", "ifFrameLoaded", "ignoreWhite", "indexOf", "insertBefore", "int", "isDown", "isFinite", "isNaN", "isToggled", "join", "keycode", "keyDown", "keyUp", "LEFT", "LN10", "LN2", "LOG10E", "LOG2E", "lastChild", "lastIndexOf", "length", "load", "loaded", "loadMovie", "loadMovieNum", "loadVariables", "loadVariablesNum", "localToGlobal", "log", "MAX_VALUE", "MIN_VALUE", "max", "maxscroll", "mbchr", "mblength", "mbord", "mbsubstring", "min", "NEGATIVE_INFINITY", "NaN", "newline", "nextFrame", "nextScene", "nextSibling", "nodeName", "nodeType", "nodeValue", "on", "onClipEvent", "onClose", "onConnect", "onData", "onLoad", "onXML", "ord", "PGDN", "PGUP", "PI", "POSITIVE_INFINITY", "parentNode", "parseFloat", "parseInt", "parseXML", "play", "pop", "pow", "press", "prevFrame", "previousSibling", "prevScene", "print", "printAsBitmap", "printAsBitmapNum", "printNum", "push", "RIGHT", "random", "release", "removeMovieClip", "removeNode", "reverse", "round", "SPACE", "SQRT1_2", "SQRT2", "scroll", "send", "sendAndLoad", "set", "setDate", "setFocus", "setFullYear", "setHours", "setMilliseconds", "setMinutes", "setMonth", "setPan", "setProperty", "setRGB", "setSeconds", "setSelection", "setTime", "setTransform", "setUTCDate", "setUTCFullYear", "setUTCHours", "setUTCMilliseconds", "setUTCMinutes", "setUTCMonth", "setUTCSeconds", "setVolume", "setYear", "shift", "show", "sin", "slice", "sort", "start", "startDrag", "status", "stop", "stopAllSounds", "stopDrag", "substr", "substring", "swapDepths", "splice", "split", "sqrt", "TAB", "tan", "targetPath", "tellTarget", "toggleHighQuality", "toLowerCase", "toString", "toUpperCase", "trace", "UP", "UTC", "unescape", "unloadMovie", "unLoadMovieNum", "unshift", "updateAfterEvent", "valueOf", "xmlDecl", "_alpha", "_currentframe", "_droptarget", "_focusrect", "_framesloaded", "_height", "_highquality", "_name", "_quality", "_rotation", "_soundbuftime", "_target", "_totalframes", "_url", "_visible", "_width", "_x", "_xmouse", "_xscale", "_y", "_ymouse", "_yscale", "and", "add", "eq", "ge", "gt", "le", "lt", "ne", "not", "or", "Array", "Boolean", "Color", "Date", "Key", "Math", "MovieClip", "Mouse", "Number", "Object", "Selection", "Sound", "String", "XML", "XMLSocket"
]
</t>
<t tx="ekr.20031218072017.373">c_keywords = [
    # C keywords
    "auto","break","case","char","continue",
    "default","do","double","else","enum","extern",
    "float","for","goto","if","int","long","register","return",
    "short","signed","sizeof","static","struct","switch",
    "typedef","union","unsigned","void","volatile","while",
    # C++ keywords
    "asm","bool","catch","class","const","const_cast",
    "delete","dynamic_cast","explicit","false","friend",
    "inline","mutable","namespace","new","operator",
    "private","protected","public","reinterpret_cast","static_cast",
    "template","this","throw","true","try",
    "typeid","typename","using","virtual","wchar_t"]
</t>
<t tx="ekr.20031218072017.374"># EKR: needs more work.
elisp_keywords = [
    # Maybe...
    "error","princ",
    # More typical of other lisps...
    "apply","eval",
    "t","nil",
    "and","or","not",
    "cons","car","cdr",
    "cond",
    "defconst","defun","defvar",
    "eq","ne","equal","gt","ge","lt","le",
    "if",
    "let",
    "mapcar",
    "prog","progn",
    "set","setq",
    "type-of",
    "unless",
    "when","while"]
</t>
<t tx="ekr.20031218072017.375"># No longer used by syntax colorer.
html_keywords = []

if 0: # Not used at present.
    unused_keywords = [
        # html constructs.
        "a","body","cf",
        "h1","h2","h3","h4","h5","h6",
        "head","html","hr",
        "i","img","li","lu","meta",
        "p","title","ul",
        # Common tags
        "caption","col","colgroup",
        "table","tbody","td","tfoot","th","thead","tr",
        "script","style"]

    html_specials = [ "&lt;%","%&gt;" ]
</t>
<t tx="ekr.20031218072017.376">java_keywords = [
    "abstract","boolean","break","byte","byvalue",
    "case","cast","catch","char","class","const","continue",
    "default","do","double","else","extends",
    "false","final","finally","float","for","future",
    "generic","goto","if","implements","import","inner",
    "instanceof","int","interface","long","native",
    "new","null","operator","outer",
    "package","private","protected","public","rest","return",
    "short","static","super","switch","synchronized",
    "this","throw","transient","true","try",
    "var","void","volatile","while"]
</t>
<t tx="ekr.20031218072017.377">#If you see two idenitical words, with minor capitalization differences
#DO NOT ASSUME that they are the same word. For example \vert produces
#a single vertical line and \Vert produces a double vertical line
#Marcus A. Martin.

latex_special_keyword_characters = "@(){}%"

latex_keywords = [
    #special keyworlds
    "\\%", # 11/9/03
    "\\@", "\\(", "\\)", "\\{", "\\}",
    #A
    "\\acute", "\\addcontentsline", "\\addtocontents", "\\addtocounter", "\\address",
    "\\addtolength", "\\addvspace", "\\AE", "\\ae", "\\aleph", "\\alph", "\\angle",
    "\\appendix", 
    "\\approx", "\\arabic", "\\arccos", "\\arcsin", "\\arctan", "\\ast", "\\author",
    #B
    "\\b", "\\backmatter", "\\backslash", "\\bar", "\\baselineskip", "\\baselinestretch",
    "\\begin", "\\beta", "\\bezier", "\\bf", "\\bfseries", "\\bibitem", "\\bigcap",
    "\\bigcup", "\\bigodot", "\\bigoplus", "\\bigotimes", "\\bigskip", "\\biguplus",
    "\\bigvee", "\\bigwedge", "\\bmod", "\\boldmath", "\\Box", "\\breve", "\\bullet",
    #C
    "\\c", "\\cal", "\\caption", "\\cdot", "\\cdots", "\\centering", "\\chapter",
    "\\check", "\\chi", "\\circ", "\\circle", "\\cite", "\\cleardoublepage", "\\clearpage",
    "\\cline", "\\closing", "\\clubsuit", "\\coprod", "\\copywright", "\\cos", "\\cosh",
    "\\cot", "\\coth", "csc",
    #D
    "\\d", "\\dag", "\\dashbox", "\\date", "\\ddag", "\\ddot", "\\ddots", "\\decl",
    "\\deg", "\\Delta", 
    "\\delta", "\\depthits", "\\det", 
    "\\DH", "\\dh", "\\Diamond", "\\diamondsuit", "\\dim", "\\div", "\\DJ", "\\dj",
    "\\documentclass", "\\documentstyle", 
    "\\dot", "\\dotfil", "\\downarrow",
    #E
    "\\ell", "\\em", "\\emph", "\\end", "\\enlargethispage", "\\ensuremath",
    "\\enumi", "\\enuii", "\\enumiii", "\\enuiv", "\\epsilon", "\\equation", "\\equiv",
    "\\eta", "\\example", "\\exists", "\\exp",
    #F
    "\\fbox", "\\figure", "\\flat", "\\flushbottom", "\\fnsymbol", "\\footnote",
    "\\footnotemark", "\\fotenotesize", 
    "\\footnotetext", "\\forall", "\\frac", "\\frame", "\\framebox", "\\frenchspacing",
    "\\frontmatter",
    #G
    "\\Gamma", "\\gamma", "\\gcd", "\\geq", "\\gg", "\\grave", "\\guillemotleft", 
    "\\guillemotright", "\\guilsinglleft", "\\guilsinglright",
    #H
    "\\H", "\\hat", "\\hbar", "\\heartsuit", "\\heightits", "\\hfill", "\\hline", "\\hom",
    "\\hrulefill", "\\hspace", "\\huge", "\\Huge", "\\hyphenation"
    #I
    "\\Im", "\\imath", "\\include", "includeonly", "indent", "\\index", "\\inf", "\\infty", 
    "\\input", "\\int", "\\iota", "\\it", "\\item", "\\itshape",
    #J
    "\\jmath", "\\Join",
    #K
    "\\k", "\\kappa", "\\ker", "\\kill",
    #L
    "\\label", "\\Lambda", "\\lambda", "\\langle", "\\large", "\\Large", "\\LARGE", 
    "\\LaTeX", "\\LaTeXe", 
    "\\ldots", "\\leadsto", "\\left", "\\Leftarrow", "\\leftarrow", "\\lefteqn", "\\leq",
    "\\lg", "\\lhd", "\\lim", "\\liminf", "\\limsup", "\\line", "\\linebreak", 
    "\\linethickness", "\\linewidth", "\\listfiles",
    "\\ll", "\\ln", "\\location", "\\log", "\\Longleftarrow", "\\longleftarrow", 
    "\\Longrightarrow", "longrightarrow",
    #M
    "\\mainmatter", "\\makebox", "\\makeglossary", "\\makeindex","\\maketitle", "\\markboth", "\\markright",
    "\\mathbf", "\\mathcal", "\\mathit", "\\mathnormal", "\\mathop",
    "\\mathrm", "\\mathsf", "\\mathtt", "\\max", "\\mbox", "\\mdseries", "\\medskip",
    "\\mho", "\\min", "\\mp", "\\mpfootnote", "\\mu", "\\multicolumn", "\\multiput",
    #N
    "\\nabla", "\\natural", "\\nearrow", "\\neq", "\\newcommand", "\\newcounter", 
    "\\newenvironment", "\\newfont",
    "\\newlength", "\\newline", "\\newpage", "\\newsavebox", "\\newtheorem", "\\NG", "\\ng",
    "\\nocite", "\\noindent", "\\nolinbreak", "\\nopagebreak", "\\normalsize",
    "\\not", "\\nu", "nwarrow",
    #O
    "\\Omega", "\\omega", "\\onecolumn", "\\oint", "\\opening", "\\oval", 
    "\\overbrace", "\\overline",
    #P
    "\\P", "\\page", "\\pagebreak", "\\pagenumbering", "\\pageref", "\\pagestyle", 
    "\\par", "\\parbox", "\\paragraph", "\\parindent", "\\parskip", "\\part", 
    "\\partial", "\\per", "\\Phi", "\\phi", "\\Pi", "\\pi", "\\pm", 
    "\\pmod", "\\pounds", "\\prime", "\\printindex", "\\prod", "\\propto", "\\protext", 
    "\\providecomamnd", "\\Psi", "\\psi", "\\put",
    #Q
    "\\qbezier", "\\quoteblbase", "\\quotesinglbase",
    #R
    "\\r", "\\raggedbottom", "\\raggedleft", "\\raggedright", "\\raisebox", "\\rangle", 
    "\\Re", "\\ref", "\\renewcommand", "\\renewenvironment", "\\rhd", "\\rho", "\\right", 
    "\\Rightarrow", "\\rightarrow", "\\rm", "\\rmfamily",
    "\\Roman", "\\roman", "\\rule", 
    #S
    "\\s", "\\samepage", "\\savebox", "\\sbox", "\\sc", "\\scriptsize", "\\scshape", 
    "\\searrow", "\\sec", "\\section",
    "\\setcounter", "\\setlength", "\\settowidth", "\\settodepth", "\\settoheight", 
    "\\settowidth", "\\sf", "\\sffamily", "\\sharp", "\\shortstack", "\\Sigma", "\\sigma", 
    "\\signature", "\\sim", "\\simeq", "\\sin", "\\sinh", "\\sl", "\\SLiTeX",
    "\\slshape", "\\small", "\\smallskip", "\\spadesuit", "\\sqrt", "\\sqsubset",
    "\\sqsupset", "\\SS",
    "\\stackrel", "\\star", "\\subsection", "\\subset", 
    "\\subsubsection", "\\sum", "\\sup", "\\supressfloats", "\\surd", "\\swarrow",
    #T
    "\\t", "\\table", "\\tableofcontents", "\\tabularnewline", "\\tan", "\\tanh", 
    "\\tau", "\\telephone", "\\TeX", "\\textbf",
    "\\textbullet", "\\textcircled", "\\textcompworkmark", "\\textemdash", 
    "\\textendash", "\\textexclamdown", "\\textheight", "\\textquestiondown", 
    "\\textquoteblleft", "\\textquoteblright", "\\textquoteleft",
    "\\textperiod", "\\textquotebl", "\\textquoteright", "\\textmd", "\\textit", "\\textrm", 
    "\\textsc", "\\textsl", "\\textsf", "\\textsuperscript", "\\texttt", "\\textup",
    "\\textvisiblespace", "\\textwidth", "\\TH", "\\th", "\\thanks", "\\thebibligraphy",
    "\\Theta", "theta", 
    "\\tilde", "\\thinlines", 
    "\\thispagestyle", "\\times", "\\tiny", "\\title", "\\today", "\\totalheightits", 
    "\\triangle", "\\tt", 
    "\\ttfamily", "\\twocoloumn", "\\typeout", "\\typein",
    #U
    "\\u", "\\underbrace", "\\underline", "\\unitlength", "\\unlhd", "\\unrhd", "\\Uparrow",
    "\\uparrow", "\\updownarrow", "\\upshape", "\\Upsilon", "\\upsilon", "\\usebox",
    "\\usecounter", "\\usepackage", 
    #V
    "\\v", "\\value", "\\varepsilon", "\\varphi", "\\varpi", "\\varrho", "\\varsigma", 
    "\\vartheta", "\\vdots", "\\vec", "\\vector", "\\verb", "\\Vert", "\\vert", "\\vfill",
    "\\vline", "\\vphantom", "\\vspace",
    #W
    "\\widehat", "\\widetilde", "\\widthits", "\\wp",
    #X
    "\\Xi", "\\xi",
    #Z
    "\\zeta" ]
</t>
<t tx="ekr.20031218072017.378">pascal_keywords = [
    "and","array","as","begin",
    "case","const","class","constructor","cdecl"
    "div","do","downto","destructor","dispid","dynamic",
    "else","end","except","external",
    "false","file","for","forward","function","finally",
    "goto","if","in","is","label","library",
    "mod","message","nil","not","nodefault""of","or","on",
    "procedure","program","packed","pascal",
    "private","protected","public","published",
    "record","repeat","raise","read","register",
    "set","string","shl","shr","stdcall",
    "then","to","true","type","try","until","unit","uses",
    "var","virtual","while","with","xor"
    # object pascal
    "asm","absolute","abstract","assembler","at","automated",
    "finalization",
    "implementation","inherited","initialization","inline","interface",
    "object","override","resident","resourcestring",
    "threadvar",
    # limited contexts
    "exports","property","default","write","stored","index","name" ]
</t>
<t tx="ekr.20031218072017.379">perl_keywords = [
    "continue","do","else","elsif","format","for","format","for","foreach",
    "if","local","package","sub","tr","unless","until","while","y",
    # Comparison operators
    "cmp","eq","ge","gt","le","lt","ne",
    # Matching ooperators
    "m","s",
    # Unary functions
    "alarm","caller","chdir","cos","chroot","exit","eval","exp",
    "getpgrp","getprotobyname","gethostbyname","getnetbyname","gmtime",
    "hex","int","length","localtime","log","ord","oct",
    "require","reset","rand","rmdir","readlink",
    "scalar","sin","sleep","sqrt","srand","umask",
    # Transfer ops
    "next","last","redo","go","dump",
    # File operations...
    "select","open",
    # FL ops
    "binmode","close","closedir","eof",
    "fileno","getc","getpeername","getsockname","lstat",
    "readdir","rewinddir","stat","tell","telldir","write",
    # FL2 ops
    "bind","connect","flock","listen","opendir",
    "seekdir","shutdown","truncate",
    # FL32 ops
    "accept","pipe",
    # FL3 ops
    "fcntl","getsockopt","ioctl","read",
    "seek","send","sysread","syswrite",
    # FL4 &amp; FL5 ops
    "recv","setsocket","socket","socketpair",
    # Array operations
    "pop","shift","split","delete",
    # FLIST ops
    "sprintf","grep","join","pack",
    # LVAL ops
    "chop","defined","study","undef",
    # f0 ops
    "endhostent","endnetent","endservent","endprotoent",
    "endpwent","endgrent","fork",
    "getgrent","gethostent","getlogin","getnetent","getppid",
    "getprotoent","getpwent","getservent",
    "setgrent","setpwent","time","times","wait","wantarray",
    # f1 ops
    "getgrgid","getgrnam","getprotobynumber","getpwnam","getpwuid",
    "sethostent","setnetent","setprotoent","setservent",
    # f2 ops
    "atan2","crypt",
    "gethostbyaddr","getnetbyaddr","getpriority","getservbyname","getservbyport",
    "index","link","mkdir","msgget","rename",
    "semop","setpgrp","symlink","unpack","waitpid",
    # f2 or 3 ops
    "index","rindex","substr",
    # f3 ops
    "msgctl","msgsnd","semget","setpriority","shmctl","shmget","vec",
    # f4 &amp; f5 ops
    "semctl","shmread","shmwrite","msgrcv",
    # Assoc ops
    "dbmclose","each","keys","values",
    # List ops
    "chmod","chown","die","exec","kill",
    "print","printf","return","reverse",
    "sort","system","syscall","unlink","utime","warn"]
</t>
<t tx="ekr.20031218072017.380">php_keywords = [ # 08-SEP-2002 DTHEIN
    "__CLASS__", "__FILE__", "__FUNCTION__", "__LINE__",
    "and", "as", "break",
    "case", "cfunction", "class", "const", "continue",
    "declare", "default", "do",
    "else", "elseif", "enddeclare", "endfor", "endforeach",
    "endif", "endswitch",  "endwhile", "eval", "extends",
    "for", "foreach", "function", "global", "if",
    "new", "old_function", "or", "static", "switch",
    "use", "var", "while", "xor" ]
    
# The following are supposed to be followed by ()
php_paren_keywords = [
    "array", "die", "echo", "empty", "exit",
    "include", "include_once", "isset", "list",
    "print", "require", "require_once", "return",
    "unset" ]
    
# The following are handled by special case code:
# "&lt;?php", "?&gt;"
</t>
<t tx="ekr.20031218072017.381">python_keywords = [
    "and",       "del",       "for",       "is",        "raise",    
    "assert",    "elif",      "from",      "lambda",    "return",   
    "break",     "else",      "global",    "not",       "try",      
    "class",     "except",    "if",        "or",        "yield",   
    "continue",  "exec",      "import",    "pass",      "while",
    "def",       "finally",   "in",        "print"]
</t>
<t tx="ekr.20031218072017.382">rebol_keywords = [
#Jason 2003-07-03 
#based on UltraEdit syntax highlighting
"about", "abs", "absolute", "add", "alert", "alias", "all", "alter", "and", "and~", "any", "append", "arccosine", "arcsine", "arctangent", "array", "ask", "at",  
"back", "bind", "boot-prefs", "break", "browse", "build-port", "build-tag",  
"call", "caret-to-offset", "catch", "center-face", "change", "change-dir", "charset", "checksum", "choose", "clean-path", "clear", "clear-fields", "close", "comment", "complement", "compose", "compress", "confirm", "continue-post", "context", "copy", "cosine", "create-request", "crypt", "cvs-date", "cvs-version",  
"debase", "decode-cgi", "decode-url", "decompress", "deflag-face", "dehex", "delete", "demo", "desktop", "detab", "dh-compute-key", "dh-generate-key", "dh-make-key", "difference", "dirize", "disarm", "dispatch", "divide", "do", "do-boot", "do-events", "do-face", "do-face-alt", "does", "dsa-generate-key", "dsa-make-key", "dsa-make-signature", "dsa-verify-signature",  
"echo", "editor", "either", "else", "emailer", "enbase", "entab", "exclude", "exit", "exp", "extract", 
"fifth", "find", "find-key-face", "find-window", "flag-face", "first", "flash", "focus", "for", "forall", "foreach", "forever", "form", "forskip", "fourth", "free", "func", "function",  
"get", "get-modes", "get-net-info", "get-style",  
"halt", "has", "head", "help", "hide", "hide-popup",  
"if", "import-email", "in", "inform", "input", "insert", "insert-event-func", "intersect", 
"join", 
"last", "launch", "launch-thru", "layout", "license", "list-dir", "load", "load-image", "load-prefs", "load-thru", "log-10", "log-2", "log-e", "loop", "lowercase",  
"make", "make-dir", "make-face", "max", "maximum", "maximum-of", "min", "minimum", "minimum-of", "mold", "multiply",  
"negate", "net-error", "next", "not", "now",  
"offset-to-caret", "open", "open-events", "or", "or~", 
"parse", "parse-email-addrs", "parse-header", "parse-header-date", "parse-xml", "path-thru", "pick", "poke", "power", "prin", "print", "probe", "protect", "protect-system",  
"q", "query", "quit",  
"random", "read", "read-io", "read-net", "read-thru", "reboot", "recycle", "reduce", "reform", "rejoin", "remainder", "remold", "remove", "remove-event-func", "rename", "repeat", "repend", "replace", "request", "request-color", "request-date", "request-download", "request-file", "request-list", "request-pass", "request-text", "resend", "return", "reverse", "rsa-encrypt", "rsa-generate-key", "rsa-make-key", 
"save", "save-prefs", "save-user", "scroll-para", "second", "secure", "select", "send", "send-and-check", "set", "set-modes", "set-font", "set-net", "set-para", "set-style", "set-user", "set-user-name", "show", "show-popup", "sine", "size-text", "skip", "sort", "source", "split-path", "square-root", "stylize", "subtract", "switch",  
"tail", "tangent", "textinfo", "third", "throw", "throw-on-error", "to", "to-binary", "to-bitset", "to-block", "to-char", "to-date", "to-decimal", "to-email", "to-event", "to-file", "to-get-word", "to-hash", "to-hex", "to-idate", "to-image", "to-integer", "to-issue", "to-list", "to-lit-path", "to-lit-word", "to-local-file", "to-logic", "to-money", "to-none", "to-pair", "to-paren", "to-path", "to-rebol-file", "to-refinement", "to-set-path", "to-set-word", "to-string", "to-tag", "to-time", "to-tuple", "to-url", "to-word", "trace", "trim", "try",  
"unfocus", "union", "unique", "uninstall", "unprotect", "unset", "until", "unview", "update", "upgrade", "uppercase", "usage", "use",  
"vbug", "view", "view-install", "view-prefs",  
"wait", "what", "what-dir", "while", "write", "write-io",  
"xor", "xor~",  
"action!", "any-block!", "any-function!", "any-string!", "any-type!", "any-word!",  
"binary!", "bitset!", "block!",  
"char!",  
"datatype!", "date!", "decimal!", 
"email!", "error!", "event!",  
"file!", "function!",  
"get-word!",  
"hash!",  
"image!", "integer!", "issue!",  
"library!", "list!", "lit-path!", "lit-word!", "logic!",  
"money!",  
"native!", "none!", "number!",  
"object!", "op!",  
"pair!", "paren!", "path!", "port!",  
"refinement!", "routine!",  
"series!", "set-path!", "set-word!", "string!", "struct!", "symbol!",  
"tag!", "time!", "tuple!",  
"unset!", "url!",  
"word!",  
"any-block?", "any-function?", "any-string?", "any-type?", "any-word?",  
"binary?", "bitset?", "block?",  
"char?", "connected?", "crypt-strength?", 
"datatype?", "date?", "decimal?", "dir?",  
"email?", "empty?", "equal?", "error?", "even?", "event?", "exists?", "exists-key?",
"file?", "flag-face?", "found?", "function?",  
"get-word?", "greater-or-equal?", "greater?",  
"hash?", "head?",  
"image?", "in-window?", "index?", "info?", "input?", "inside?", "integer?", "issue?",  
"length?", "lesser-or-equal?", "lesser?", "library?", "link-app?", "link?", "list?", "lit-path?", "lit-word?", "logic?",  
"modified?", "money?",  
"native?", "negative?", "none?", "not-equal?", "number?",  
"object?", "odd?", "offset?", "op?", "outside?",  
"pair?", "paren?", "path?", "port?", "positive?",  
"refinement?", "routine?",  
"same?", "screen-offset?", "script?", "series?", "set-path?", "set-word?", "size?", "span?", "strict-equal?", "strict-not-equal?", "string?", "struct?",  
"tag?", "tail?", "time?", "tuple?", "type?",  
"unset?", "url?",  
"value?", "view?", 
"within?", "word?",  
"zero?"
]
</t>
<t tx="ekr.20031218072017.383">tcltk_keywords = [ # Only the tcl keywords are here.
    "after",     "append",    "array",
    "bgerror",   "binary",    "break",
    "catch",     "cd",        "clock",
    "close",     "concat",    "continue",
    "dde",
    "encoding",  "eof",       "eval",
    "exec",      "exit",      "expr",
    "fblocked",  "fconfigure","fcopy",     "file",      "fileevent",
    "filename",  "flush",     "for",       "foreach",   "format",
    "gets",      "glob",      "global",
    "history",
    "if",        "incr",      "info",      "interp",
    "join",
    "lappend",   "lindex",    "linsert",   "list",      "llength",
    "load",      "lrange",    "lreplace",  "lsearch",   "lsort",
    "memory",    "msgcat",
    "namespace",
    "open",
    "package",   "parray",    "pid",
    "proc",      "puts",      "pwd",
    "read",      "regexp",    "registry",   "regsub",
    "rename",    "resource",  "return",
    "scan",      "seek",      "set",        "socket",   "source",
    "split",     "string",    "subst",      "switch",
    "tell",      "time",      "trace",
    "unknown",   "unset",     "update",     "uplevel",   "upvar",
    "variable",  "vwait",
    "while" ]
</t>
<t tx="ekr.20031218072017.384">Scite has the option to "Export as html" and "export as rtf", and it will be
full of colour and fonts - and you can define them in properties, so it will be
the same as during editing.</t>
<t tx="ekr.20031218072017.385">To increase the size of environment space, add the following to config.sys:

shell=C:\windows\command\command.com /p:4096

Notes:

1. The path C:\windows\command\command.com may vary.
Check you system for the location of command.com.

2. This works for versions of Windows prior to Me.
On Me you set the registry somehow.
No information on XP.</t>
<t tx="ekr.20031218072017.386">teknico ( Nicola Larosa ) 
 RE: Removing '\r' characters?   
2002-09-16 14:27  
&gt; I am plowing through old bug reports, and I found the following, from whom 
&gt; I don't know: 

That's from me, *again*. You are kindly advised to stop forgetting the attribution to all my bug reports. ;^) 

&gt;&gt; - Source files still have the dreaded \r in them. Why don't you switch 
&gt;&gt; to \n only, once and for all, and live happily ever after? ;^) 

&gt; I sure whould like to do that, and I'm not sure how to do this. All 
&gt; versions of the read code attempt to remove '\r' characters, and all 
&gt; versions of the write code write '\n' only for newlines. 

Sorry for being a bit vague, I was talking about the Leo source files themselves. I don't know what you use to edit them, ;^))) but in version 3.6 they still have \r\n as end-of-line. 

If Leo itself does not solve the problem, may I suggest the 
Tools/scripts/crlf.py script in the Python source distibution? It's nice and simple, and skips binary files, too. That's what I use every time I install a new version of Leo. :^) 
 
</t>
<t tx="ekr.20031218072017.387">Under unix, python writes "\n" as "\n"; under windows, it writes it as "\r\n". The unix python interpreter ignores trailing "\r" in python source files. There are no such guarantees for other languages. Unix users should be able to get rid of the cosmetically detrimental "\r" either by running dos2unix on the offending files, or, if they're part of a .leo project, reading them into leo and writing them out again.  


By: edream ( Edward K. Ream ) 
 RE: Removing '\r' characters?   
2002-09-17 09:34  
Oh, I see. Thanks very much for this clarification. 

Just to make sure I understand you: the problem with '\r' characters is that: 

1. I am creating LeoPy.leo and LeoDocs.leo on Windows and 
2. People are then using these files on Linux. 

and the way to remove the '\r' characters: 

1. I could run dos2unix on all distributed files just before committing to CVS or making a final distribution or 
2. People could, say, do the following: 

Step 1: Read and Save the .leo files, thereby eliminating the '\r' in those files and 
Step 2: Use the Write @file nodes command on all derived files to clear the '\r' in those files. 

Do you agree so far? 

&gt; Under unix, python writes "\n" as "\n"; under windows, it writes it as "\r\n". 

I am going to see if there is any way to get Python to write a "raw" '\n' to a file. I think there must be. This would solve the problem once and for all. 

Thanks again for this most helpful comment. 

Edward</t>
<t tx="ekr.20031218072017.388">In 2.3 you can open files with the "U" flag and get "universal newline"
support: 

% python
Python 2.3a0 (#86, Sep 4 2002, 21:13:00) 
[GCC 2.96 20000731 (Mandrake Linux 8.1 2.96-0.62mdk)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; f = open("crlf.txt")
&gt;&gt;&gt; line = f.readline()
&gt;&gt;&gt; line
'This is an example of what I have come to call the "cursed newline"
problem,\r\n'
&gt;&gt;&gt; f = open("crlf.txt", "rU")
&gt;&gt;&gt; line = f.readline()
&gt;&gt;&gt; line
'This is an example of what I have come to call the "cursed newline" problem,\n'

</t>
<t tx="ekr.20031218072017.389">&gt; You can open the file in 'binary' mode (adding 'b' to the mode string) and
&gt; the file will contain '\r\n' on both platforms (and any other platforms.)

Nope. Exactly wrong. In 2.2 and those before, when files are opened in
*text* mode (no "b") then reading them will provide Unix-style line endings
(newline only). When you open files in binary mode then you see the bytes
stored in the file.

On Unix systems there's no difference in the contents of a file whether in
binary or text mode. On Windows a file is shorter by the number of carriage
returns. On the Mac I have no idea what they do. Probably just carriage
returns, to be different :-)

2.3 will be a bit more flexible about such mattrers.
</t>
<t tx="ekr.20031218072017.390">Do the following in Idle:

import pychecker.checker ; import leo

To run Idle(Python2.3 version) directly:

cd c:\prog\leoCvs\leo\src
c:\python23\python c:\python23\Lib\idlelib\idle.py

The HOME var must be set to c:\prog\leoCVS for .pycheckrc to be effective.

To suppress warnings from the standard library set ignoreStandardLibrary=1 in .pycheckrc</t>
<t tx="ekr.20031218072017.391">@nocolor

I have a fair bit of expertise on CVS branches. It's late at night, so I don't have time for a long soapbox spiel at the moment. I will try to post something tomorrow. 

The brief picture is: 

* Check out code from CVS at the point you want to create the branch. 

* Make sure none of the files in your sandbox is modified. 

* Create the branch (cvs tag -b branchname). The branch name must start with a letter (upper or lower case) and thereafter can have alphanumeric characters, hyphens, and underscores (no periods or spaces). 

* The branch is created on the repository, but your sandbox is still checked out on the main branch. To check out on the new branch, do "cvs up -r branchname". 

When you want to merge changes back into the main branch, you can use "cvs up -r MAIN" to retrieve the main branch, then "cvs up -j branchname" to merge changes, then "cvs commit" to commit the merged version to the main branch AFTER YOU HAVE VERIFIED IT. 

I would recommend caution with merging because as you have noted, leo files are not well set up for CVS. They don't merge well because of inconsistent sentinel values. 

You may want to look at manually merging changes back into the main branch until leo implements invariant unique (UUID) sentinel indices. 

This will not hurt your ability to use branches, only your ability to automatically merge changes from one branch onto another.</t>
<t tx="ekr.20031218072017.392"></t>
<t tx="ekr.20031218072017.398">In general, everything you can do in Python is accessible through the C API.

	lines = block.split('\n');
 
&gt; That will be
 
	lines = PyObject_CallMethod(block, "split", "s", "\n");
</t>
<t tx="ekr.20031218072017.399"></t>
<t tx="ekr.20031218072017.400">It is worth noting that NT, Win2K and XP all have an alternative which is
to add .PY to the PATHEXT environment variable. Then you can run any .PY
file directly just by typing the name of the script without the extension. 

e.g.
C:\&gt;set PATHEXT=.COM;.EXE;.BAT;.CMD

C:\&gt;set PATH=%PATH%;c:\python22\tools\Scripts

C:\&gt;google
'google' is not recognized as an internal or external command,
operable program or batch file.

C:\&gt;set PATHEXT=.COM;.EXE;.BAT;.CMD;.PY

C:\&gt;google
Usage: C:\python22\tools\Scripts\google.py querystring

C:\&gt;
</t>
<t tx="ekr.20031218072017.401">&gt;&gt; It has a header of just one line. All the ugly stuff is at the end.
&gt;&gt;
&gt;&gt; -------------------------------------------------------------------
&gt;&gt; goto ="python"
&gt;&gt;
&gt;&gt; # Python code goes here
&gt;&gt;
&gt;&gt; ''' hybrid python/batch footer:
&gt;&gt; @:="python"
&gt;&gt; @python.exe %0 %1 %2 %3 %4 %5 %6 %7 %8 %9
&gt;&gt; @if errorlevel 9009 echo Python may be downloaded from
&gt;www.python.org/download
&gt;&gt; @rem '''
&gt;&gt; -------------------------------------------------------------------
&gt;&gt;
&gt;&gt;         Oren
&gt;&gt;
&gt;

It's for running python scripts on windows, without having to type:

[&lt;path to python&gt;\]python[.exe] &lt;scriptname&gt; [&lt;arguments&gt;*]

and almost takes the place of the "shabang" line at the top of *nix
scripts.

</t>
<t tx="ekr.20031218072017.434">@ignore
@language python
@color</t>
<t tx="ekr.20031218072017.1144">def openOutputFile (self):
    
    if self.outputFileName == None:
        return
    theDir,name = g.os_path_split(self.outputFileName)
    if len(theDir) == 0:
        self.show("empty output directory")
        return
    if len(name) == 0:
        self.show("empty output file name")
        return
    if not g.os_path_exists(theDir):
        self.show("output directory not found: " + theDir)
    else:
        try:
            if self.appendOutput:
                self.show("appending to " + self.outputFileName)
                self.outputFile = open(self.outputFileName,"ab")
            else:
                self.show("writing to " + self.outputFileName)
                self.outputFile = open(self.outputFileName,"wb")
        except:
            self.outputFile = None
            self.show("exception opening output file")
            g.es_exception()
</t>
<t tx="ekr.20031218072017.1260"># The caller passes [root_node] or None as the second arg.  This allows us to distinguish between None and [None].

def get_directives_dict(s,root=None):
    
    """Scans root for @directives found in globalDirectiveList.

    Returns a dict containing pointers to the start of each directive"""

    if root: root_node = root[0]
    theDict = {}
    i = 0 ; n = len(s)
    while i &lt; n:
        if s[i] == '@' and i+1 &lt; n:
            &lt;&lt; set theDict for @ directives &gt;&gt;
        elif root and g.match(s,i,"&lt;&lt;"):
            &lt;&lt; set theDict["root"] for noweb * chunks &gt;&gt;
        i = g.skip_line(s,i)
    return theDict
</t>
<t tx="ekr.20031218072017.1261">j = g.skip_c_id(s,i+1)
word = s[i+1:j]

global globalDirectiveList

if word in globalDirectiveList:
    if theDict.has_key(word):
        # Ignore second value.
        pass
        # g.es("Warning: conflicting values for %s" % (word), color="blue")
    else:
        theDict [word] = i
</t>
<t tx="ekr.20031218072017.1262">@ The following looks for chunk definitions of the form &lt; &lt; * &gt; &gt; =. If found, we take this to be equivalent to @root filename if the headline has the form @root filename.
@c

i = g.skip_ws(s,i+2)
if i &lt; n and s[i] == '*' :
    i = g.skip_ws(s,i+1) # Skip the '*'
    if g.match(s,i,"&gt;&gt;="):
        # &lt; &lt; * &gt; &gt; = implies that @root should appear in the headline.
        i += 3
        if root_node:
            theDict["root"]=0 # value not immportant
        else:
            g.es(g.angleBrackets("*") + "= requires @root in the headline")
</t>
<t tx="ekr.20031218072017.1460">def update_ivars (self):
    
    """Called just before doing a find to update ivars from the find panel."""

    for key in self.intKeys:
        val = self.dict[key].get()
        setattr(self, key, val) # No more _flag hack.
        # g.trace(key,val)

    # Set ivars from radio buttons. Convert these to 1 or 0.
    if 0: ###
        find_type = self.dict["radio-find-type"].get()
        self.pattern_match = g.choose(find_type == "pattern-search",1,0)
        self.script_search = g.choose(find_type == "script-search",1,0)
    
    search_scope = self.dict["radio-search-scope"].get()
    self.suboutline_only = g.choose(search_scope == "suboutline-only",1,0)
    self.node_only       = g.choose(search_scope == "node-only",1,0)
    self.selection       = g.choose(search_scope == "selection-only",1,0) # 11/9/03

    # New in 4.3: The caller is responsible for removing most trailing cruft.
    # Among other things, this allows Leo to search for a single trailing space.
    s = self.find_ctrl.get("1.0","end")
    s = g.toUnicode(s,g.app.tkEncoding)
    # g.trace(repr(s))
    if s and s[-1] in ('\r','\n'):
        s = s[:-1]
    self.find_text = s

    s = self.change_ctrl.get("1.0","end")
    if s and s[-1] in ('\r','\n'):
        s = s[:-1]
    s = g.toUnicode(s,g.app.tkEncoding)
    self.change_text = s
</t>
<t tx="ekr.20031218072017.1595"># leoKeywords is used by directivesKind, so it should be a module-level symbol.

# leoKeywords must be a list so that plugins may alter it.

leoKeywords = [
    "@","@all","@c","@code","@color","@comment",
    "@delims","@doc","@encoding","@end_raw",
    "@first","@header","@ignore",
    "@killcolor",
    "@language","@last","@lineending",
    "@nocolor","@noheader","@nowrap","@others",
    "@pagewidth","@path","@quiet","@raw","@root","@root-code","@root-doc",
    "@silent","@tabwidth","@terse",
    "@unit","@verbose","@wrap",
    "@keywords"]
</t>
<t tx="ekr.20031218072017.1602"># Add any newly-added user keywords.
for d in g.globalDirectiveList:
    name = '@' + d
    if name not in leoKeywords:
        leoKeywords.append(name)

# Copy the arguments.
self.p = p

# Get the body text, converted to unicode.
s = self.body.getAllText() # 10/27/03
self.sel = sel = self.body.getInsertionPoint() # 10/27/03
start,end = self.body.convertIndexToRowColumn(sel) # 10/27/03

if self.language: self.language = self.language.lower() # 6/20/05
# g.trace(self.count,self.p)
# g.trace(body.tag_names())

if not self.incremental:
    self.removeAllTags()
    self.removeAllImages()

self.redoColoring = False
self.redoingColoring = False

&lt;&lt; configure fonts &gt;&gt;
&lt;&lt; configure tags &gt;&gt;
&lt;&lt; configure language-specific settings &gt;&gt;

self.hyperCount = 0 # Number of hypertext tags
self.count += 1
lines = string.split(s,'\n')
</t>
<t tx="ekr.20031218072017.1603"># g.trace('configure tags',self.body.bodyCtrl)
# agp color

#print 'configurertags2'

for name in default_colors_dict.keys(): # Python 2.1 support.
    option_name,default_color = default_colors_dict[name]
    #option_color = c.config.getColor(option_name)
    #color = g.choose(option_color,option_color,default_color)
    # Must use foreground, not fg.
    try:
        self.body.tag_configure(name, foreground=default_color)
    except: # Recover after a user error.
        self.body.tag_configure(name, foreground=default_color)



underline_undefined = c.config.getBool("underline_undefined_section_names")
use_hyperlinks      = c.config.getBool("use_hyperlinks")
self.use_hyperlinks = use_hyperlinks

# underline=var doesn't seem to work.
if 0: # use_hyperlinks: # Use the same coloring, even when hyperlinks are in effect.
    self.body.tag_configure("link",underline=1) # defined
    self.body.tag_configure("name",underline=0) # undefined
else:
    self.body.tag_configure("link",underline=0)
    if underline_undefined:
        self.body.tag_configure("name",underline=1)
    else:
        self.body.tag_configure("name",underline=0)
        
# 8/4/02: we only create tags for whitespace when showing invisibles.
if self.showInvisibles:
    for name,option_name,default_color in (
        ("blank","show_invisibles_space_background_color","Gray90"),
        ("tab",  "show_invisibles_tab_background_color",  "Gray80")):
        option_color = c.config.getColor(option_name)
        color = g.choose(option_color,option_color,default_color)
        try:
            self.body.tag_configure(name,background=color)
        except: # Recover after a user error.
            self.body.tag_configure(name,background=default_color)
    
# 11/15/02: Colors for latex characters.  Should be user options...

if 1: # Alas, the selection doesn't show if a background color is specified.
    self.body.tag_configure("latexModeBackground",foreground="black")
    self.body.tag_configure("latexModeKeyword",foreground="blue")
    self.body.tag_configure("latexBackground",foreground="black")
    self.body.tag_configure("latexKeyword",foreground="blue")
else: # Looks cool, and good for debugging.
    self.body.tag_configure("latexModeBackground",foreground="black",background="seashell1")
    self.body.tag_configure("latexModeKeyword",foreground="blue",background="seashell1")
    self.body.tag_configure("latexBackground",foreground="black",background="white")
    self.body.tag_configure("latexKeyword",foreground="blue",background="white")
    
# Tags for wiki coloring.
if self.showInvisibles:
    self.body.tag_configure("elide",background="yellow")
else:
    self.body.tag_configure("elide",elide="1")
self.body.tag_configure("bold",font=self.bold_font)
self.body.tag_configure("italic",font=self.italic_font)
self.body.tag_configure("bolditalic",font=self.bolditalic_font)
for name in self.color_tags_list:
    self.body.tag_configure(name,foreground=name)
</t>
<t tx="ekr.20031218072017.1624">def createFrame (fileName):
    
    """Create a LeoFrame during Leo's startup process."""
    
    import leoGlobals as g

    # Try to create a frame for the file.
    if fileName:
        if g.os_path_exists(fileName):
            ok, frame = g.openWithFileName(fileName,None)
            if ok:
                return frame.c,frame

    # Create a _new_ frame &amp; indicate it is the startup window.
    c,frame = g.app.newLeoCommanderAndFrame(fileName=fileName)
    
    frame.setInitialWindowGeometry()
    frame.resizePanesToRatio(frame.ratio,frame.secondary_ratio)
    
    frame.startupWindow = True
    # 3/2/05: Call the 'new' hook for compatibility with plugins.
    g.doHook("new",old_c=None,c=c,new_c=c)

    # Report the failure to open the file.
    if fileName:
        g.es("File not found: " + fileName)

    return c,frame</t>
<t tx="ekr.20031218072017.1625">def setInitialWindowGeometry(self):
    
    """Set the position and size of the frame to config params."""
    
    c = self.c
    
    h = c.config.getInt("initial_window_height") or 500
    w = c.config.getInt("initial_window_width") or 600
    x = c.config.getInt("initial_window_left") or 10
    y = c.config.getInt("initial_window_top") or 10
    
    if h and w and x and y:
        self.setTopGeometry(w,h,x,y)
</t>
<t tx="ekr.20031218072017.1934">def run(fileName=None,pymacs=None,*args,**keywords):
    
    """Initialize and run Leo"""
    
    __pychecker__ = '--no-argsused' # keywords not used.
    
    if not isValidPython(): return
    &lt;&lt; import leoGlobals and leoApp &gt;&gt;
    g.exe_dir = exe_dir
    g.computeStandardDirectories()
    
    if pymacs:
        script = windowFlag = False
    else:
        script, windowFlag = getBatchScript() # Do early so we can compute verbose next.
    
    verbose = script is None
    g.app.setLeoID(verbose=verbose) # Force the user to set g.app.leoID.
    
    &lt;&lt; import leoNodes and leoConfig &gt;&gt;
    
    
    
    
    
    g.app.nodeIndices = leoNodes.nodeIndices(g.app.leoID)
    g.app.config = leoConfig.configClass()
    
    fileName = completeFileName(fileName)
    reportDirectories(verbose)
    
    
    
    # Read settings *after* setting g.app.config.
    # Read settings *before* opening plugins.  This means if-gui has effect only in per-file settings.
    g.app.config.readSettingsFiles(fileName,verbose)
    
    #
    
    g.app.setEncoding()
    
    
    
    
    if pymacs:
        createNullGuiWithScript(None)
    elif script:
        if windowFlag:
            g.app.createTkGui() # Creates global windows.
            g.app.gui.setScript(script)
            sys.args = []
        else:
            createNullGuiWithScript(script)
        fileName = None
    
    # Load plugins. Plugins may create g.app.gui.
    g.doHook("start1")
    
    if g.app.killed: return # Support for g.app.forceShutdown.
    
    # Create the default gui if needed.
    if g.app.gui == None:
        g.app.createTkGui() # Creates global windows.
        
    
    
    # Initialize tracing and statistics.
    g.init_sherlock(args)
    &lt;&lt; start psycho &gt;&gt;
    
    # New in 4.3: clear g.app.initing _before_ creating the frame.
    g.app.initing = False # "idle" hooks may now call g.app.forceShutdown.
    
    # Create the main frame.  Show it and all queued messages.
    c,frame = createFrame(fileName)
    if not frame: return
    
    g.app.trace_gc          = c.config.getBool('trace_gc')
    g.app.trace_gc_calls    = c.config.getBool('trace_gc_calls')
    g.app.trace_gc_verbose  = c.config.getBool('trace_gc_verbose')
    
    if g.app.disableSave:
        g.es("disabling save commands",color=g.theme['error'])
    
    g.app.writeWaitingLog()
    p = c.currentPosition()
    g.doHook("start2",c=c,p=p,v=p,fileName=fileName)
    
    if c.config.getBool('allow_idle_time_hook'):
        g.enableIdleTimeHook()
    
    if not fileName:
        c.redraw_now()
    
    c.bodyWantsFocus()
    
    g.app.gui.runMainLoop()
</t>
<t tx="ekr.20031218072017.1936">def isValidPython():

    message = """\
Leo requires Python 2.2.1 or higher.
You may download Python from http://python.org/download/
"""
    try:
        # This will fail if True/False are not defined.
        import leoGlobals as g
    except ImportError:
        print "isValidPython: can not import leoGlobals"
        return 0
    except:
        print "isValidPytyhon: unexpected exception: import leoGlobals.py as g"
        import traceback ; traceback.print_exc()
        return 0
    try:
        version = '.'.join([str(sys.version_info[i]) for i in (0,1,2)])
        ok = g.CheckVersion(version,'2.2.1')
        if not ok:
            print message
            g.app.gui.runAskOkDialog(None,"Python version error",message=message,text="Exit")
        return ok
    except:
        print "isValidPython: unexpected exception: g.CheckVersion"
        import traceback ; traceback.print_exc()
        return 0</t>
<t tx="ekr.20031218072017.1937">def computeLoadDir():
    
    """Returns the directory containing leo.py."""
    
    import leoGlobals as g

    try:
        ### import leo
        import sys
        
        # Fix a hangnail: on Windows the drive letter returned by
        # __file__ is randomly upper or lower case!
        # The made for an ugly recent files list.
        path = g.__file__ # was leo.__file__
        if sys.platform=='win32':
            if len(path) &gt; 2 and path[1]==':':
                # Convert the drive name to upper case.
                path = path[0].upper() + path[1:]
        encoding = g.startupEncoding()
        path = g.os_path_abspath(path,encoding)
        if path:
            loadDir = g.os_path_dirname(path,encoding)
        else: loadDir = None
            
        if (
            not loadDir or
            not g.os_path_exists(loadDir,encoding) or
            not g.os_path_isdir(loadDir,encoding)
        ):
            loadDir = os.getcwd()
            print "Using emergency loadDir:",repr(loadDir)
        
        loadDir = g.os_path_abspath(loadDir,encoding)
        # g.es("load dir: %s" % (loadDir),color="blue")
        return loadDir
    except:
        print "Exception getting load directory"
        import traceback ; traceback.print_exc()
        return None
</t>
<t tx="ekr.20031218072017.1938">def createNullGuiWithScript (script):
    
    import leoGlobals as g
    import leoGui
    
    g.app.batchMode = True
    g.app.gui = leoGui.nullGui("nullGui")
    if not g.app.root:
        g.app.root = g.app.gui.createRootWindow()
    g.app.gui.finishCreate()
    g.app.gui.setScript(script)
</t>
<t tx="ekr.20031218072017.1939">def getBatchScript ():
    
    import leoGlobals as g
    windowFlag = False
    
    name = None ; i = 1 # Skip the dummy first arg.
    while i + 1 &lt; len(sys.argv):
        arg = sys.argv[i].strip().lower()
        if arg in ("--script","-script"):
            name = sys.argv[i+1].strip() ; break
        if arg in ("--script-window","-script-window"):
            name = sys.argv[i+1].strip() ; windowFlag = True ; break
        i += 1

    if not name:
        return None, windowFlag
    name = g.os_path_join(g.app.loadDir,name)
    try:
        f = None
        try:
            f = open(name,'r')
            script = f.read()
            # g.trace("script",script)
        except IOError:
            g.es_print("can not open script file: " + name, color=g.theme['error'])
            script = None
    finally:
        if f: f.close()
        return script, windowFlag
</t>
<t tx="ekr.20031218072017.2052">def openWithFileName(fileName,old_c,
    enableLog=True,readAtFileNodesFlag=True):
    
    """Create a Leo Frame for the indicated fileName if the file exists."""

    if not fileName or len(fileName) == 0:
        return False, None
        
    def munge(name):
        name = name or ''
        return g.os_path_normpath(name).lower()

    # Create a full, normalized, Unicode path name, preserving case.
    fileName = g.os_path_normpath(g.os_path_abspath(fileName))

    # If the file is already open just bring its window to the front.
    theList = app.windowList
    for frame in theList:
        if munge(fileName) == munge(frame.c.mFileName):
            frame.bringToFront()
            frame.c.setLog()
            return True, frame
    try:
        if old_c:
            # New in 4.4: We must read the file *twice*.
            # The first time sets settings for the later call to c.finishCreate.
            # g.trace('***** prereading',fileName)
            c2 = g.app.config.openSettingsFile(fileName)
            if c2: g.app.config.updateSettings(c2,localFlag=True)
        # Open the file in binary mode to allow 0x1a in bodies &amp; headlines.
        theFile = open(fileName,'rb')
        c,frame = app.newLeoCommanderAndFrame(fileName)
        frame.log.enable(enableLog)
        g.app.writeWaitingLog() # New in 4.3: write queued log first.
        c.beginUpdate()
        try:
            if not g.doHook("open1",old_c=old_c,c=c,new_c=c,fileName=fileName):
                c.setLog()
                app.lockLog()
                frame.c.fileCommands.open(
                    theFile,fileName,
                    readAtFileNodesFlag=readAtFileNodesFlag) # closes file.
                app.unlockLog()
                for frame in g.app.windowList:
                    # The recent files list has been updated by menu.updateRecentFiles.
                    frame.c.config.setRecentFiles(g.app.config.recentFiles)
            # Bug fix in 4.4.
            frame.openDirectory = g.os_path_abspath(g.os_path_dirname(fileName))
            g.doHook("open2",old_c=old_c,c=c,new_c=frame.c,fileName=fileName)
        finally:
            c.endUpdate()
            k = c.k
            k and k.setInputState(k.unboundKeyAction)
            if c.config.getBool('outline_pane_has_initial_focus'):
                c.treeWantsFocusNow()
            else:
                c.bodyWantsFocusNow()
        
        #g.color_gen_theme('#08090A','#e8e8FF',1.0) 
        c.qlink_scan()
                
        return True, frame
    except IOError:
        # Do not use string + here: it will fail for non-ascii strings!
        g.es("can not open: %s" % (fileName), color="blue")
        return False, None
    except Exception:
        g.es("exceptions opening: %s" % (fileName),color="red")
        g.es_exception()
        return False, None</t>
<t tx="ekr.20031218072017.2059">def init (self,c):

    # N.B.: separate c.ivars are much more convenient than a dict.
    for key in self.intKeys:
        # New in 4.3: get ivars from @settings.
        val = c.config.getBool(key)
        setattr(self,key,val)
        val = g.choose(val,1,0) # Work around major Tk problem.
        self.dict[key].set(val)
        # g.trace(key,val)

    &lt;&lt; set find/change widgets &gt;&gt;
    &lt;&lt; set radio buttons from ivars &gt;&gt;
</t>
<t tx="ekr.20031218072017.2060">self.find_ctrl.delete("1.0","end")
self.change_ctrl.delete("1.0","end")

# New in 4.3: Get setting from @settings.
for w,setting,defaultText in (
    (self.find_ctrl,"find_text",'&lt;find pattern here&gt;'),
    (self.change_ctrl,"change_text",''),
):
    s = c.config.getString(setting)
    if not s: s = defaultText
    w.insert("end",s)
</t>
<t tx="ekr.20031218072017.2061">found = False
for var,setting in (
    ("pattern_match","pattern-search"),
    ("script_search","script-search")):
    val = self.dict[var].get()
    if val:
        self.dict["radio-find-type"].set(setting)
        found = True ; break
if not found:
    self.dict["radio-find-type"].set("plain-search")
    
found = False
for var,setting in (
    ("suboutline_only","suboutline-only"),
    ("node_only","node-only"),
    # ("selection_only","selection-only"),
):
    val = self.dict[var].get()
    if val:
        self.dict["radio-search-scope"].set(setting)
        found = True ; break
if not found:
    self.dict["radio-search-scope"].set("entire-outline")
</t>
<t tx="ekr.20031218072017.2188">def newLeoCommanderAndFrame(self,fileName,updateRecentFiles=True):
    
    """Create a commander and its view frame for the Leo main window."""
    
    app = self
    
    import leoCommands
    
    if not fileName: fileName = ""
    &lt;&lt; compute the window title &gt;&gt;

    # Create an unfinished frame to pass to the commanders.
    frame = app.gui.createLeoFrame(title)
    
    # Create the commander and its subcommanders.
    c = leoCommands.Commands(frame,fileName)
    
    if not app.initing:
        g.doHook("before-create-leo-frame",c=c) # Was 'onCreate': too confusing.
        
    frame.finishCreate(c)
    c.finishCreate()
    
    
    
    # Finish initing the subcommanders.
    c.undoer.clearUndoState() # Menus must exist at this point.
    
    if updateRecentFiles:
        c.updateRecentFiles(fileName)
    
    if not g.app.initing:
        g.doHook("after-create-leo-frame",c=c)

    return c,frame
</t>
<t tx="ekr.20031218072017.2189"># Set the window title and fileName
if fileName:
    title = g.computeWindowTitle(fileName)
else:
    s = "untitled"
    n = g.app.numberOfWindows
    if n &gt; 0:
        s += str(n)
    title = g.computeWindowTitle(s)
    g.app.numberOfWindows = n+1
</t>
<t tx="ekr.20031218072017.2369">def skip_string(s,i,verbose=True):
    
    '''Scan forward to the end of a string.
    New in Leo 4.4.2 final: give error only if verbose is True'''
    
    j = i ; delim = s[i] ; i += 1
    assert(delim == '"' or delim == '\'')
    
    n = len(s)
    while i &lt; n and s[i] != delim:
        if s[i] == '\\' : i += 2
        else: i += 1

    if i &gt;= n:
        if verbose:
            g.scanError("Run on string: " + s[j:i])
    elif s[i] == delim:
        i += 1

    # g.trace(s[j:i])
    return i
</t>
<t tx="ekr.20031218072017.2406">@tabwidth -4
@pagewidth 80

@ This section contains all the source code of leo.py.

Leo's code uses the following conventions throughout:

c:  a commander
ch: a character
d:  a dialog or a dict.
g:  the leoGlobal module.
i, j, k: indices into a string
p:  a position.
s:  a string
t:  a tnode or a text widget.
u:  an undoer
v:  a vnode
z:  a local temp.</t>
<t tx="ekr.20031218072017.2582"></t>
<t tx="ekr.20031218072017.2604"></t>
<t tx="ekr.20031218072017.2606">@color

# __pychecker__ = '--no-argsused'

# See pycheckrc file in leoDist.leo for a list of erroneous warnings to be suppressed.

if 0: # Set to 1 for lint-like testing.
      # Use t23.bat: only on Python 2.3.

    try:
        import pychecker.checker
        # This works.  We may want to set options here...
        # from pychecker import Config 
        # print pychecker
        print ; print "Warning (in leo.py): pychecker.checker running..." ; print
    except:
        print ; print 'Can not import pychecker' ; print
</t>
<t tx="ekr.20031218072017.3189">def skip_matching_python_delims(s,i,delim1,delim2,reverse=False):
    
    '''Skip from the opening delim to the matching delim2.
    
    Return the index of the matching ')', or -1'''
    
    level = 0 ; n = len(s)
    assert(g.match(s,i,delim1))
    if reverse:
         while i &gt;= 0:
            ch = s[i]
            if ch == delim1:
                level += 1 ; i -= 1
            elif ch == delim2:
                level -= 1
                if level &lt;= 0:  return i
                i -= 1
            # Doesn't handle strings and comments properly...
            else: i -= 1
    else:
        while i &lt; n:
            progress = i
            ch = s[i]
            if ch == delim1:
                level += 1 ; i += 1
            elif ch == delim2:
                level -= 1
                if level &lt;= 0:  return i
                i += 1
            elif ch == '\'' or ch == '"': i = g.skip_string(s,i,verbose=False)
            elif g.match(s,i,'#'):  i = g.skip_to_end_of_line(s,i)
            else: i += 1
            if i == progress: return -1
    return -1
</t>
<t tx="ekr.20031218072017.3625">&lt;&lt; about gui classes and gui plugins &gt;&gt;
</t>
<t tx="ekr.20031218072017.3630">@language python
@tabwidth -4
@pagewidth 80

"""Leo's base compare class."""

import leoGlobals as g
import filecmp
import os
import string

@others
</t>
<t tx="ekr.20031218072017.3631">def choose(cond, a, b): # warning: evaluates all arguments

    if cond: return a
    else: return b
</t>
<t tx="ekr.20031218072017.3632">def go ():

    compare = leoCompare(
        commands = None,
        
        appendOutput = True,

        ignoreBlankLines = True,
        ignoreFirstLine1 = False,
        ignoreFirstLine2 = False,
        ignoreInteriorWhitespace = False,
        ignoreLeadingWhitespace = True,
        ignoreSentinelLines = False,
        
        limitCount = 9, # Zero means don't stop.
        limitToExtension = ".py",  # For directory compares.
        makeWhitespaceVisible = True,
        
        printBothMatches = False,
        printMatches = False,
        printMismatches = True,
        printTrailingMismatches = False,

        outputFileName = None)

    if 1: # Compare all files in Tangle test directories

        path1 = "c:\\prog\\test\\tangleTest\\"
        path2 = "c:\\prog\\test\\tangleTestCB\\"
        compare.compare_directories(path1,path2)

    else: # Compare two files.

        name1 = "c:\\prog\\test\\compare1.txt"
        name2 = "c:\\prog\\test\\compare2.txt"
        compare.compare_files(name1,name2)
</t>
<t tx="ekr.20031218072017.3633">class baseLeoCompare:
    """The base class for Leo's compare code."""
    @others
    
class leoCompare (baseLeoCompare):
    """A class containing Leo's compare code."""
    pass
</t>
<t tx="ekr.20031218072017.3634"># All these ivars are known to the leoComparePanel class.

def __init__ (self,

    # Keyword arguments are much convenient and more clear for scripts.
    commands = None,
    
    appendOutput = False,

    ignoreBlankLines = True,
    ignoreFirstLine1 = False,
    ignoreFirstLine2 = False,
    ignoreInteriorWhitespace = False,
    ignoreLeadingWhitespace = True,
    ignoreSentinelLines = False,

    limitCount = 0, # Zero means don't stop.
    limitToExtension = ".py",  # For directory compares.
    makeWhitespaceVisible = True,

    printBothMatches = False,
    printMatches = False,
    printMismatches = True,
    printTrailingMismatches = False,

    outputFileName = None ):
        
    __pychecker__ = 'maxargs=50'
        
    # It is more convenient for the leoComparePanel to set these directly.
    self.c = commands
    
    self.appendOutput = appendOutput

    self.ignoreBlankLines = ignoreBlankLines
    self.ignoreFirstLine1 = ignoreFirstLine1
    self.ignoreFirstLine2 = ignoreFirstLine2
    self.ignoreInteriorWhitespace = ignoreInteriorWhitespace
    self.ignoreLeadingWhitespace = ignoreLeadingWhitespace
    self.ignoreSentinelLines = ignoreSentinelLines

    self.limitCount = limitCount
    self.limitToExtension = limitToExtension
    
    self.makeWhitespaceVisible = makeWhitespaceVisible

    self.printBothMatches = printBothMatches
    self.printMatches = printMatches
    self.printMismatches = printMismatches
    self.printTrailingMismatches = printTrailingMismatches
    
    # For communication between methods...
    self.outputFileName = outputFileName
    self.fileName1 = None 
    self.fileName2 = None
    # Open files...
    self.outputFile = None
</t>
<t tx="ekr.20031218072017.3635"># We ignore the filename portion of path1 and path2 if it exists.

def compare_directories (self,path1,path2):
    
    # Ignore everything except the directory name.
    dir1 = g.os_path_dirname(path1)
    dir2 = g.os_path_dirname(path2)
    dir1 = g.os_path_normpath(dir1)
    dir2 = g.os_path_normpath(dir2)
    
    if dir1 == dir2:
        return self.show("Please pick distinct directories.")
    try:
        list1 = os.listdir(dir1)
    except:
        return self.show("invalid directory:" + dir1)
    try:
        list2 = os.listdir(dir2)
    except:
        return self.show("invalid directory:" + dir2)
        
    if self.outputFileName:
        self.openOutputFile()
    ok = self.outputFileName == None or self.outputFile
    if not ok: return None

    # Create files and files2, the lists of files to be compared.
    files1 = []
    files2 = []
    for f in list1:
        junk, ext = g.os_path_splitext(f)
        if self.limitToExtension:
            if ext == self.limitToExtension:
                files1.append(f)
        else:
            files1.append(f)
    for f in list2:
        junk, ext = g.os_path_splitext(f)
        if self.limitToExtension:
            if ext == self.limitToExtension:
                files2.append(f)
        else:
            files2.append(f)

    # Compare the files and set the yes, no and missing lists.
    yes = [] ; no = [] ; missing1 = [] ; missing2 = []
    for f1 in files1:
        head,f2 = g.os_path_split(f1)
        if f2 in files2:
            try:
                name1 = g.os_path_join(dir1,f1)
                name2 = g.os_path_join(dir2,f2)
                val = filecmp.cmp(name1,name2,0)
                if val: yes.append(f1)
                else:    no.append(f1)
            except:
                self.show("exception in filecmp.cmp")
                g.es_exception()
                missing1.append(f1)
        else:
            missing1.append(f1)
    for f2 in files2:
        head,f1 = g.os_path_split(f2)
        if f1 not in files1:
            missing2.append(f1)
    
    # Print the results.
    for kind, files in (
        ("----- matches --------",yes),
        ("----- mismatches -----",no),
        ("----- not found 1 ------",missing1),
        ("----- not found 2 ------",missing2),
    ):
        self.show(kind)
        for f in files:
            self.show(f)
    
    if self.outputFile:
        self.outputFile.close()
        self.outputFile = None

    return None # To keep pychecker happy.</t>
<t tx="ekr.20031218072017.3636">def compare_files (self, name1, name2):
    
    if name1 == name2:
        self.show("File names are identical.\nPlease pick distinct files.")
        return

    f1 = f2 = None
    try:
        f1 = self.doOpen(name1)
        f2 = self.doOpen(name2)
        if self.outputFileName:
            self.openOutputFile()
        ok = self.outputFileName == None or self.outputFile
        ok = g.choose(ok and ok != 0,1,0)
        if f1 and f2 and ok: # Don't compare if there is an error opening the output file.
            self.compare_open_files(f1,f2,name1,name2)
    except:
        self.show("exception comparing files")
        g.es_exception()
    try:
        if f1: f1.close()
        if f2: f2.close()
        if self.outputFile:
            self.outputFile.close() ; self.outputFile = None
    except:
        self.show("exception closing files")
        g.es_exception()
</t>
<t tx="ekr.20031218072017.3637">def compare_lines (self,s1,s2):
    
    if self.ignoreLeadingWhitespace:
        s1 = s1.lstrip()
        s2 = s2.lstrip()

    if self.ignoreInteriorWhitespace:
        k1 = g.skip_ws(s1,0)
        k2 = g.skip_ws(s2,0)
        ws1 = s1[:k1]
        ws2 = s2[:k2]
        tail1 = s1[k1:]
        tail2 = s2[k2:]
        tail1 = string.replace(tail1," ","")
        tail1 = string.replace(tail1,"\t","")
        tail2 = string.replace(tail2," ","")
        tail2 = string.replace(tail2,"\t","")
        s1 = ws1 + tail1
        s2 = ws2 + tail2

    return s1 == s2
</t>
<t tx="ekr.20031218072017.3638">def compare_open_files (self, f1, f2, name1, name2):

    # self.show("compare_open_files")
    lines1 = 0 ; lines2 = 0 ; mismatches = 0 ; printTrailing = True
    sentinelComment1 = sentinelComment2 = None
    if self.openOutputFile():
        self.show("1: " + name1)
        self.show("2: " + name2)
        self.show("")
    s1 = s2 = None
    &lt;&lt; handle opening lines &gt;&gt;
    while 1:
        if s1 == None:
            s1 = g.readlineForceUnixNewline(f1) ; lines1 += 1
        if s2 == None:
            s2 = g.readlineForceUnixNewline(f2) ; lines2 += 1
        &lt;&lt; ignore blank lines and/or sentinels &gt;&gt;
        n1 = len(s1) ; n2 = len(s2)
        if n1==0 and n2 != 0: self.show("1.eof***:")
        if n2==0 and n1 != 0: self.show("2.eof***:")
        if n1==0 or n2==0: break
        match = self.compare_lines(s1,s2)
        if not match: mismatches += 1
        &lt;&lt; print matches and/or mismatches &gt;&gt;
        &lt;&lt; warn if mismatch limit reached &gt;&gt;
        s1 = s2 = None # force a read of both lines.
    &lt;&lt; handle reporting after at least one eof is seen &gt;&gt;
</t>
<t tx="ekr.20031218072017.3639">if self.ignoreSentinelLines:
    
    s1 = g.readlineForceUnixNewline(f1) ; lines1 += 1
    s2 = g.readlineForceUnixNewline(f2) ; lines2 += 1
    # Note: isLeoHeader may return None.
    sentinelComment1 = self.isLeoHeader(s1)
    sentinelComment2 = self.isLeoHeader(s2)
    if not sentinelComment1: self.show("no @+leo line for " + name1)
    if not sentinelComment2: self.show("no @+leo line for " + name2)
        
if self.ignoreFirstLine1:
    if s1 == None:
        g.readlineForceUnixNewline(f1) ; lines1 += 1
    s1 = None

if self.ignoreFirstLine2:
    if s2 == None:
        g.readlineForceUnixNewline(f2) ; lines2 += 1
    s2 = None
</t>
<t tx="ekr.20031218072017.3640"># Completely empty strings denotes end-of-file.
if s1 and len(s1) &gt; 0:
    if self.ignoreBlankLines and len(string.strip(s1)) == 0:
        s1 = None ; continue
        
    if self.ignoreSentinelLines and sentinelComment1 and self.isSentinel(s1,sentinelComment1):
        s1 = None ; continue

if s2 and len(s2) &gt; 0:
    if self.ignoreBlankLines and len(string.strip(s2)) == 0:
        s2 = None ; continue

    if self.ignoreSentinelLines and sentinelComment2 and self.isSentinel(s2,sentinelComment2):
        s2 = None ; continue
</t>
<t tx="ekr.20031218072017.3641">if self.limitCount == 0 or mismatches &lt;= self.limitCount:

    if match and self.printMatches:
        
        if self.printBothMatches:
            self.dump(string.rjust("1." + str(lines1),6) + ' :',s1)
            self.dump(string.rjust("2." + str(lines2),6) + ' :',s2)
        else:
            self.dump(string.rjust(       str(lines1),6) + ' :',s1)
    
    if not match and self.printMismatches:
        
        self.dump(string.rjust("1." + str(lines1),6) + '*:',s1)
        self.dump(string.rjust("2." + str(lines2),6) + '*:',s2)
</t>
<t tx="ekr.20031218072017.3642">if self.limitCount &gt; 0 and mismatches &gt;= self.limitCount:
    
    if printTrailing:
        self.show("")
        self.show("limit count reached")
        self.show("")
        printTrailing = False
</t>
<t tx="ekr.20031218072017.3643">if n1 &gt; 0: 
    lines1 += self.dumpToEndOfFile("1.",f1,s1,lines1,printTrailing)
    
if n2 &gt; 0:
    lines2 += self.dumpToEndOfFile("2.",f2,s2,lines2,printTrailing)

self.show("")
self.show("lines1:" + str(lines1))
self.show("lines2:" + str(lines2))
self.show("mismatches:" + str(mismatches))
</t>
<t tx="ekr.20031218072017.3644">def filecmp (self,f1,f2):

    val = filecmp.cmp(f1,f2)
    if 1:
        if val: self.show("equal")
        else:   self.show("*** not equal")
    else:
        self.show("filecmp.cmp returns:")
        if val: self.show(str(val)+ " (equal)")
        else:   self.show(str(val) + " (not equal)")
    return val
</t>
<t tx="ekr.20031218072017.3645"></t>
<t tx="ekr.20031218072017.3646">def doOpen (self,name):

    try:
        f = open(name,'r')
        return f
    except:
        self.show("can not open:" + '"' + name + '"')
        return None
</t>
<t tx="ekr.20031218072017.3647">def dump (self,tag,s):

    compare = self ; out = tag

    for ch in s[:-1]: # don't print the newline
    
        if compare.makeWhitespaceVisible:
            if ch == '\t':
                out += "[" ; out += "t" ; out += "]"
            elif ch == ' ':
                out += "[" ; out += " " ; out += "]"
            else: out += ch
        else:
            if 1:
                out += ch
            else: # I don't know why I thought this was a good idea ;-)
                if ch == '\t' or ch == ' ':
                    out += ' '
                else:
                    out += ch

    self.show(out)
</t>
<t tx="ekr.20031218072017.3648">def dumpToEndOfFile (self,tag,f,s,line,printTrailing):

    trailingLines = 0
    while 1:
        if not s:
            s = g.readlineForceUnixNewline(f)
        if len(s) == 0: break
        trailingLines += 1
        if self.printTrailingMismatches and printTrailing:
            tag2 = string.rjust(tag + str(line),6) + "+:"
            self.dump(tag2,s)
        s = None

    self.show(tag + str(trailingLines) + " trailing lines")
    return trailingLines
</t>
<t tx="ekr.20031218072017.3649">@ These methods are based on atFile.scanHeader().  They are simpler because we only care about the starting sentinel comment: any line starting with the starting sentinel comment is presumed to be a sentinel line.
@c

def isLeoHeader (self,s):

    tag = "@+leo"
    j = string.find(s,tag)
    if j &gt; 0:
        i = g.skip_ws(s,0)
        if i &lt; j: return s[i:j]
        else: return None
    else: return None
        
def isSentinel (self,s,sentinelComment):

    i = g.skip_ws(s,0)
    return g.match(s,i,sentinelComment)
</t>
<t tx="ekr.20031218072017.3650">def show (self,s):
    
    # print s
    if self.outputFile:
        self.outputFile.write(s + '\n')
    elif self.c:
        g.es(s)
    else:
        print s
        print
</t>
<t tx="ekr.20031218072017.3651">def showIvars (self):
    
    self.show("fileName1:"        + str(self.fileName1))
    self.show("fileName2:"        + str(self.fileName2))
    self.show("outputFileName:"   + str(self.outputFileName))
    self.show("limitToExtension:" + str(self.limitToExtension))
    self.show("")

    self.show("ignoreBlankLines:"         + str(self.ignoreBlankLines))
    self.show("ignoreFirstLine1:"         + str(self.ignoreFirstLine1))
    self.show("ignoreFirstLine2:"         + str(self.ignoreFirstLine2))
    self.show("ignoreInteriorWhitespace:" + str(self.ignoreInteriorWhitespace))
    self.show("ignoreLeadingWhitespace:"  + str(self.ignoreLeadingWhitespace))
    self.show("ignoreSentinelLines:"      + str(self.ignoreSentinelLines))
    self.show("")
    
    self.show("limitCount:"              + str(self.limitCount))
    self.show("printMatches:"            + str(self.printMatches))
    self.show("printMismatches:"         + str(self.printMismatches))
    self.show("printTrailingMismatches:" + str(self.printTrailingMismatches))
</t>
<t tx="ekr.20031218072017.3821"></t>
<t tx="ekr.20031218072017.3838">"""Leo's base compare class."""

@language python
@tabwidth -4
@pagewidth 80

import leoGlobals as g
import leoCompare
import leoTkinterDialog
import Tkinter as Tk
import tkFileDialog

class leoTkinterComparePanel (leoCompare.leoCompare,leoTkinterDialog.leoTkinterDialog):
    
    """A class that creates Leo's compare panel."""

    @others
</t>
<t tx="ekr.20031218072017.3839"></t>
<t tx="ekr.20031218072017.3840">def __init__ (self,c):
    
    # Init the base class.
    leoCompare.leoCompare.__init__ (self,c)
    leoTkinterDialog.leoTkinterDialog.__init__(self,c,"Compare files and directories",resizeable=False)

    if g.app.unitTesting: return

    self.c = c

    &lt;&lt; init tkinter compare ivars &gt;&gt;
    
    # These ivars are set from Entry widgets.
    self.limitCount = 0
    self.limitToExtension = None
    
    # The default file name in the "output file name" browsers.
    self.defaultOutputFileName = "CompareResults.txt"
    
    self.createTopFrame()
    self.createFrame()
</t>
<t tx="ekr.20031218072017.3841"># Ivars pointing to Tk elements.
self.browseEntries = []
self.extensionEntry = None
self.countEntry = None
self.printButtons = []
    
# No corresponding ivar in the leoCompare class.
self.useOutputFileVar = Tk.IntVar()

# These all correspond to ivars in leoCompare
self.appendOutputVar             = Tk.IntVar()

self.ignoreBlankLinesVar         = Tk.IntVar()
self.ignoreFirstLine1Var         = Tk.IntVar()
self.ignoreFirstLine2Var         = Tk.IntVar()
self.ignoreInteriorWhitespaceVar = Tk.IntVar()
self.ignoreLeadingWhitespaceVar  = Tk.IntVar()
self.ignoreSentinelLinesVar      = Tk.IntVar()

self.limitToExtensionVar         = Tk.IntVar()
self.makeWhitespaceVisibleVar    = Tk.IntVar()

self.printBothMatchesVar         = Tk.IntVar()
self.printMatchesVar             = Tk.IntVar()
self.printMismatchesVar          = Tk.IntVar()
self.printTrailingMismatchesVar  = Tk.IntVar()
self.stopAfterMismatchVar        = Tk.IntVar()
</t>
<t tx="ekr.20031218072017.3842"># Initialize ivars from config parameters.

def finishCreate (self):
    
    c = self.c
    
    # File names.
    for i,option in (
        (0,"compare_file_1"),
        (1,"compare_file_2"),
        (2,"output_file") ):
            
        name = c.config.getString(option)
        if name and len(name) &gt; 0:
            e = self.browseEntries[i]
            e.delete(0,"end")
            e.insert(0,name)
            
    name = c.config.getString("output_file")
    b = g.choose(name and len(name) &gt; 0,1,0)
    self.useOutputFileVar.set(b)

    # File options.
    b = c.config.getBool("ignore_first_line_of_file_1")
    if b == None: b = 0
    self.ignoreFirstLine1Var.set(b)
    
    b = c.config.getBool("ignore_first_line_of_file_2")
    if b == None: b = 0
    self.ignoreFirstLine2Var.set(b)
    
    b = c.config.getBool("append_output_to_output_file")
    if b == None: b = 0
    self.appendOutputVar.set(b)

    ext = c.config.getString("limit_directory_search_extension")
    b = ext and len(ext) &gt; 0
    b = g.choose(b and b != 0,1,0)
    self.limitToExtensionVar.set(b)
    if b:
        e = self.extensionEntry
        e.delete(0,"end")
        e.insert(0,ext)
        
    # Print options.
    b = c.config.getBool("print_both_lines_for_matches")
    if b == None: b = 0
    self.printBothMatchesVar.set(b)
    
    b = c.config.getBool("print_matching_lines")
    if b == None: b = 0
    self.printMatchesVar.set(b)
    
    b = c.config.getBool("print_mismatching_lines")
    if b == None: b = 0
    self.printMismatchesVar.set(b)
    
    b = c.config.getBool("print_trailing_lines")
    if b == None: b = 0
    self.printTrailingMismatchesVar.set(b)
    
    n = c.config.getInt("limit_count")
    b = n and n &gt; 0
    b = g.choose(b and b != 0,1,0)
    self.stopAfterMismatchVar.set(b)
    if b:
        e = self.countEntry
        e.delete(0,"end")
        e.insert(0,str(n))

    # bool options...
    for option,var,default in (
        # Whitespace options.
        ("ignore_blank_lines",self.ignoreBlankLinesVar,1),
        ("ignore_interior_whitespace",self.ignoreInteriorWhitespaceVar,0),
        ("ignore_leading_whitespace",self.ignoreLeadingWhitespaceVar,0),
        ("ignore_sentinel_lines",self.ignoreSentinelLinesVar,0),
        ("make_whitespace_visible", self.makeWhitespaceVisibleVar,0),
    ):
        b = c.config.getBool(option)
        if b is None: b = default
        var.set(b)
    
    if 0: # old code
        b = c.config.getBool("ignore_blank_lines")
        if b == None: b = 1 # unusual default.
        self.ignoreBlankLinesVar.set(b)
        
        b = c.config.getBool("ignore_interior_whitespace")
        if b == None: b = 0
        self.ignoreInteriorWhitespaceVar.set(b)
        
        b = c.config.getBool("ignore_leading_whitespace")
        if b == None: b = 0
        self.ignoreLeadingWhitespaceVar.set(b)
        
        b = c.config.getBool("ignore_sentinel_lines")
        if b == None: b = 0
        self.ignoreSentinelLinesVar.set(b)
        
        b = c.config.getBool("make_whitespace_visible")
        if b == None: b = 0
        self.makeWhitespaceVisibleVar.set(b)
</t>
<t tx="ekr.20031218072017.3843">def createFrame (self):

    gui = g.app.gui ; top = self.top

    &lt;&lt; create the organizer frames &gt;&gt;
    &lt;&lt; create the browser rows &gt;&gt;
    &lt;&lt; create the extension row &gt;&gt;
    &lt;&lt; create the whitespace options frame &gt;&gt;
    &lt;&lt; create the print options frame &gt;&gt;
    &lt;&lt; create the compare buttons &gt;&gt;

    gui.center_dialog(top) # Do this _after_ building the dialog!
    self.finishCreate()
    top.protocol("WM_DELETE_WINDOW", self.onClose)
</t>
<t tx="ekr.20031218072017.3844">outer = Tk.Frame(self.frame, bd=2,relief="groove")
outer.pack(pady=4)

row1 = Tk.Frame(outer)
row1.pack(pady=4)

row2 = Tk.Frame(outer)
row2.pack(pady=4)

row3 = Tk.Frame(outer)
row3.pack(pady=4)

row4 = Tk.Frame(outer)
row4.pack(pady=4,expand=1,fill="x") # for left justification.

options = Tk.Frame(outer)
options.pack(pady=4)

ws = Tk.Frame(options)
ws.pack(side="left",padx=4)

pr = Tk.Frame(options)
pr.pack(side="right",padx=4)

lower = Tk.Frame(outer)
lower.pack(pady=6)
</t>
<t tx="ekr.20031218072017.3845">for row,text,text2,command,var in (
    (row1,"Compare path 1:","Ignore first line",self.onBrowse1,self.ignoreFirstLine1Var),
    (row2,"Compare path 2:","Ignore first line",self.onBrowse2,self.ignoreFirstLine2Var),
    (row3,"Output file:",   "Use output file",  self.onBrowse3,self.useOutputFileVar) ):

    lab = Tk.Label(row,anchor="e",text=text,width=13)
    lab.pack(side="left",padx=4)
    
    e = Tk.Entry(row)
    e.pack(side="left",padx=2)
    self.browseEntries.append(e)
    
    b = Tk.Button(row,text="browse...",command=command)
    b.pack(side="left",padx=6)

    b = Tk.Checkbutton(row,text=text2,anchor="w",variable=var,width=15)
    b.pack(side="left")
</t>
<t tx="ekr.20031218072017.3846">b = Tk.Checkbutton(row4,anchor="w",var=self.limitToExtensionVar,
    text="Limit directory compares to type:")
b.pack(side="left",padx=4)

self.extensionEntry = e = Tk.Entry(row4,width=6)
e.pack(side="left",padx=2)

b = Tk.Checkbutton(row4,anchor="w",var=self.appendOutputVar,
    text="Append output to output file")
b.pack(side="left",padx=4)
</t>
<t tx="ekr.20031218072017.3847">w,f = gui.create_labeled_frame(ws,caption="Whitespace options",relief="groove")
    
for text,var in (
    ("Ignore Leo sentinel lines", self.ignoreSentinelLinesVar),
    ("Ignore blank lines",        self.ignoreBlankLinesVar),
    ("Ignore leading whitespace", self.ignoreLeadingWhitespaceVar),
    ("Ignore interior whitespace",self.ignoreInteriorWhitespaceVar),
    ("Make whitespace visible",   self.makeWhitespaceVisibleVar) ):
    
    b = Tk.Checkbutton(f,text=text,variable=var)
    b.pack(side="top",anchor="w")
    
spacer = Tk.Frame(f)
spacer.pack(padx="1i")
</t>
<t tx="ekr.20031218072017.3848">w,f = gui.create_labeled_frame(pr,caption="Print options",relief="groove")

row = Tk.Frame(f)
row.pack(expand=1,fill="x")

b = Tk.Checkbutton(row,text="Stop after",variable=self.stopAfterMismatchVar)
b.pack(side="left",anchor="w")

self.countEntry = e = Tk.Entry(row,width=4)
e.pack(side="left",padx=2)
e.insert(01,"1")

lab = Tk.Label(row,text="mismatches")
lab.pack(side="left",padx=2)

for padx,text,var in (    
    (0,  "Print matched lines",           self.printMatchesVar),
    (20, "Show both matching lines",      self.printBothMatchesVar),
    (0,  "Print mismatched lines",        self.printMismatchesVar),
    (0,  "Print unmatched trailing lines",self.printTrailingMismatchesVar) ):
    
    b = Tk.Checkbutton(f,text=text,variable=var)
    b.pack(side="top",anchor="w",padx=padx)
    self.printButtons.append(b)
    
# To enable or disable the "Print both matching lines" button.
b = self.printButtons[0]
b.configure(command=self.onPrintMatchedLines)

spacer = Tk.Frame(f)
spacer.pack(padx="1i")
</t>
<t tx="ekr.20031218072017.3849">for text,command in (
    ("Compare files",      self.onCompareFiles),
    ("Compare directories",self.onCompareDirectories) ):
    
    b = Tk.Button(lower,text=text,command=command,width=18)
    b.pack(side="left",padx=6)
</t>
<t tx="ekr.20031218072017.3850">def setIvarsFromWidgets (self):

    # File paths: checks for valid file name.
    e = self.browseEntries[0]
    self.fileName1 = e.get()
    
    e = self.browseEntries[1]
    self.fileName2 = e.get()

    # Ignore first line settings.
    self.ignoreFirstLine1 = self.ignoreFirstLine1Var.get()
    self.ignoreFirstLine2 = self.ignoreFirstLine2Var.get()
    
    # Output file: checks for valid file name.
    if self.useOutputFileVar.get():
        e = self.browseEntries[2]
        name = e.get()
        if name != None and len(name) == 0:
            name = None
        self.outputFileName = name
    else:
        self.outputFileName = None

    # Extension settings.
    if self.limitToExtensionVar.get():
        self.limitToExtension = self.extensionEntry.get()
        if len(self.limitToExtension) == 0:
            self.limitToExtension = None
    else:
        self.limitToExtension = None
        
    self.appendOutput = self.appendOutputVar.get()
    
    # Whitespace options.
    self.ignoreBlankLines         = self.ignoreBlankLinesVar.get()
    self.ignoreInteriorWhitespace = self.ignoreInteriorWhitespaceVar.get()
    self.ignoreLeadingWhitespace  = self.ignoreLeadingWhitespaceVar.get()
    self.ignoreSentinelLines      = self.ignoreSentinelLinesVar.get()
    self.makeWhitespaceVisible    = self.makeWhitespaceVisibleVar.get()
    
    # Print options.
    self.printMatches            = self.printMatchesVar.get()
    self.printMismatches         = self.printMismatchesVar.get()
    self.printTrailingMismatches = self.printTrailingMismatchesVar.get()
    
    if self.printMatches:
        self.printBothMatches = self.printBothMatchesVar.get()
    else:
        self.printBothMatches = False
    
    if self.stopAfterMismatchVar.get():
        try:
            count = self.countEntry.get()
            self.limitCount = int(count)
        except: self.limitCount = 0
    else:
        self.limitCount = 0
</t>
<t tx="ekr.20031218072017.3851">def bringToFront(self):
    
    self.top.deiconify()
    self.top.lift()
</t>
<t tx="ekr.20031218072017.3852">def browser (self,n):
    
    types = [
        ("C/C++ files","*.c"),
        ("C/C++ files","*.cpp"),
        ("C/C++ files","*.h"),
        ("C/C++ files","*.hpp"),
        ("Java files","*.java"),
        ("Lua files", "*.lua"),
        ("Pascal files","*.pas"),
        ("Python files","*.py"),
        ("Text files","*.txt"),
        ("All files","*") ]

    fileName = tkFileDialog.askopenfilename(
        title="Choose compare file" + n,
        filetypes=types,
        defaultextension=".txt")
        
    if fileName and len(fileName) &gt; 0:
        # The dialog also warns about this, so this may never happen.
        if not g.os_path_exists(fileName):
            self.show("not found: " + fileName)
            fileName = None
    else: fileName = None
        
    return fileName
</t>
<t tx="ekr.20031218072017.3853"></t>
<t tx="ekr.20031218072017.3854">def onBrowse1 (self):
    
    fileName = self.browser("1")
    if fileName:
        e = self.browseEntries[0]
        e.delete(0,"end")
        e.insert(0,fileName)
    self.top.deiconify()
    
def onBrowse2 (self):
    
    fileName = self.browser("2")
    if fileName:
        e = self.browseEntries[1]
        e.delete(0,"end")
        e.insert(0,fileName)
    self.top.deiconify()
    
def onBrowse3 (self): # Get the name of the output file.

    fileName = tkFileDialog.asksaveasfilename(
        initialfile = self.defaultOutputFileName,
        title="Set output file",
        filetypes=[("Text files", "*.txt")],
        defaultextension=".txt")
        
    if fileName and len(fileName) &gt; 0:
        self.defaultOutputFileName = fileName
        self.useOutputFileVar.set(1) # The user will expect this.
        e = self.browseEntries[2]
        e.delete(0,"end")
        e.insert(0,fileName)
</t>
<t tx="ekr.20031218072017.3855">def onClose (self):
    
    self.top.withdraw()
</t>
<t tx="ekr.20031218072017.3856">def onCompareDirectories (self):

    self.setIvarsFromWidgets()
    self.compare_directories(self.fileName1,self.fileName2)

def onCompareFiles (self):

    self.setIvarsFromWidgets()
    self.compare_files(self.fileName1,self.fileName2)
</t>
<t tx="ekr.20031218072017.3857">def onPrintMatchedLines (self):
    
    v = self.printMatchesVar.get()
    b = self.printButtons[1]
    state = g.choose(v,"normal","disabled")
    b.configure(state=state)
</t>
<t tx="ekr.20031218072017.3897">@language python
@tabwidth -4
@pagewidth 80

import leoGlobals as g
import leoFind

import leoTkinterDialog
import Tkinter as Tk

@others
</t>
<t tx="ekr.20031218072017.3898"></t>
<t tx="ekr.20031218072017.3899">def __init__(self,c,resizeable=False,title=None,show=True):

    # g.trace("leoTkinterFind",c)
    
    # Init the base classes...
    leoFind.leoFind.__init__(self,c,title=title)
    leoTkinterDialog.leoTkinterDialog.__init__(self,c,self.title,resizeable,show=show)

    &lt;&lt; create the tkinter intVars &gt;&gt;
    
    # These are created later.
    self.find_ctrl = None
    self.change_ctrl = None 
    
    self.createTopFrame() # Create the outer tkinter dialog frame.
    self.createFrame()
    if self.top and not show:
        self.top.withdraw()
    self.init(c) # New in 4.3: init only once.
</t>
<t tx="ekr.20031218072017.3900">self.dict = {}

for key in self.intKeys:
    self.dict[key] = Tk.IntVar()

for key in self.newStringKeys:
    self.dict[key] = Tk.StringVar()
    
self.s_ctrl = Tk.Text() # Used by find.search()
</t>
<t tx="ekr.20031218072017.3901">def destroySelf (self):
    
    self.top.destroy()
</t>
<t tx="ekr.20031218072017.3902">def createFrame (self):
    
    # g.trace('legacy')

    # Create the find panel...
    outer = Tk.Frame(self.frame,relief="groove",bd=2)
    outer.pack(padx=2,pady=2)

    &lt;&lt; Create the Find and Change panes &gt;&gt;
    &lt;&lt; Create four columns of radio and checkboxes &gt;&gt;
    &lt;&lt; Create two rows of buttons &gt;&gt;

    if self.top: # self.top may not exist during unit testing.
        self.top.protocol("WM_DELETE_WINDOW", self.onCloseWindow)
</t>
<t tx="ekr.20031218072017.3903">columnsFrame = Tk.Frame(outer,relief="groove",bd=2)
columnsFrame.pack(anchor="e",expand=1,padx="7p",pady="2p") # Don't fill.

numberOfColumns = 4 # Number of columns
columns = [] ; radioLists = [] ; checkLists = []
for i in xrange(numberOfColumns):
    columns.append(Tk.Frame(columnsFrame,bd=1))
    radioLists.append([])
    checkLists.append([])

for i in xrange(numberOfColumns):
    columns[i].pack(side="left",padx="1p") # fill="y" Aligns to top. padx expands columns.
    
# HotKeys used for check/radio buttons:  a,b,c,e,h,i,l,m,n,o,p,r,s,t,w

radioLists[0] = [
    (self.dict["radio-find-type"],"P&amp;Lain Search","plain-search"),  
    (self.dict["radio-find-type"],"&amp;Pattern Match Search","pattern-search"),
    (self.dict["radio-find-type"],"&amp;Script Search","script-search")]
checkLists[0] = [
    ("Scrip&amp;t Change",self.dict["script_change"])]
checkLists[1] = [
    ("&amp;Whole Word",  self.dict["whole_word"]),
    ("&amp;Ignore Case", self.dict["ignore_case"]),
    ("Wrap &amp;Around", self.dict["wrap"]),
    ("&amp;Reverse",     self.dict["reverse"])]
radioLists[2] = [
    (self.dict["radio-search-scope"],"&amp;Entire Outline","entire-outline"),
    (self.dict["radio-search-scope"],"Suboutline &amp;Only","suboutline-only"),  
    (self.dict["radio-search-scope"],"&amp;Node Only","node-only"),
    # I don't know what selection-only is supposed to do.
    (self.dict["radio-search-scope"],"Selection Only",None)] #,"selection-only")]
checkLists[2] = []
checkLists[3] = [
    ("Search &amp;Headline Text", self.dict["search_headline"]),
    ("Search &amp;Body Text",     self.dict["search_body"]),
    ("&amp;Mark Finds",           self.dict["mark_finds"]),
    ("Mark &amp;Changes",         self.dict["mark_changes"])]

for i in xrange(numberOfColumns):
    for var,name,val in radioLists[i]:
        box = underlinedTkButton("radio",columns[i],anchor="w",text=name,variable=var,value=val)
        box.button.pack(fill="x")
        box.button.bind("&lt;1&gt;", self.resetWrap)
        if val == None: box.button.configure(state="disabled")
        box.bindHotKey(ftxt)
        box.bindHotKey(ctxt)
    for name,var in checkLists[i]:
        box = underlinedTkButton("check",columns[i],anchor="w",text=name,variable=var)
        box.button.pack(fill="x")
        box.button.bind("&lt;1&gt;", self.resetWrap)
        box.bindHotKey(ftxt)
        box.bindHotKey(ctxt)
        if var is None: box.button.configure(state="disabled")</t>
<t tx="ekr.20031218072017.3904">fc = Tk.Frame(outer, bd="1m")
fc.pack(anchor="n", fill="x", expand=1)

# Removed unused height/width params: using fractions causes problems in some locales!
fpane = Tk.Frame(fc, bd=1)
cpane = Tk.Frame(fc, bd=1)

fpane.pack(anchor="n", expand=1, fill="x")
cpane.pack(anchor="s", expand=1, fill="x")

# Create the labels and text fields...
flab = Tk.Label(fpane, width=8, text="Find:")
clab = Tk.Label(cpane, width=8, text="Change:")

# Use bigger boxes for scripts.
self.find_ctrl   = ftxt = Tk.Text(fpane,bd=1,relief="groove",height=4,width=20)
self.change_ctrl = ctxt = Tk.Text(cpane,bd=1,relief="groove",height=4,width=20)

&lt;&lt; Bind Tab and control-tab &gt;&gt;

fBar = Tk.Scrollbar(fpane,name='findBar')
cBar = Tk.Scrollbar(cpane,name='changeBar')

# Add scrollbars.
for bar,txt in ((fBar,ftxt),(cBar,ctxt)):
    txt['yscrollcommand'] = bar.set
    bar['command'] = txt.yview
    bar.pack(side="right", fill="y")

flab.pack(side="left")
clab.pack(side="left")
ctxt.pack(side="right", expand=1, fill="both")
ftxt.pack(side="right", expand=1, fill="both")
</t>
<t tx="ekr.20031218072017.3905"># Create the button panes
buttons  = Tk.Frame(outer,bd=1)
buttons2 = Tk.Frame(outer,bd=1)
buttons.pack (anchor="n",expand=1,fill="x")
buttons2.pack(anchor="n",expand=1,fill="x")

# In 4.4 it's dubious to define these keys.  For example, Alt-x must be reserved!
# HotKeys used for check/radio buttons:  a,b,c,e,h,i,l,m,n,o,p,r,s,t,w
# HotKeys used for plain buttons (enter),d,g,t

def findButtonCallback(event=None,self=self):
    self.findButton()
    return 'break'

# Create the first row of buttons
findButton=Tk.Button(buttons,
    width=9,text="Find",bd=4,command=findButtonCallback) # The default.

findButton.pack(pady="1p",padx="25p",side="left")

contextBox = underlinedTkButton("check",buttons,
    anchor="w",text="Show Conte&amp;xt",variable=self.dict["batch"])
contextBox.button.pack(pady="1p",side="left",expand=1)
contextBox.bindHotKey(ftxt)
contextBox.bindHotKey(ctxt)

findAllButton = underlinedTkButton("button",buttons,
    width=9,text="Fin&amp;d All",command=self.findAllButton)
findAllButton.button.pack(pady="1p",padx="25p",side="right",fill="x")
findAllButton.bindHotKey(ftxt)
findAllButton.bindHotKey(ctxt)

# Create the second row of buttons
changeButton = underlinedTkButton("button",buttons2,
    width=10,text="Chan&amp;Ge",command=self.changeButton)
changeButton.button.pack(pady="1p",padx="25p",side="left")
changeButton.bindHotKey(ftxt)
changeButton.bindHotKey(ctxt)

changeFindButton = underlinedTkButton("button",buttons2,
    text="Change, &amp;Then Find",command=self.changeThenFindButton)
changeFindButton.button.pack(pady="1p",side="left",expand=1)
changeFindButton.bindHotKey(ftxt)
changeFindButton.bindHotKey(ctxt)
    
changeAllButton = underlinedTkButton("button",buttons2,
    width=10,text="Change All",command=self.changeAllButton)
changeAllButton.button.pack(pady="1p",padx="25p",side="right")
changeAllButton.bindHotKey(ftxt)
changeAllButton.bindHotKey(ctxt)
</t>
<t tx="ekr.20031218072017.3906">def onCloseWindow(self,event=None):
    
    __pychecker__ = '--no-argsused' # the event param must be present.

    self.top.withdraw()
</t>
<t tx="ekr.20031218072017.3907">def bringToFront (self):
    
    """Bring the tkinter Find Panel to the front."""
    
    c = self.c ; t = self.find_ctrl ; gui = g.app.gui
            
    self.top.withdraw() # Helps bring the window to the front.
    self.top.deiconify()
    self.top.lift()

    c.widgetWantsFocusNow(t)
    gui.selectAllText(t)
</t>
<t tx="ekr.20031218072017.3908">def init_s_ctrl (self,s):
    t = self.s_ctrl
    t.delete("1.0","end")
    t.insert("end",s)
    t.mark_set("insert",g.choose(self.reverse,"end","1.0"))
    return t
</t>
<t tx="ekr.20031218072017.4099">"""Tkinter keystroke handling for Leo."""

@language python
@tabwidth -4
@pagewidth 80

import leoGlobals as g
</t>
<t tx="ekr.20040104162835.8"></t>
<t tx="ekr.20040104162835.13">Yes, fink does have pre-built Pythons, both 2.1 and 2.2.  (If you don't 
see them it probably means you don't have the right servers listed in 
your /sw/etc/apt/sources.list file.)  However, the versions of Python 
you'd get through fink are set up to run under X Windows, which I don't 
think is what you want.

I think what you want is MacPython which can run Tk programs like Leo 
under Aqua.  That's what I use these days.

I can tell from your question that you don't understand the following 
differences between the versions of Python available:

1) The version that comes with OS X is a text only one which doesn't 
have Tk.  Leo can't run under that.  Also, I hate Apple for including 
this instead of one that does have Tk and I hope they'll fix it some 
day.

2) You can get a version of Python from fink with has Tk but which runs 
under X Windows.  I don't think you want that.

3). You can also get MacPython which has Tk but it's a version of Tk 
that uses the Aqua windowing system, not X Windows.

So Tk can either be present or not and if it is present it can use 
either X Windows or Aqua.  You want it present and using Aqua, I think.


</t>
<t tx="ekr.20040104162835.14">&gt; 1. The python that FC installs is MacPython.  I think that because the
&gt; MacPython docs talk about Fink.

Nope.  The python installed by FC knows nothing about the Mac.  It 
thinks it's running on a Unix machine.  And it uses a version of Tk 
which thinks it's running on a Unix machine.  The window standard on 
Unix is called X (or X11 or XFree86, all the same thing).  So the main 
reason to run Leo this way would be to get an idea of how it works for 
Unix/Linux users.  But when programs run under X, they don't look like 
Mac programs.  They don't get all those glossy, translucent widgets 
that Aqua provides.  They really look like they would on a Unix/Linux 
machine.

Aqua is the native windowing system on Mac.  MacPython is set up to 
work with it.  Most Mac users will want Leo to work this way.  That's 
what I do.

&gt;
&gt;
&gt; I have the TkTclAquBI (Batteries included) installer.  Is installing 
&gt; this
&gt; enough to get Leo to work with Aqua?  Do I have to de-install the
&gt; present tk stuff that I installed with FC?

Yes, I think that's all I installed to get Tk to work under Aqua.  You 
don't have to deinstall the FC stuff.  All the FC stuff lives in its 
own world under /sw and runs under X.  It won't conflict with the Mac 
world.

</t>
<t tx="ekr.20040104162835.15">Double-clickable things (i.e. Macintosh applications) are usually 
actually folders with a name that ends in .app.  The file you found is 
probably executable only from the command line, not by double clicking 
it.  So I think if you run it from the command line it will work but 
will not know about Tk because Apple's version was built without Tk 
support.

You can also execute the .app programs from the command line by using 
the open command, so "open foo.app" will do the same thing as double 
clicking on foo in the finder (the .app extension is suppressed).  The 
idea behind this is that an application can look like just one opaque 
icon in the finder but actually have all its resources nicely organized 
in subfolders.
</t>
<t tx="ekr.20040206072057">csharp_keywords = [
    "abstract","as",
    "base","bool","break","byte",
    "case","catch","char","checked","class","const","continue",
    "decimal","default","delegate","do","double",
    "else","enum","event","explicit","extern",
    "false","finally","fixed","float","for","foreach",
    "get","goto",
    "if","implicit","in","int","interface","internal","is",
    "lock","long",
    "namespace","new","null",
    "object","operator","out","override",
    "params","partial","private","protected","public",
    "readonly","ref","return",
    "sbyte","sealed","set","short","sizeof","stackalloc",
    "static","string","struct","switch",
    "this","throw","true","try","typeof",
    "uint","ulong","unchecked","unsafe","ushort","using",
    "value","virtual","void","volatile",
    "where","while",
    "yield"]
</t>
<t tx="ekr.20040331145826">rapidq_keywords = [
# Syntax file for RapidQ
"$APPTYPE","$DEFINE","$ELSE","$ENDIF","$ESCAPECHARS","$IFDEF","$IFNDEF",
"$INCLUDE","$MACRO","$OPTIMIZE","$OPTION","$RESOURCE","$TYPECHECK","$UNDEF",
"ABS","ACOS","ALIAS","AND","AS","ASC","ASIN","ATAN","ATN","BIN$","BIND","BYTE",
"CALL","CALLBACK","CALLFUNC","CASE","CEIL","CHDIR","CHDRIVE","CHR$","CINT",
"CLNG","CLS","CODEPTR","COMMAND$","COMMANDCOUNT","CONSOLE","CONST","CONSTRUCTOR",
"CONVBASE$","COS","CREATE","CSRLIN","CURDIR$","DATA","DATE$","DEC","DECLARE",
"DEFBYTE","DEFDBL","DEFDWORD","DEFINT","DEFLNG","DEFSHORT","DEFSNG","DEFSTR",
"DEFWORD","DELETE$","DIM","DIR$","DIREXISTS","DO","DOEVENTS","DOUBLE","DWORD",
"ELSE","ELSEIF","END","ENVIRON","ENVIRON$","EVENT","EXIT","EXP","EXTENDS",
"EXTRACTRESOURCE","FIELD$","FILEEXISTS","FIX","FLOOR","FOR","FORMAT$","FRAC",
"FUNCTION","FUNCTIONI","GET$","GOSUB","GOTO","HEX$","IF","INC","INITARRAY",
"INKEY$","INP","INPUT","INPUT$","INPUTHANDLE","INSERT$","INSTR","INT","INTEGER",
"INV","IS","ISCONSOLE","KILL","KILLMESSAGE","LBOUND","LCASE$","LEFT$","LEN",
"LFLUSH","LIB","LIBRARYINST","LOCATE","LOG","LONG","LOOP","LPRINT","LTRIM$",
"MEMCMP","MESSAGEBOX","MESSAGEDLG","MID$","MKDIR","MOD","MOUSEX","MOUSEY",
"NEXT","NOT","OFF","ON","OR","OUT","OUTPUTHANDLE","PARAMSTR$","PARAMSTRCOUNT",
"PARAMVAL","PARAMVALCOUNT","PCOPY","PEEK","PLAYWAV","POKE","POS","POSTMESSAGE",
"PRINT","PROPERTY","QUICKSORT","RANDOMIZE","REDIM","RENAME","REPLACE$",
"REPLACESUBSTR$","RESOURCE","RESOURCECOUNT","RESTORE","RESULT","RETURN",
"REVERSE$","RGB","RIGHT$","RINSTR","RMDIR","RND","ROUND","RTRIM$","RUN",
"SCREEN","SELECT","SENDER","SENDMESSAGE","SETCONSOLETITLE","SGN","SHELL",
"SHL","SHORT","SHOWMESSAGE","SHR","SIN","SINGLE","SIZEOF","SLEEP","SOUND",
"SPACE$","SQR","STACK","STATIC","STEP","STR$","STRF$","STRING","STRING$",
"SUB","SUBI","SWAP","TALLY","TAN","THEN","TIME$","TIMER","TO","TYPE","UBOUND",
"UCASE$","UNLOADLIBRARY","UNTIL","VAL","VARIANT","VARPTR","VARPTR$","VARTYPE",
"WEND","WHILE","WITH","WORD","XOR"]
</t>
<t tx="ekr.20040401103539">css_keywords = [
#html tags
"address", "applet", "area", "a", "base", "basefont",
"big", "blockquote", "body", "br", "b", "caption", "center",
"cite", "code", "dd", "dfn", "dir", "div", "dl", "dt", "em", "font",
"form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "hr", "html", "img",
"input", "isindex", "i", "kbd", "link", "li", "link", "map", "menu",
"meta", "ol", "option", "param", "pre", "p", "samp",
"select", "small", "span", "strike", "strong", "style", "sub", "sup",
"table", "td", "textarea", "th", "title", "tr", "tt", "ul", "u", "var",
#units
"mm", "cm", "in", "pt", "pc", "em", "ex", "px",
#colors
"aqua", "black", "blue", "fuchsia", "gray", "green", "lime", "maroon", "navy", "olive", "purple", "red", "silver", "teal", "yellow", "white",
#important directive
"!important",
#font rules
"font", "font-family", "font-style", "font-variant", "font-weight", "font-size",
#font values
"cursive", "fantasy", "monospace", "normal", "italic", "oblique", "small-caps",
"bold", "bolder", "lighter", "medium", "larger", "smaller",
"serif", "sans-serif",
#background rules
"background", "background-color", "background-image", "background-repeat", "background-attachment", "background-position",
#background values
"contained", "none", "top", "center", "bottom", "left", "right", "scroll", "fixed",
"repeat", "repeat-x", "repeat-y", "no-repeat",
#text rules
"word-spacing", "letter-spacing", "text-decoration", "vertical-align", "text-transform", "text-align", "text-indent", "text-transform", "text-shadow", "unicode-bidi", "line-height",
#text values
"normal", "none", "underline", "overline", "blink", "sub", "super", "middle", "top", "text-top", "text-bottom",
"capitalize", "uppercase", "lowercase", "none", "left", "right", "center", "justify",
"line-through",
#box rules
"margin", "margin-top", "margin-bottom", "margin-left", "margin-right",
"margin", "padding-top", "padding-bottom", "padding-left", "padding-right",
"border", "border-width", "border-style", "border-top", "border-top-width", "border-top-style", "border-bottom", "border-bottom-width", "border-bottom-style", "border-left", "border-left-width", "border-left-style", "border-right", "border-right-width", "border-right-style", "border-color",
#box values
"width", "height", "float", "clear",
"auto", "thin", "medium", "thick", "left", "right", "none", "both",
"none", "dotted", "dashed", "solid", "double", "groove", "ridge", "inset", "outset",
#display rules
"display", "white-space", 
"min-width", "max-width", "min-height", "max-height",
"outline-color", "outline-style", "outline-width",
#display values
"run-in", "inline-block", "list-item", "block", "inline", "none", "normal", "pre", "nowrap", "table-cell", "table-row", "table-row-group", "table-header-group", "inline-table", "table-column", "table-column-group", "table-cell", "table-caption"
#list rules
"list-style", "list-style-type", "list-style-image", "list-style-position",
#list values
"disc", "circle", "square", "decimal", "decimal-leading-zero", "none",
"lower-roman", "upper-roman", "lower-alpha", "upper-alpha", "lower-latin", "upper-latin",
#table rules
"border-collapse", "caption-side",
#table-values
"empty-cells", "table-layout",
#misc values/rules
"counter-increment", "counter-reset",
"marker-offset", "z-index",
"cursor", "direction", "marks", "quotes",
"clip", "content", "orphans", "overflow", "visibility",
#aural rules
"pitch", "range", "pitch-during", "cue-after", "pause-after", "cue-before", "pause-before", "speak-header", "speak-numeral", "speak-punctuation", "speed-rate", "play-during", "voice-family",
#aural values
"stress", "azimuth", "elevation", "pitch", "richness", "volume",
"page-break", "page-after", "page-inside"]
</t>
<t tx="ekr.20040401111125">shell_keywords = [
    # reserved keywords
    "case","do","done","elif","else","esac","fi",
    "for","if","in","then",
    "until","while",
    "break","cd","chdir","continue","eval","exec",
    "exit","kill","newgrp","pwd","read","readonly",
    "return","shift","test","trap","ulimit",
    "umask","wait" ]
</t>
<t tx="ekr.20040411081633">if g.app and g.app.use_psyco:
    try:
        import psyco
        if 0:
            theFile = r"c:\prog\test\psycoLog.txt"
            g.es("psyco now logging to",theFile,color="blue")
            psyco.log(theFile)
            psyco.profile()
        psyco.full()
        g.es("psyco now running",color="blue")
    except ImportError:
        g.app.use_psyco = False
    except:
        print "unexpected exception importing psyco"
        g.es_exception()
        g.app.use_psyco = False
</t>
<t tx="ekr.20040629121554">def getBuildNumber(self):
    c = self
    return c.ver[10:-1] # Strip off "(dollar)Revision" and the trailing "$"
</t>
<t tx="ekr.20040629121554.1">def getSignOnLine (self):
    c = self
    return "LeoX 2020"
</t>
<t tx="ekr.20040629121554.2">def initVersion (self):
    c = self
    c.ver = "$Revision: 1.83 $" # CVS updates this.
</t>
<t tx="ekr.20040629121554.3">def signOnWithVersion (self):

    c = self
    color = g.theme['error']#c.config.getColor("log_error_color")
    signon = c.getSignOnLine()
    n1,n2,n3,junk,junk=sys.version_info
    tkLevel = c.frame.top.getvar("tk_patchLevel")
    
    if sys.platform.startswith('win'):
        version = 'Windows '
        try:
            v = os.sys.getwindowsversion()
            version += ', '.join([str(z) for z in v])
        except Exception:
            pass
            
    else: version = sys.platform
    
    g.es("Leo Log Window...",color=color)
    g.es(signon)
    g.es("Python %d.%d.%d, Tk %s\n%s" % (n1,n2,n3,tkLevel,version))
    g.enl()
</t>
<t tx="ekr.20041005105605.198">def directiveKind4(self,s,i):
    
    """Return the kind of at-directive or noDirective."""

    at = self
    n = len(s)
    if i &gt;= n or s[i] != '@':
        j = g.skip_ws(s,i)
        if g.match_word(s,j,"@others"):
            return at.othersDirective
        elif g.match_word(s,j,"@all"):
            return at.allDirective
        else:
            return at.noDirective

    table = (
        ("@all",at.allDirective),
        ("@c",at.cDirective),
        ("@code",at.codeDirective),
        ("@doc",at.docDirective),
        ("@end_raw",at.endRawDirective),
        ("@others",at.othersDirective),
        ("@raw",at.rawDirective))
        
    # Rewritten 6/8/2005.
    if i+1 &gt;= n or s[i+1] in (' ','\t','\n'):
        # Bare '@' not recognized in cweb mode.
        return g.choose(at.language=="cweb",at.noDirective,at.atDirective)
    if not s[i+1].isalpha():
        return at.noDirective # Bug fix: do NOT return miscDirective here!
    if at.language=="cweb" and g.match_word(s,i,'@c'):
        return at.noDirective
    
    for name,directive in table:
        if g.match_word(s,i,name):
            return directive

    # Return miscDirective only for real directives.
    for name in leoColor.leoKeywords:
        if g.match_word(s,i,name):
            return at.miscDirective

    return at.noDirective
</t>
<t tx="ekr.20041025152343">class underlinedTkButton:
    
    @others
</t>
<t tx="ekr.20041025152343.1">class leoTkinterFind (leoFind.leoFind,leoTkinterDialog.leoTkinterDialog):

    """A class that implements Leo's tkinter find dialog."""

    @others
</t>
<t tx="ekr.20041025152712">def __init__(self,buttonType,parent_widget,**keywords):

    self.buttonType = buttonType
    self.parent_widget = parent_widget
    self.hotKey = None
    text = keywords['text']

    &lt;&lt; set self.hotKey if '&amp;' is in the string &gt;&gt;

    # Create the button...
    if self.hotKey:
        keywords['text'] = text
        keywords['underline'] = index

    if buttonType.lower() == "button":
        self.button = Tk.Button(parent_widget,keywords)
    elif buttonType.lower() == "check":
        self.button = Tk.Checkbutton(parent_widget,keywords)
    elif buttonType.lower() == "radio":
        self.button = Tk.Radiobutton(parent_widget,keywords)
    else:
        g.trace("bad buttonType")
    
    self.text = text # for traces
</t>
<t tx="ekr.20041025152712.2">index = text.find('&amp;')

if index &gt; -1:

    if index == len(text)-1:
        # The word ends in an ampersand.  Ignore it; there is no hot key.
        text = text[:-1]
    else:
        self.hotKey = text [index + 1]
        text = text[:index] + text[index+1:]
</t>
<t tx="ekr.20041025152717"># The hot key has been hit.  Call the button's command.

def buttonCallback (self, event=None):

    # g.trace(self.text)
    self.button.invoke ()
    
    # See if this helps.
    return 'break'
</t>
<t tx="ekr.20041026080125">def bindHotKey (self,widget):
    
    if self.hotKey:
        for key in (self.hotKey.lower(),self.hotKey.upper()):
            widget.bind("&lt;Alt-%s&gt;" % key,self.buttonCallback)
</t>
<t tx="ekr.20041026092141">def setFocus(w):
    c = self.c
    c.widgetWantsFocus(w)
    g.app.gui.setSelectionRange(w,"1.0","1.0")
    return "break"
    
def toFind(event,w=ftxt): return setFocus(w)
def toChange(event,w=ctxt): return setFocus(w)

def insertTab(w):
    data = g.app.gui.getSelectionRange(w)
    if data: start,end = data
    else: start = end = g.app.gui.getInsertPoint(w)
    g.app.gui.replaceSelectionRangeWithText(w,start,end,"\t")
    return "break"

def insertFindTab(event,w=ftxt): return insertTab(w)
def insertChangeTab(event,w=ctxt): return insertTab(w)

ftxt.bind("&lt;Tab&gt;",toChange)
ctxt.bind("&lt;Tab&gt;",toFind)
ftxt.bind("&lt;Control-Tab&gt;",insertFindTab)
ctxt.bind("&lt;Control-Tab&gt;",insertChangeTab)
</t>
<t tx="ekr.20041107093834"># Default forth keywords: extended by leo-forthwords.txt.
forth_keywords = [
    "variable", "constant", "code", "end-code",
    "dup", "2dup", "swap", "2swap", "drop", "2drop",
    "r&gt;", "&gt;r", "2r&gt;", "2&gt;r",
    "if", "else", "then",
    "begin", "again", "until", "while", "repeat",
    "v-for", "v-next", "exit",
    "meta", "host", "target", "picasm", "macro",
    "needs", "include",
    "'", "[']",
    ":", ";",
    "@", "!", ",", "1+", "+", "-",
    "&lt;", "&lt;=", "=", "&gt;=", "&gt;",
    "invert", "and", "or", 
    ]

# Forth words which define other words: extended by leo-forthdefwords.txt.
forth_definingwords = [
    ":", "variable", "constant", "code",
    ]

# Forth words which start strings: extended by leo-forthstringwords.txt.
forth_stringwords = [
    's"', '."', '"', '."',
    'abort"',
    ]

# Forth words to be rendered in boldface: extended by leo-forthboldwords.txt.
forth_boldwords = [ ]

# Forth words to be rendered in italics: extended by leo-forthitalicwords.txt.
forth_italicwords = [ ]

# Forth bold-italics words: extemded leo-forthbolditalicwords.txt if present
# Note: on some boxen, bold italics may show in plain bold.
forth_bolditalicwords = [ ]
</t>
<t tx="ekr.20041117083857">def initSettingsFiles (self):
    
    """Set self.globalConfigFile, self.homeFile and self.myConfigFile."""
    
    settingsFile = 'leoSettings.leo'
    mySettingsFile = 'myLeoSettings.leo'
    
    for ivar,theDir,fileName in (
        ('globalConfigFile',    g.app.globalConfigDir,  settingsFile),
        ('homeFile',            g.app.homeDir,          settingsFile),
        ('myGlobalConfigFile',  g.app.globalConfigDir,  mySettingsFile),
        ('myHomeConfigFile',    g.app.homeDir,          mySettingsFile),
    ):
        # The same file may be assigned to multiple ivars:
        # readSettingsFiles checks for such duplications.
        path = g.os_path_join(theDir,fileName)
        if g.os_path_exists(path):
            setattr(self,ivar,path)
        else:
            setattr(self,ivar,None)
    if 0:
        g.trace('global file:',self.globalConfigFile)
        g.trace('home file:',self.homeFile)
        g.trace('myGlobal file:',self.myGlobalConfigFile)
        g.trace('myHome file:',self.myHomeConfigFile)</t>
<t tx="ekr.20041117151301">def computeHomeDir():
    
    """Returns the user's home directory."""
    
    import leoGlobals as g

    encoding = g.startupEncoding()
    # dotDir = g.os_path_abspath('./',encoding)
    home = os.getenv('HOME',default=None)

    if home and len(home) &gt; 1 and home[0]=='%' and home[-1]=='%':
        # Get the indirect reference to the true home.
        home = os.getenv(home[1:-1],default=None)

    if home:
        # N.B. This returns the _working_ directory if home is None!
        # This was the source of the 4.3 .leoID.txt problems.
        home = g.os_path_abspath(home,encoding)
        if (
            not g.os_path_exists(home,encoding) or
            not g.os_path_isdir(home,encoding)
        ):
            home = None

    # g.trace(home)
    return home
</t>
<t tx="ekr.20041117151301.1">def startupEncoding ():
    
    import leoGlobals as g
    import sys
    
    if sys.platform=="win32": # "mbcs" exists only on Windows.
        encoding = "mbcs"
    elif sys.platform=="dawwin":
        encoding = "utf-8"
    else:
        encoding = g.app.tkEncoding
        
    return encoding
</t>
<t tx="ekr.20041117155521">def computeGlobalConfigDir():
    
    # None of these suppresses warning about sys.leo_config_directory
    # __pychecker__ = '--no-objattrs --no-modulo1 --no-moddefvalue'
    
    import leoGlobals as g
    
    encoding = g.startupEncoding()

    try:
        theDir = sys.leo_config_directory
    except AttributeError:
        theDir = g.os_path_join(g.app.loadDir,"..","config")
        
    if theDir:
        theDir = g.os_path_abspath(theDir)
        
    if (
        not theDir or
        not g.os_path_exists(theDir,encoding) or
        not g.os_path_isdir(theDir,encoding)
    ):
        theDir = None
    
    return theDir
</t>
<t tx="ekr.20041120064303">def readSettingsFiles (self,fileName,verbose=True):
        
    seen = []
    self.write_recent_files_as_needed = False # Will be set later.
    &lt;&lt; define localDirectory, localConfigFile &amp; myLocalConfigFile &gt;&gt;

    # Init settings from leoSettings.leo and myLeoSettings.leo files.
    for path,localFlag in (
        (self.globalConfigFile,False),
        #(self.homeFile,False),
        #(localConfigFile,False),
        #(self.myGlobalConfigFile,False),
        #(self.myHomeConfigFile,False),
        #(myLocalConfigFile,False),
        #(fileName,True),
    ):
        if path and path.lower() not in seen:
            seen.append(path.lower())
            if verbose:
                g.es_print('reading settings in %s' % path)
            c = self.openSettingsFile(path)
            if c:
                self.updateSettings(c,localFlag)
                g.app.destroyWindow(c.frame)
                self.write_recent_files_as_needed = c.config.getBool('write_recent_files_as_needed')
    
    
    
    # Read all .leoRecentFiles.txt files.
    # The order of files in this list affects the order of the recent files list.
    seen = []
    localConfigPath = g.os_path_dirname(localConfigFile)
    for path in (
        g.app.homeDir,
        g.app.globalConfigDir,
        localConfigPath,
    ):
        if path and path not in seen:
            ok = self.readRecentFilesFile(path)
            if ok: seen.append(path)
    if not seen and self.write_recent_files_as_needed:
        self.createRecentFiles()

    self.inited = True
    self.setIvarsFromSettings(None)
</t>
<t tx="ekr.20041124083125">def completeFileName (fileName):
    
    import leoGlobals as g
    
    if not fileName:
        return None
        
    # This does not depend on config settings.
    fileName = g.os_path_join(os.getcwd(),fileName)

    head,ext = g.os_path_splitext(fileName)
    if not ext:
        fileName = fileName + ".leo"

    return fileName
</t>
<t tx="ekr.20041130093254">def reportDirectories(verbose):
    
    import leoGlobals as g
   
    if verbose:
        for kind,theDir in (
            ("global config",g.app.globalConfigDir),
            ("home",g.app.homeDir),
        ):
            g.es("%s dir: %s" % (kind,theDir),color="blue")
</t>
<t tx="ekr.20041201080436">def appendToRecentFiles (self,files):
    
    files = [theFile.strip() for theFile in files]
    
    # g.trace(files)
    
    def munge(name):
        name = name or ''
        return g.os_path_normpath(name).lower()
    
    for name in files:
        # Remove all variants of name.
        for name2 in self.recentFiles:
            if munge(name) == munge(name2):
                self.recentFiles.remove(name2)

        self.recentFiles.append(name)
</t>
<t tx="ekr.20041214135556">@nocolor
https://sourceforge.net/forum/message.php?msg_id=2882718
By: nobody

if anyone is interested here is some code that Tilefied my Leo instance, its
does some patching in the LeoGui program.

@color

def createRootWindow(self):

    """Create a hidden Tk root window."""
    #import Tix
    self.root = root = Tk.Tk()
    root.tk.call( 'package', 'require', 'tile' )
    #root.tk.call( 'namespace', 'import', '-force', 'ttk::*' )
    root.tk.call( 'namespace', 'import', '-force', 'ttk::scrollbar' )
    root.tk.call( 'namespace', 'import', '-force', 'ttk::label' )
    root.tk.call( 'namespace', 'import', '-force', 'ttk::entry' )
    root.tk.call( 'namespace', 'import', '-force', 'ttk::menu' )
    root.tk.call( 'namespace', 'import', '-force', 'ttk::button' )
    root.tk.call( 'namespace', 'import', '-force', 'ttk::frame' )
    root.tk.call( 'namespace', 'import', '-force', 'ttk::menubutton' )
    root.tk.call( 'tile::setTheme', 'clam' )
    #self.root = root = Tix.Tk()
    root.title("Leo Main Window")
    root.withdraw()
    
    self.setDefaultIcon()
    self.getDefaultConfigFont(g.app.config)
    self.createGlobalWindows()

    return root</t>
<t tx="ekr.20041219072112"># Import leoGlobals, but do NOT set g.
try:
    import leoGlobals
except ImportError:
    print "Error importing leoGlobals.py"

# Create the application object.
try:
    import leoApp
    leoGlobals.app = leoApp.LeoApp()
except ImportError:
    print "Error importing leoApp.py"
    
# NOW we can set g.
g = leoGlobals
assert(g.app)
</t>
<t tx="ekr.20041219072416.1">try:
    import leoNodes
except ImportError:
    print "Error importing leoNodes.py"
    import traceback ; traceback.print_exc()
try:
    import leoConfig
except ImportError:
    print "Error importing leoConfig.py"
    import traceback ; traceback.print_exc()
</t>
<t tx="ekr.20050123160215.1">print '-' * 20
d = []

for p in c.allNodes_iter():
    s = p.headString()
    if s.startswith('@thin'):
        d.append(s[5:].strip())
        
d.sort()

for s in d:
    print s
    

        
</t>
<t tx="ekr.20050123161408">0 leo.py
1 leoApp.py
2 leoAtFile.py
3 leoColor.py
4 leoCommands.py
5 leoCompare.py
6 leoConfig.py
7 leoFileCommands.py
8 leoFind.py
9 leoFrame.py
10 leoGlobals.py
11 leoGui.py
12 leoImport.py
13 leoKeys.py
14 leoMenu.py
15 leoNodes.py
16 leoPlugins.py
17 leoTangle.py
18 leoTkinterComparePanel.py
19 leoTkinterDialog.py
20 leoTkinterFind.py
21 leoTkinterFontPanel.py
22 leoTkinterFrame.py
23 leoTkinterGui.py
24 leoTkinterKeys.py
25 leoTkinterMenu.py
26 leoTkinterTree.py
27 leoUndo.py</t>
<t tx="ekr.20050204090259">def adjust_find_text(self,s):
    
    w = self.find_ctrl
    
    w.delete("1.0","end")
    w.insert("end",s)
</t>
<t tx="ekr.20050214055018"></t>
<t tx="ekr.20050214055018.4"></t>
<t tx="ekr.20050214055018.5"></t>
<t tx="ekr.20050221054932"> @killcolor
http://sourceforge.net/forum/message.php?msg_id=3007062
By: jgleeson

Sorry to take so long to reply.  I've been buried in work and haven't kept up
with some email.

Here's the link to the site where I posted the folder you have:
&lt;http://homepage.mac.com/jdgleeson/&gt;  It's the small file named "Leo.zip" (23
KB), not the large file "Leo-4.3-alpha-2.dmg" (20 MB).

I agree that I did not write very clear instructions, beginnng with the first
step, where I should have also said:  "It is important to use version 1.1.8
of py2app, which is only available through svn.  The version on the py2app website
is 1.1.7, which creates buggy Tkinter apps. If you try to use version 1.1.7,
the Leo app it creates will give you a message saying that Tkinter is not properly
installed.  Your installation is fine; otherwise you could not have even built
Leo.app with py2app, because py2app copies the essential parts of Tcl/Tk into
the application bundle to make the app completely standalone."

I haven't tried intalling the Fink subversion -- I'm using DarwinPorts
&lt;http://darwinports.opendarwin.org/&gt;.  But there's a simpler alternative than
DarwinPorts. Metissian releases OS X packages of Subversion clients
&lt;http://metissian.com/projects/macosx/subversion/&gt;

AFAIK, the command "python setup.py bdist_mpkg --open" only applies to the py2app
1.1.8 distribution.  By the way, bdist_mpkg is distributed with py2app. It creates
a package around the setup.py script (more specialized than Platypus).  I don't
have any experience with bdist_mpkg yet.

'Copy the leo folder into this directory' is horrible. I'm glad you figured
it out -- I'm not sure I could have.

"python setup.py py2app -a" should be run in the folder with the readme file,
which also contains the setup.py file that the command refers to.  Most importantly,
the folder in which this command is run must contain the leo folder -- which
it does only if you are brilliant enough to decode my instructions.   ;) 

HTH

-John</t>
<t tx="ekr.20050304072744"></t>
<t tx="ekr.20050306070535">@killcolor</t>
<t tx="ekr.20050306070535.3">http://sourceforge.net/forum/message.php?msg_id=1864564
By: btheado

WAS:RE: Leo 3.10 comments
edream wrote:

&gt;This is due to apparent glitches in the Tk event dispatching. The problem is
that pressing a control or alt or shift key _all by themselves_ will generate
keypress events that are passed on to Leo's key handlers

This should be easy to make simpler--just bind an empty script to &lt;Alt-KeyPress&gt;,
&lt;Shift-KeyPress&gt;, etc.  Tk chooses the most specific event it can find, so the
more general &lt;KeyPress&gt; handler will not fire.

On a broader note, when programming the text widget in Tcl/Tk, watching key
events is not the easiest way to detect changes in the text.  The only way the
text in a text widget can change is if either the delete or the insert subcommands
(methods) are called.  Any keypresses that end up changing text will have called
one of these subcommands.

So the simplest way to detect changes is to just intercept the calls to insert
and delete.  In Tcl/Tk intercepting these calls is pretty straightforward. 
I don't know if the same is true in Tkinter.

Also note the text widget in Tk8.4 (http://www.tcl.tk/man/tcl8.4/TkCmd/text.htm#M72)
has a built-in way of seeing if the text has changed

Brian Theado</t>
<t tx="ekr.20050316092232">- Unpack the .zip file, placing the result somewhere, say in c:\prog\jyleo-Jan-11-06

- Edit jleo.bat so it refers to jyleo-Jan-11-06.  For example:

rem open jyLeo
set ARGS= 
:loop 
if [%1] == [] goto end 
set ARGS=%ARGS% %1 
shift 
goto loop 
:end 

cd c:\prog\jyleo-Jan-11-06
java -jar c:\jython-2.2a1\jython.jar src\leo.py</t>
<t tx="ekr.20050317153447">@killcolor

http://sourceforge.net/forum/message.php?msg_id=3053534
By: paulpaterson

Very interesting indeed - great work! 
 
I didn't have Java/Jython installed so for others in the same boat here's what I had to do to get it work on my platform (Win2k). Some of this is in the README but I had to do some extra but I'm not sure why. 
 
1. Install 1.5 JDK  
http://java.sun.com/j2se/1.5.0/download.jsp 
 
2. Install Jython 
http://www.jython.org/jython22a1.zip 
 
3. Edit Jython.bat file - the part that calls Java.exe to ... 
"C:\Program Files\Java\jdk1.5.0_02\jre\bin\java" -cp "C:\Program Files\Java\jdk1.5.0_02\jre\lib";"c:\Apps\Python23\Jython";"C:\Apps\jLeo\j-leo-MAR15\Icons";"C:\Apps\jLeo\j-leo-MAR15\skins";"C:\Apps\jLeo\j-leo-MAR15\src";"C:\Apps\jLeo\j-leo-MAR15\skinimages" -Dpython.home="c:\Apps\Python23\Jython" -jar jython.jar %ARGS% 
 
Where  
- Java installed at C:\Program Files\Java\jdk1.5.0_02 
- Jython at c:\Apps\Python23\Jython 
- jLeo at C:\Apps\jLeo\j-leo-MAR15 
 
Change your paths as appropriate! There must be a better way to do this - Java confuses me! 
 
4. Edit leo.py in jleo/src directory to fix failure to find HOME env variable. 
 
line 241 becomes ... 
 
....try:home = os.getenv('HOME' )#,default=dotDir) 
....except KeyError:home="" 
 
 
Then, from the Jython install directory ... 
 
Jython " 
C:\Apps\jLeo\j-leo-MAR15\src\leo.py" 
 
Works a treat!  
 
Paul
</t>
<t tx="ekr.20050328133444">def computeStandardDirectories():
    
    '''Set g.app.loadDir, g.app.homeDir and g.app.globalConfigDir.'''
    
    if 0:
        import sys
        for s in sys.path: g.trace(s)
    
    g.app.loadDir = g.computeLoadDir() #g.exe_dir 
        # Depends on g.app.tkEncoding: uses utf-8 for now.
    
    #g.app.leoDir = g.computeLeoDir()
    g.computeLeoDir()
    
    g.app.homeDir = g.computeHomeDir()
    
    g.app.extensionsDir = g.os_path_abspath(
        g.os_path_join(g.app.loadDir,'..','extensions'))
    
    g.app.globalConfigDir = g.computeGlobalConfigDir()
    
    g.app.testDir = g.os_path_abspath(
        g.os_path_join(g.app.loadDir,'..','test'))
        
    g.app.user_xresources_path = g.os_path_join(g.app.homeDir,'.leo_xresources')
</t>
<t tx="ekr.20050424114937.1"></t>
<t tx="ekr.20050424114937.2">def writeRecentFilesFile (self,c):
    
    '''Write the appropriate .leoRecentFiles.txt file.'''
    
    tag = '.leoRecentFiles.txt'
    
    if g.app.unitTesting:
        return
    
    localFileName = c.fileName()
    if localFileName:
        localPath,junk = g.os_path_split(localFileName)
    else:
        localPath = None
        
    for path in (localPath,g.app.globalConfigDir,g.app.homeDir):
        if path:
            fileName = g.os_path_join(path,tag)
            if g.os_path_exists(fileName):
                print ('wrote %s' % fileName)
                self.writeRecentFilesFileHelper(fileName)
                return
    else:
        # g.trace('----- not found: %s' % g.os_path_join(localPath,tag))
        return
</t>
<t tx="ekr.20050424115658">def readRecentFilesFile (self,path):

    fileName = g.os_path_join(path,'.leoRecentFiles.txt')
    ok = g.os_path_exists(fileName)
    if ok:
    
        print ('reading %s' % fileName)
        lines = file(fileName).readlines()
        if lines and self.munge(lines[0])=='readonly':
            lines = lines[1:]
        if lines:
            lines = [g.toUnicode(g.os_path_normpath(line),'utf-8') for line in lines]
            self.appendToRecentFiles(lines)
            
    return ok</t>
<t tx="ekr.20050424131051">def writeRecentFilesFileHelper (self,fileName):
    # g.trace(fileName)
    
    # Don't update the file if it begins with read-only.
    theFile = None
    try:
        theFile = file(fileName)
        lines = theFile.readlines()
        if lines and self.munge(lines[0])=='readonly':
            # g.trace('read-only: %s' %fileName)
            return
    except IOError:
        # The user may have erased a file.  Not an error.
        if theFile: theFile.close()

    theFile = None
    try:
        # g.trace('writing',fileName)
        theFile = file(fileName,'w')
        if self.recentFiles:
            lines = [g.toEncodedString(line,'utf-8') for line in self.recentFiles]
            theFile.write('\n'.join(lines))
        else:
            theFile.write('\n')

    except IOError:
        # The user may have erased a file.  Not an error.
        pass
            
    except Exception:
        g.es('unexpected exception writing %s' % fileName,color='red')
        g.es_exception()
    
    if theFile:
        theFile.close()
</t>
<t tx="ekr.20050510071834">@killcolor

http://sourceforge.net/forum/message.php?msg_id=3137690
By: nobody

I dont know if anyone has solved this for regular Leo, but in the JyLeo JythonShell,
when the user executes a script with Pdb it:
1. dumps the script in a tmp file system's tmp directory.
2. Executes pdb based off of that tmp file.

that way you get all the goodness that pdb can offer.
</t>
<t tx="ekr.20050513164506">@killcolor

Jon Schull &lt;jschull@softlock.com&gt;  
Date:  2003/12/30 Tue PM 05:50:51 EST 
To:  edreamleo@charter.net 
Subject:  Leo, Mac OS X 10.3, and VPython 
             
I've been evaluating leo or vpython programming on  Mac OS X 10.3, and 
have some observations and a suggestion.

Observations:
- Leo runs under X11 as well as under OS X.
- My X11 python configuration was created using the recipe at XXX (which enables vpython).
- The OS X configuration is vanilla MacPython from MacPython.org, along with AquaTclTk batteries included XXX.

In both environments I can run leo under python leo.py and under idle.
Under OS X we get font smoothing, but we can't run visual python programs (python crashes;  this is a known incompatibility with  MacPython.)
    
- Under X11 we can run visual python programs like this one
    #box.py
    from visual import *
    box()
            
And we can even run them under leo (under X11). HOWEVER, when the visual python program is terminated, leo vanishes (leo and the vp program apparently run in the same space)
    
Under x11, we can keep leo alive by putting the vp program in its own space:
    
    os.popen3('/sw/bin/python /Users/jis/box.py')
    
However,  this doesn't let us see the output of stderr and stdout.  
Those text streams are available...
        
    def do(cmd='ls'):
        from os import popen3
        pIn,pOut,pErr=0,1,2
        popenResults=popen3(cmd)
        print popenResults[pOut].read()
        print popenResults[pErr].read()
    
    import os	
    do('/sw/bin/python /Users/jis/box.py')
        
...but only when the vpython program terminates.
    
Here's the good news:  if we execute our vp program with 
/sw/bin/idle.py rather than with python, we get to see the program 
output in real time (under idle, under X11).
    
    import os	
    os.chdir('/sw/lib/python2.3/idlelib')
    os.popen3('/sw/bin/python idle.py -r /Users/jis/box.py')
        
#this runs as an executed script in leo, and produces a live idle 
with real time ongoing output.
    
Now, while idle is running, leo sits in suspended animation.  But when 
the vpython program terminates, we are left in idle, and when idle is 
terminated, leo becomes active again.
    
It would be even better if leo were not suspended (using os.spawn, 
perhaps) but the real point is that I would really really like leo's 
"Execute script" command to execute code this way and spare me having 
to  hard-write the path to box.py.  It ought to be possible to 
eliminate os.chdir as well.

------------------
Jon Schull, Ph.D.
Associate Professor
Information Technology
Rochester Institute of Technology
schull@digitalgoods.com 585-738-6696</t>
<t tx="ekr.20050608103755">def test_directiveKind4 (self):
    
    at=c.atFileCommands # Self is a dummy argument.
    import leoColor
    table = [
        ('@=',0,at.noDirective),
        ('@',0,at.atDirective),
        ('@ ',0,at.atDirective),
        ('@\t',0,at.atDirective),
        ('@\n',0,at.atDirective),
        ('@all',0,at.allDirective),
        ('    @all',4,at.allDirective),
        ("@c",0,at.cDirective),
        ("@code",0,at.codeDirective),
        ("@doc",0,at.docDirective),
        ("@end_raw",0,at.endRawDirective),
        ('@others',0,at.othersDirective),
        ('    @others',4,at.othersDirective),
        ("@raw",0,at.rawDirective),
    ]
    for name in leoColor.leoKeywords:
        if name not in ('@','@all','@c','@code','@doc','@end_raw','@others','@raw',):
            table.append((name,0,at.miscDirective),)

    for s,i,expected in table:
        result = at.directiveKind4(s,i)
        assert result == expected, '%d %s result: %s expected: %s' % (
            i,repr(s),at.sentinelName(result),at.sentinelName(expected))
</t>
<t tx="ekr.20050618052621"></t>
<t tx="ekr.20050618052653">plsql_keywords = [
# reserved keywords
"abort",
"accept",
"access",
"add",
"admin",
"after",
"all",
"allocate",
"alter",
"analyze",
"and",
"any",
"archive",
"archivelog",
"array",
"arraylen",
"as",
"asc",
"assert",
"assign",
"at",
"audit",
"authorization",
"avg",
"backup",
"base_table",
"become",
"before",
"begin",
"between",
"binary_integer",
"block",
"body",
"boolean",
"by",
"cache",
"cancel",
"cascade",
"case",
"change",
"char",
"char_base",
"character",
"check",
"checkpoint",
"close",
"cluster",
"clusters",
"cobol",
"colauth",
"column",
"columns",
"comment",
"commit",
"compile",
"compress",
"connect",
"constant",
"constraint",
"constraints",
"contents",
"continue",
"controlfile",
"count",
"crash",
"create",
"current",
"currval",
"cursor",
"cycle",
"data_base",
"database",
"datafile",
"date",
"dba",
"debugoff",
"debugon",
"dec",
"decimal",
"declare",
"default",
"definition",
"delay",
"delete",
"delta",
"desc",
"digits",
"disable",
"dismount",
"dispose",
"distinct",
"distinct",
"do",
"double",
"drop",
"drop",
"dump",
"each",
"else",
"else",
"elsif",
"enable",
"end",
"end",
"entry",
"escape",
"events",
"except",
"exception",
"exception_init",
"exceptions",
"exclusive",
"exec",
"execute",
"exists",
"exists",
"exit",
"explain",
"extent",
"externally",
"false",
"fetch",
"fetch",
"file",
"float",
"float",
"flush",
"for",
"for",
"force",
"foreign",
"form",
"fortran",
"found",
"freelist",
"freelists",
"from",
"from",
"function",
"generic",
"go",
"goto",
"grant",
"group",
"groups",
"having",
"identified",
"if",
"immediate",
"in",
"including",
"increment",
"index",
"indexes",
"indicator",
"initial",
"initrans",
"insert",
"instance",
"int",
"integer",
"intersect",
"into",
"is",
"key",
"language",
"layer",
"level",
"like",
"limited",
"link",
"lists",
"lock",
"logfile",
"long",
"loop",
"manage",
"manual",
"max",
"maxdatafiles",
"maxextents",
"maxinstances",
"maxlogfiles",
"maxloghistory",
"maxlogmembers",
"maxtrans",
"maxvalue",
"min",
"minextents",
"minus",
"minvalue",
"mlslabel",
"mod",
"mode",
"modify",
"module",
"mount",
"natural",
"new",
"new",
"next",
"nextval",
"noarchivelog",
"noaudit",
"nocache",
"nocompress",
"nocycle",
"nomaxvalue",
"nominvalue",
"none",
"noorder",
"noresetlogs",
"normal",
"nosort",
"not",
"notfound",
"nowait",
"null",
"number",
"number_base",
"numeric",
"of",
"off",
"offline",
"old",
"on",
"online",
"only",
"open",
"open",
"optimal",
"option",
"or",
"order",
"others",
"out",
"own",
"package",
"package",
"parallel",
"partition",
"pctfree",
"pctincrease",
"pctused",
"plan",
"pli",
"positive",
"pragma",
"precision",
"primary",
"prior",
"private",
"private",
"privileges",
"procedure",
"procedure",
"profile",
"public",
"quota",
"raise",
"range",
"raw",
"read",
"real",
"record",
"recover",
"references",
"referencing",
"release",
"remr",
"rename",
"resetlogs",
"resource",
"restricted",
"return",
"reuse",
"reverse",
"revoke",
"role",
"roles",
"rollback",
"row",
"rowid",
"rowlabel",
"rownum",
"rows",
"rowtype",
"run",
"savepoint",
"schema",
"scn",
"section",
"segment",
"select",
"select",
"separate",
"sequence",
"session",
"set",
"set",
"share",
"shared",
"size",
"size",
"smallint",
"smallint",
"snapshot",
"some",
"sort",
"space",
"sql",
"sqlbuf",
"sqlcode",
"sqlerrm",
"sqlerror",
"sqlstate",
"start",
"start",
"statement",
"statement_id",
"statistics",
"stddev",
"stop",
"storage",
"subtype",
"successful",
"sum",
"sum",
"switch",
"synonym",
"sysdate",
"system",
"tabauth",
"table",
"tables",
"tables",
"tablespace",
"task",
"temporary",
"terminate",
"then",
"thread",
"time",
"to",
"tracing",
"transaction",
"trigger",
"triggers",
"true",
"truncate",
"type",
"uid",
"under",
"union",
"unique",
"unlimited",
"until",
"update",
"use",
"user",
"using",
"validate",
"values",
"varchar",
"varchar2",
"variance",
"view",
"views",
"when",
"whenever",
"where",
"while",
"with",
"work",
"write",
"xor" ]
</t>
<t tx="ekr.20050712092501.1">@killcolor

Buffer-menu-buffer-column
Buffer-menu-mode-map
Buffer-menu-popup-menu

Info-default-directory-list
Info-directory-list
Info-frame-plist

Installation-string
Mouse-track-gensym
X-default-timeout
__buffer-dedicated-frame
_history_

abbreviated-calendar-year
abbreviated-home-dir
abbrevs-changed

activate-menubar-hook
activate-popup-menu-hook
ad-default-compilation-action
ad-redefinition-action

adaptive-fill-function
adaptive-fill-mode
adaptive-fill-regexp

add-log-c-like-modes
add-log-lisp-like-modes
add-log-tex-like-modes

adjust-frame-function

all-christian-calendar-holidays
all-hebrew-calendar-holidays
all-islamic-calendar-holidays

allow-deletion-of-last-visible-frame
allow-remote-paths

american-calendar-display-form
american-date-diary-pattern
apache-file-patterns

appt-audible
appt-display-duration
appt-display-mode-line
appt-issue-message

atomic-extent-goto-char-p
autoload-file-name
backward-delete-function
backward-word-regexp
balloon-help-mode
bar-cursor

bdf-directory-list
bell-inhibit-time
bell-volume

binary-file-regexps
binary-process-input
binary-process-output

binhex-begin-line

blink-cursor-mode
blink-matching-delay
blink-matching-paren
blink-matching-paren-distance
blink-matching-paren-dont-ignore-comments
blink-matching-paren-on-screen
blink-paren-function

block-comment-end
block-comment-start
block-movement-size

bookmark-map

bq-at-flag
bq-at-marker
bq-backquote-marker
bq-backtick-marker
bq-comma-flag
bq-comma-marker
bq-dot-flag
bq-dot-marker

built-in-face-specifiers
built-in-glyph-specifiers
busy-pointer-glyph
c++-mode-syntax-table
c-mode-syntax-table

calc-autoload-directory
calc-gnuplot-name
calc-gnuplot-plot-command
calc-gnuplot-print-command
calc-info-filename

calendar-latitude
calendar-load-hook
calendar-location-name
calendar-longitude
calendar-offset
calendar-setup
calendar-time-display-form
calendar-week-start-day

call-count-profile-table
camldebug-command-name
case-fold-search
case-replace
cd-path
cdpath-previous
change-major-mode-hook
change-major-mode-with-file-name
character-set-property
christian-holidays

coding-keymap
coding-system-for-read
coding-system-for-write
colon-double-space
column-number-mode
column-number-start-at-one

complex-buffers-menu-p

continuation-glyph
continue-save-buffer-hooks-tail

control-arrow-glyph

create-console-hook
create-device-hook
create-frame-hook

ctl-arrow
ctl-x-4-map
ctl-x-5-map
ctl-x-map

current-display-table
current-load-list
current-menubar
current-minibuffer-contents
current-minibuffer-point
current-mouse-event
current-prefix-arg

cursor-in-echo-area

custom-background-mode
custom-define-hook
custom-face-attributes
custom-file
custom-file-base
custom-group-hash-table
custom-known-themes
custom-loaded-themes
custom-local-buffer
custom-print-functions

data-directory
data-directory-list


defining-kbd-macro
defun-prompt-regexp
degrees-to-radians

delete-auto-save-files
delete-console-hook
delete-device-hook
delete-dialog-box-hook
delete-exited-processes
delete-frame-hook
delete-key-deletes-forward
delete-old-versions

describe-function-show-arglist
deselect-frame-hook

dialog-frame-plist

diary-display-hook
diary-file
diary-hook
diary-include-string
diary-list-include-blanks
diary-nonmarking-symbol

diff-switches
dir

directory-abbrev-alist
directory-sep-char

dired-backup-if-overwrite
dired-chown-program
dired-compression-method
dired-compression-method-alist
dired-copy-preserve-time
dired-dwim-target
dired-find-file-compare-truenames
dired-find-subdir
dired-gnutar-program
dired-kept-versions
dired-listing-switches
dired-local-variables-file
dired-ls-program
dired-mail-reader
dired-no-confirm
dired-omit-files
dired-refresh-automatically
dired-unshar-program
dired-use-file-transformers
dired-use-ls-dired

disable-animated-pixmaps
disable-auto-save-when-buffer-shrinks
disabled-command-hook

display-buffer-function
display-time-day-and-date
display-warning-minimum-level
display-warning-suppressed-classes
display-warning-tick

divider-pointer-glyph
doc-directory
dont-record-current-mark

drag-divider-event-lag
drag-modeline-event-lag

dragdrop-autoload-tm-view
dragdrop-drop-at-point
dragdrop-drop-log
dragdrop-drop-log-buffer
dragdrop-drop-log-name
dragdrop-protocols

e

early-package-load-path
early-packages

easy-menu-all-popups
ecb-running-emacs-21
ecb-running-xemacs
echo-keystrokes

edebug-all-defs
edebug-all-forms

ediff-menu
ediff-merge-menu
ediff-misc-menu

edit-abbrevs-map
edit-tab-stops-buffer
edit-tab-stops-map

efs-auto-save
efs-auto-save-remotely
efs-path-root-regexp

eldoc-mode

emacs-beta-version
emacs-build-system
emacs-build-time
emacs-lisp-byte-compile-dir-interactive-p
emacs-lisp-mode-hook
emacs-lisp-mode-map
emacs-lisp-mode-menubar-menu
emacs-lisp-mode-popup-menu
emacs-lisp-mode-syntax-table
emacs-major-version
emacs-minor-version
emacs-patch-level
emacs-priority
emacs-program-name
emacs-program-version
emacs-roots
emacs-version

enable-local-eval
enable-local-variables
enable-multibyte-characters
enable-recursive-minibuffers

enter-window-hook
epatch-menu
erc-ctcp-query-DCC-hook
errors-deactivate-region
esc-map
eshell-directory-name
european-calendar-display-form
european-calendar-style
european-date-diary-pattern

eval-expr-error-message-delay
eval-expr-honor-debug-on-error
eval-expr-print-length
eval-expr-print-level
eval-expr-prompt
eval-interactive-verbose

exec-directory
exec-path
exec-suffix-list

executing-kbd-macro
executing-macro
experimental-dragdrop-drop-functions
face-frob-from-locale-first
facemenu-keymap
facemenu-menu
fast-lock-mode
features

file-coding-system
file-coding-system-alist
file-coding-system-for-read
file-name-coding-system
file-name-handler-alist
file-name-history
file-precious-flag

fill-column
fill-individual-varying-indent
fill-paragraph-function
fill-prefix

find-file-compare-truenames
find-file-existing-other-name
find-file-hooks
find-file-not-found-hooks
find-file-not-true-dirname-list
find-file-run-dired
find-file-use-truenames
find-file-visit-truename

first-change-hook
float-epsilon
float-negative-epsilon
float-output-format
flyspell-mode
flyspell-mode-line-string
flyspell-mode-map
focus-follows-mouse

folding-default-keys-function
folding-default-mouse-keys-function
folding-inside-mode-name
folding-mode
folding-mode-hook-no-regexp
folding-mode-marks-alist
folding-mode-string

font-lock-auto-fontify
font-lock-fontify-string-delimiters
font-lock-keywords
font-lock-maximum-decoration
font-lock-maximum-size
font-lock-mode
font-lock-mode-disable-list
font-lock-mode-enable-list
font-lock-mode-hook
font-lock-syntactic-keywords
font-lock-use-colors
font-lock-use-fonts
font-lock-use-maximal-decoration
font-menu-ignore-scaled-fonts
font-menu-this-frame-only-p

footnote-minor-mode-map
footnote-mode-line-string
footnote-mode-map
footnote-prefix

force-dialog-box-use
format-alist
fortran-tab-mode-default
forward-word-regexp

frame
frame-background-mode
frame-icon-glyph
frame-icon-title-format
frame-initial-frame
frame-initial-frame-plist
frame-initial-geometry-arguments
frame-title-format

function-history
function-key-map
fundamental-mode-abbrev-table
gc-cons-threshold
gc-message
gc-pointer-glyph
gdb-command-name
general-holidays
generated-modeline-string

get-frame-for-buffer-default-frame-name
get-frame-for-buffer-default-instance-limit
get-frame-for-buffer-default-to-current

gnats::mode-name

gnus-outlook-deuglify-unwrap-max
gnus-outlook-deuglify-unwrap-min
gnus-outlook-display-hook

gnuserv-frame
goal-column
grep-null-device
grep-regexp-alist
gui-button-shadow-thickness

hack-local-variables-hook
has-modeline-p
haskell-doc-mode
haskell-mode-hook

hebrew-diary-entry-symbol
hebrew-holidays
hebrew-holidays-1
hebrew-holidays-2
hebrew-holidays-3
hebrew-holidays-4

hide-ifdef-initially
hide-ifdef-lines
hide-ifdef-mode-map
hide-ifdef-read-only

hippie-expand-ignore-buffers
hippie-expand-max-buffers
hippie-expand-try-functions-list
hippie-expand-verbose

history
holidays-in-diary-buffer

hs-hide-comments-when-hiding-all
hs-special-modes-alist
hscroll-glyph
html-font-lock-keywords

hyper-apropos-apropos-buf
hyper-apropos-currently-showing
hyper-apropos-face-history
hyper-apropos-help-buf
hyper-apropos-help-history
hyper-apropos-help-map
hyper-apropos-junk-regexp
hyper-apropos-last-regexp
hyper-apropos-map
hyper-apropos-mode-hook
hyper-apropos-prettyprint-long-values
hyper-apropos-programming-apropos
hyper-apropos-regexp-history
hyper-apropos-show-brief-docs
hyper-apropos-shrink-window

hyperb:emacs19-p
hyperb:kotl-p
hyperb:microcruft-os-p
hyperb:mouse-buttons
hyperb:xemacs-p

hypropos-help-map
hypropos-map
hypropos-prettyprint-long-values
hypropos-programming-apropos
hypropos-show-brief-docs
hypropos-shrink-window

icon-name
iconification-data
idl-mode-syntax-table
ignored-local-variables
image-formats-alist
imenu-generic-expression
in-shifted-motion-command

indent-line-function
indent-region-function
indent-tabs-mode

inhibit-auto-save-session
inhibit-autoloads
inhibit-default-init
inhibit-early-packages
inhibit-file-name-handlers
inhibit-file-name-operation
inhibit-first-line-modes-regexps
inhibit-first-line-modes-suffixes
inhibit-help-echo
inhibit-input-event-recording
inhibit-quit
inhibit-read-only
inhibit-site-lisp
inhibit-site-modules
inhibit-startup-message
inhibit-warning-display

init-face-from-resources
init-file-debug
init-file-had-error
init-file-loaded
init-file-user
init-x-toolbar-list

initial-calendar-window-hook
initial-contents
initial-frame-alist
initial-frame-plist
initial-frame-unmapped-p
initial-major-mode
initial-minibuffer-history-position
initial-scratch-message
initial-toolbar-spec
initial-window-system

initialize-face-resources
insert-default-directory
insert-directory-program
insert-file-contents-access-hook
insert-file-contents-error-hook
insert-file-contents-post-hook
insert-file-contents-pre-hook
internal-doc-file-name
internal-error-checking
interpreter-mode-alist
interprogram-cut-function
interprogram-paste-function
invisible-text-glyph
invocation-directory
invocation-name
invocation-path

islamic-diary-entry-symbol
islamic-holidays
iso8859/1-case-table

ispell-dictionary-alist
ispell-dictionary-alist-1
ispell-dictionary-alist-2
ispell-dictionary-alist-3
ispell-dictionary-alist-4
ispell-dictionary-alist-5
ispell-dictionary-alist-6
ispell-html-skip-alists
ispell-local-dictionary-alist
ispell-menu-map
ispell-menu-map-needed
ispell-menu-xemacs
ispell-personal-dictionary
ispell-skip-region-alist
ispell-tex-skip-alists

itimer-edit-map
itimer-edit-start-marker
itimer-inside-driver
itimer-list
itimer-next-wakeup
itimer-process
itimer-short-interval
itimer-timer
itimer-timer-last-wakeup
itimer-version

java-mode-syntax-table
jde-version
jde-which-method-mode
kept-new-versions
kept-old-versions
key-translation-map
keyboard-coding-system
keyboard-translate-table
keyboard-type
keymap
keymap-tick

kill-buffer-hook
kill-buffer-query-functions
kill-emacs-hook
kill-emacs-query-functions
kill-hooks
kill-ring
kill-ring-max
kill-ring-yank-pointer
kill-whole-line

killed-rectangle
kimport:mode-alist
kimport:suffix-alist
last

last-abbrev
last-abbrev-location
last-abbrev-text
last-command
last-command-char
last-command-event
last-command-event-time
last-command-properties
last-error
last-exact-completion
last-help-echo-object
last-input-char
last-input-event
last-input-time
last-kbd-macro
last-package-load-path
last-packages
last-popup-menu-event
last-pressed-toolbar-button
last-undo-buffer

late-package-load-path
late-packages
lazy-lock-mode
lazy-shot-mode
least-negative-float
least-negative-normalized-float
least-positive-float
least-positive-normalized-float
leave-window-hook

ledit-go-to-lisp-string
ledit-go-to-liszt-string
ledit-save-files

lib-complete:cache
lib-complete:max-cache-size
line-move-ignore-invisible
line-number-mode

local-abbrev-table
local-holidays
local-write-file-hooks

log-message-filter-function
log-message-ignore-labels
log-message-ignore-regexps
log-message-max-size
log-warning-minimum-level
log-warning-suppressed-classes

lookup-syntax-properties
lost-selection-hooks
lpr-command
lpr-lp-system
lpr-switches
lpr-windows-system

major-mode
make-annotation-hook
make-backup-files
manual-program
map-frame-hook

mark-diary-entries-hook
mark-diary-entries-in-calendar
mark-holidays-in-calendar
mark-ring
mark-ring-max
mark-ring-unrecorded-commands

max-lisp-eval-depth
max-specpdl-size
mconfig

menu-accelerator-enabled
menu-accelerator-map
menu-accelerator-modifiers
menu-accelerator-prefix
menu-bar-bookmark-map
menu-no-selection-hook

menubar-configuration
menubar-pointer-glyph
menubar-show-keybindings

menubar-visible-p

meta-prefix-char
mh-lib
mh-libs
mh-progs

minimum-line-ascent
minimum-line-descent
minor-mode-alist
minor-mode-map-alist

modifier-keys-are-sticky
modifier-keys-sticky-time

module-directory
module-load-path

most-negative-fixnum
most-negative-float
most-positive-fixnum
most-positive-float
motion-keys-for-shifted-motion

mule-lisp-directory
native-sound-only-on-console
network-coding-system-alist
news-inews-program
news-path
next-line-add-newlines
next-screen-context-lines
nil
no-redraw-on-reenter
nongregorian-diary-listing-hook
nongregorian-diary-marking-hook
noninteractive
nontext-pointer-glyph
normal-auto-fill-function
nroff-electric-mode
nt-fake-unix-uid
null-device
number-of-diary-entries
obarray
objc-mode-syntax-table

occur-buffer
occur-mode-map
occur-nlines
occur-pos-list

oconfig
octal-escape-glyph
oframe
old-whitespace-incremental-mode-line-string
old-whitespace-mode-line-string
only-global-abbrevs
options-save-faces
oriental-holidays
other-holidays
other-window-scroll-buffer
outline-minor-mode
overlay-arrow-position
overlay-arrow-string

overriding-file-coding-system
overriding-local-map
overriding-terminal-local-map

overwrite-mode
overwrite-mode-binary
overwrite-mode-textual
owindow

page-delimiter

paragraph-ignore-fill-prefix
paragraph-separate
paragraph-start

paren-mode
parens-require-spaces
parse-sexp-ignore-comments
parse-sexp-lookup-properties
path-separator
pathname-coding-system

pending-delete-mode
pending-undo-list
permanent-buffers-mode
php-file-patterns
pi
pike-mode-syntax-table
pixel-horizontal-clip-threshold
pixel-vertical-clip-threshold
point-before-scroll

pop-up-frame-alist
pop-up-frame-function
pop-up-frame-plist
pop-up-frames
pop-up-windows

popup-menu-titles
post-command-hook
post-gc-hook
pre-abbrev-expand-hook
pre-command-hook
pre-display-buffer-function
pre-gc-hook
pre-idle-hook
predicate
prefix-arg
prefix-help-command
preloaded-file-list
primary-selection-extent

print-diary-entries-hook
print-escape-newlines
print-gensym
print-gensym-alist
print-length
print-level
print-message-label
print-readably
print-string-length

printer-current-device
printer-name
printer-page-footer
printer-page-header

process-coding-system-alist
process-connection-type
process-environment

progress-abort-glyph
progress-feedback-popup-period
progress-feedback-style
progress-feedback-use-echo-area
progress-gauge-instantiator
progress-glyph-height
progress-layout-glyph
progress-layout-instantiator
progress-stack
progress-text-instantiator

prompt
ps-multibyte-buffer
ps-page-dimensions-database
ps-paper-type
ps-print-color-p
purify-flag
put-buffer-names-in-file-menu
query-replace-help
query-replace-history
query-replace-interactive
query-replace-map
quit-flag
radians-to-degrees

read-command-history
read-expression-history
read-expression-map
read-file-name-map
read-file-name-must-match-map
read-shell-command-map

readp
redisplay-cache-adjustment
redisplay-end-trigger-functions

register-alist
remote-shell-program
remove-message-hook
replace-re-search-function
replace-search-function
require-final-newline
require-match
ret
retry-undefined-key-binding-unshifted
revert-buffer-function
revert-buffer-insert-file-contents-function
revert-buffer-internal-hook
revert-without-query

rmail-default-dont-reply-to-names
rmail-delete-after-output
rmail-dont-reply-to-names
rmail-file-name
rmail-ignored-headers
rmail-last-file
rmail-mail-new-frame
rmail-primary-inbox-list
rmail-retry-setup-hook
rmail-spool-directory

ruby-mode-hook
running-xemacs
same-window-buffer-names
same-window-regexps
save-abbrevs
save-options-file
save-options-init-file
save-some-buffers-query-display-buffer

scroll-conservatively
scroll-on-clipped-lines
scroll-step
scrollbar-height
scrollbar-on-left-p
scrollbar-on-top-p
scrollbar-pointer-glyph
scrollbar-width
scrollbars-visible-p

scsh-program-name

secondary-selection-extent
select-frame-hook
selected-text-type

selection-appender-alist
selection-buffer-killed-alist
selection-coercible-types
selection-coercion-alist
selection-converter-alist
selection-converter-in-alist
selection-converter-out-alist
selection-pointer-glyph
selection-sets-clipboard

selective-display
selective-display-ellipses

self-insert-face
self-insert-face-command
semanticdb-global-mode
send-mail-function
sendmail-program
sentence-end
sentence-end-double-space
sexp-diary-entry-symbol
shared-lisp-mode-map

shell-command-history
shell-command-switch
shell-dumb-shell-regexp
shell-file-name

shifted-motion-keys-select-region
signal-error-on-buffer-boundary

site-directory
site-load-package-file
site-load-packages
site-module-directory
site-start-file

skeleton-filter
solar-holidays
sound-alist

special-display-buffer-names
special-display-frame-alist
special-display-frame-plist
special-display-function
special-display-regexps

splash-frame-static-body
splash-frame-timeout

split-height-threshold
split-width-threshold
split-window-keep-point

stack-trace-on-error
stack-trace-on-signal
standard-indent
standard-input
standard-output
startup-message-timeout
startup-presentation-hack-keymap
status
strokes-mode
suppress-early-error-handler-backtrace
synchronize-minibuffers
synchronous-sounds
system-configuration
system-configuration-options
system-type
t

tab-stop-list
tab-width

table
tar-regexp

teach-extended-commands-p
teach-extended-commands-timeout

temp-buffer-max-height
temp-buffer-show-function
temp-buffer-show-hook
temp-buffer-shrink-to-fit

temporary-goal-column
term-file-prefix
term-setup-hook

terminal-coding-system
terminal-console
terminal-device
terminal-frame

texinfo-close-quote
texinfo-open-quote

text-cursor-visible-p
text-mode-abbrev-table
text-mode-hook
text-mode-map
text-mode-syntax-table
text-mode-variant
text-pointer-glyph

this-command
this-command-properties

three-step-help
today-invisible-calendar-hook
today-visible-calendar-hook
toggle-where-was-i

trace-buffer
track-eol

tramp-completion-file-name-regexp
tramp-completion-file-name-regexp-separate
tramp-completion-file-name-regexp-unified
tramp-file-name-regexp
tramp-file-name-regexp-separate
tramp-file-name-regexp-unified
tramp-unified-filenames

truncate-lines
truncate-partial-width-windows
truncation-glyph

tshell-prompt-pattern
tutorial-supported-languages
uncapitalized-title-word-regexp
uncapitalized-title-words
undo-high-threshold
undo-threshold
universal-argument-map
universal-argument-num-events
unmap-frame-hook
unread-command-event
unread-command-events
unshifted-motion-keys-deselect-region
use-dialog-box
use-hard-newlines
use-left-overflow
use-right-overflow

user-full-name
user-home-init-file-base-list
user-init-directory
user-init-directory-base
user-init-file
user-init-file-base
user-init-file-base-list
user-mail-address

v
values
variable-history
vc-annotate-mode-hook
vc-before-checkin-hook
vc-checkin-hook
vc-cvs-program
vc-log-template
vc-populate-vc-log-hook
version-control
version18p
version20p

view-calendar-holidays-initially
view-default-lines
view-diary-entries-initially
view-lossage-key-count
view-lossage-message-count
view-minor-mode
view-minor-mode-map
view-mode-map
view-search-arg
view-search-string
visible-bell
w3-configuration-directory
warning-count
warning-level-alist
warning-marker
widget-border-width

win32-pipe-read-delay
win32-quote-process-args
win32-start-process-share-console
win32-start-process-show-window

window
window-config-stack-max
window-min-height
window-min-width
window-pixel-scroll-increment
window-scroll-functions
window-setup-hook
window-size-change-functions
window-system

windowed-process-io
words-include-escapes

write-contents-hooks
write-file-data-hooks
write-file-hooks
write-region-annotate-functions
write-region-annotations-so-far
write-region-post-hook
write-region-pre-hook

x-busy-pointer-shape
x-gc-pointer-shape
x-library-search-path
x-mode-pointer-shape
x-nontext-pointer-shape
x-pointer-shape
x-selection-pointer-shape
x-toolbar-pointer-shape

xemacs-betaname
xemacs-codename
xemacs-logo
xemacs-praise-message
xemacs-praise-sound-file
xemacsp

xlib-version
xpm-color-symbols

xslt-process-additional-classpath
xslt-process-key-binding
xslt-process-mode
xslt-process-mode-line-string
xslt-process-mode-map

zenirc-command-queue
zenirc-last-command-queue-exec

zmacs-activate-region-hook
zmacs-deactivate-region-hook
zmacs-region-active-p
zmacs-region-extent
zmacs-region-rectangular-p
zmacs-region-stays
zmacs-regions
</t>
<t tx="ekr.20050712092501.2">bottom-gutter
bottom-gutter-border-width
bottom-gutter-height
bottom-gutter-visible-p

bottom-toolbar
bottom-toolbar-border-width
bottom-toolbar-height
bottom-toolbar-visible-p

gutter-buffers-tab
gutter-buffers-tab-enabled
gutter-buffers-tab-orientation
gutter-buffers-tab-visible-p
gutter-element-visibility-changed-hook

horizontal-scrollbar-visible-p

left-gutter
left-gutter-border-width
left-gutter-visible-p
left-gutter-width

left-margin
left-margin-width

left-toolbar
left-toolbar-border-width
left-toolbar-visible-p
left-toolbar-width

right-gutter
right-gutter-border-width
right-gutter-visible-p
right-gutter-width

right-margin-width

right-toolbar
right-toolbar-border-width
right-toolbar-visible-p
right-toolbar-width

top-gutter
top-gutter-border-width
top-gutter-height
top-gutter-visible-p

top-level

top-toolbar
top-toolbar-border-width
top-toolbar-height
top-toolbar-visible-p

vertical-divider-always-visible-p
vertical-divider-line-width
vertical-divider-map
vertical-divider-shadow-thickness
vertical-divider-spacing
vertical-scrollbar-visible-p</t>
<t tx="ekr.20050712092501.5"></t>
<t tx="ekr.20050712092501.6">*gensym-counter*
*random-state*</t>
<t tx="ekr.20050712092501.7">:
:accelerator
:activate-callback
:active
:active-opstring
:allow-multi-select
:allow-other-keys
:allow-pages
:allow-selection
:args
:author-version
:autoload-end
:autosize
:background
:background-pixmap
:bold
:border
:buttons
:callback
:callback-ex
:color
:color-symbols
:completion-string
:complex
:config
:cost
:count
:create-prompt-on-nonexistent
:dangerous
:data
:deletion
:description
:descriptor
:device
:dim
:duration
:enable
:end
:end1
:end2
:error
:extra-offset
:face
:face-reset-string
:face-set-string
:family
:file
:file-must-exist
:filter
:filter-list
:foreground
:format
:from-end
:full
:full-name
:get
:greedy
:group
:height
:help
:help-echo
:help-string
:horizontally-justify
:hotspot-x
:hotspot-y
:if
:if-not
:image
:immediate
:included
:initial-directory
:initial-filename
:initial-focus
:initial-value
:initialize
:inline
:interactive
:inverse-video
:italic
:items
:justify
:key
:key-sequence
:keys
:label
:link
:load
:margin-width
:mark
:mask-data
:mask-file
:match
:match-alternatives
:maybe
:menu-tag
:modal
:modifier-p
:must-match
:name
:nick
:no-network-button
:no-read-only-return
:opstring
:options
:orientation
:overwrite-prompt
:pageno
:parent
:password
:pitch
:pixel-height
:pixel-width
:port
:prefix
:printer-name
:printer-settings
:properties
:props
:question
:reader
:reference-buffer
:rehash-size
:rehash-threshold
:require
:resource-id
:resource-type
:selected
:selected-page-button
:server
:set
:set-after
:short-description
:size
:sound
:spec
:start
:start-time
:start1
:start2
:strikethru
:style
:suffix
:summarizer
:tag
:tags
:test
:test-not
:text
:title
:type
:underline
:user-data
:validate
:value
:variable-reset-string
:variable-set-string
:version
:vertically-justify
:volume
:weakness
:width
:window
:window-height
:window-width</t>
<t tx="ekr.20050712092501.8">abbrev-all-caps
abbrev-file-name
abbrev-mode
abbrev-start-location
abbrev-start-location-buffer
abbrev-table
abbrev-table-name-list</t>
<t tx="ekr.20050712092501.9">after-change-function
after-change-functions
after-delete-annotation-hook
after-find-file-from-revert-buffer
after-init-hook
after-insert-file-functions
after-load-alist
after-revert-hook
after-save-hook
after-set-visited-file-name-hooks</t>
<t tx="ekr.20050712092501.10">auto-fill-chars
auto-fill-function
auto-fill-inhibit-regexp
auto-gc-threshold
auto-lower-frame
auto-mode-alist
auto-raise-frame
auto-revert-mode
auto-save-default
auto-save-directory
auto-save-directory-fallback
auto-save-file-format
auto-save-hash-directory
auto-save-hash-p
auto-save-interval
auto-save-list-file-name
auto-save-list-file-prefix
auto-save-offer-delete
auto-save-reserved-chars
auto-save-timeout
auto-save-version
auto-save-visited-file-name
auto-show-inhibiting-commands
auto-show-mode
auto-show-shift-amount
auto-show-show-left-margin-threshold</t>
<t tx="ekr.20050712092501.11">backup-by-copying
backup-by-copying-when-linked
backup-by-copying-when-mismatch
backup-enable-predicate
backup-inhibited</t>
<t tx="ekr.20050712092501.12">bbdb-get-addresses-headers
bbdb-get-only-first-address-p
bbdb-sound-volume
bbdb-sounds-directory
bbdb-update-records-mode
bbdb/vm-set-auto-folder-alist-field</t>
<t tx="ekr.20050712092501.13">before-change-function
before-change-functions
before-delete-annotation-hook
before-init-deferred-warnings
before-init-hook
before-revert-hook</t>
<t tx="ekr.20050712092501.14">browse-url-browser-display
browse-url-browser-function
browse-url-galeon-program
browse-url-generic-program
browse-url-grail
browse-url-mozilla-program
browse-url-new-window-flag
browse-url-new-window-p
browse-url-save-file</t>
<t tx="ekr.20050712092501.15">buffer
buffer-auto-save-file-name
buffer-backed-up
buffer-file-coding-system
buffer-file-coding-system-for-read
buffer-file-format
buffer-file-name
buffer-file-number
buffer-file-numbers-unique
buffer-file-truename
buffer-history
buffer-invisibility-spec
buffer-list-changed-hook
buffer-offer-save
buffer-quit-function
buffer-read-only
buffer-saved-size
buffer-string
buffer-undo-list</t>
<t tx="ekr.20050712092501.16">buffers-menu-format-buffer-line-function
buffers-menu-grouping-function
buffers-menu-max-size
buffers-menu-omit-chars-list
buffers-menu-omit-function
buffers-menu-sort-function
buffers-menu-submenus-for-groups-p
buffers-menu-switch-to-buffer-function
buffers-tab-default-buffer-line-length
buffers-tab-face
buffers-tab-filter-functions
buffers-tab-format-buffer-line-function
buffers-tab-grouping-regexp
buffers-tab-max-buffer-line-length
buffers-tab-max-size
buffers-tab-omit-function
buffers-tab-selection-function
buffers-tab-sort-function
buffers-tab-switch-to-buffer-function</t>
<t tx="ekr.20050712092501.17">cl-builtin-clrhash
cl-builtin-gethash
cl-builtin-maphash
cl-builtin-remhash
cl-closure-vars
cl-compiling-file
cl-emacs-type
cl-hacked-flag
cl-macro-environment
cl-macroexpand-cmacs
cl-old-macroexpand
cl-optimize-safety
cl-optimize-speed
cl-proclaims-deferred
cl-struct-Print-context-tags</t>
<t tx="ekr.20050712092501.18">command-debug-status
command-history
command-line-args
command-line-args-left
command-line-default-directory
command-line-processed
command-loop-level
command-switch-alist</t>
<t tx="ekr.20050712092501.19">comment-column
comment-end
comment-indent-function
comment-indent-hook
comment-line-break-function
comment-multi-line
comment-start
comment-start-skip</t>
<t tx="ekr.20050712092501.20">compilation-buffer-name-function
compilation-finish-function
compilation-minor-mode
compilation-minor-mode-map
compilation-mode-hook
compilation-search-path
compilation-shell-minor-mode
compilation-shell-minor-mode-map
compilation-window-height</t>
<t tx="ekr.20050712092501.21">completion
completion-auto-help
completion-base-size
completion-default-help-string
completion-display-completion-list-function
completion-highlight-first-word-only
completion-ignore-case
completion-ignored-extensions
completion-list-mode-abbrev-table
completion-list-mode-map
completion-list-mode-syntax-table
completion-reference-buffer
completion-regexp-list
completion-setup-hook</t>
<t tx="ekr.20050712092501.22">configure-data-directory
configure-doc-directory
configure-exec-directory
configure-exec-prefix-directory
configure-info-directory
configure-info-path
configure-lisp-directory
configure-mail-lock-method
configure-module-directory
configure-mule-lisp-directory
configure-package-path
configure-prefix-directory
configure-site-directory
configure-site-module-directory</t>
<t tx="ekr.20050712092501.23">dabbrev--abbrev-char-regexp
dabbrev--check-other-buffers
dabbrev--eliminate-newlines
dabbrev--friend-buffer-list
dabbrev--last-abbrev-location
dabbrev--last-abbreviation
dabbrev--last-buffer
dabbrev--last-buffer-found
dabbrev--last-case-pattern
dabbrev--last-completion-buffer
dabbrev--last-direction
dabbrev--last-expansion
dabbrev--last-expansion-location
dabbrev--last-obarray
dabbrev--last-table
dabbrev-abbrev-char-regexp
dabbrev-abbrev-skip-leading-regexp
dabbrev-backward-only
dabbrev-case-distinction
dabbrev-case-fold-search
dabbrev-case-replace
dabbrev-check-all-buffers
dabbrev-check-other-buffers
dabbrev-friend-buffer-function
dabbrev-ignored-buffer-names
dabbrev-ignored-buffer-regexps
dabbrev-limit
dabbrev-search-these-buffers-only
dabbrev-select-buffers-function
dabbrev-upcase-means-case-search</t>
<t tx="ekr.20050712092501.24">isearch-adjusted
isearch-barrier
isearch-buffer
isearch-case-fold-search
isearch-cmds
isearch-extent
isearch-fixed-case
isearch-forward
isearch-hide-immediately
isearch-highlight
isearch-highlight-all-matches
isearch-highlight-extents
isearch-highlight-last-case-fold-search
isearch-highlight-last-regexp
isearch-highlight-last-string
isearch-invalid-regexp
isearch-just-started
isearch-message
isearch-mode
isearch-mode-end-hook
isearch-mode-hook
isearch-mode-map
isearch-new-forward
isearch-nonincremental
isearch-op-fun
isearch-opoint
isearch-other-end
isearch-recursive-edit
isearch-regexp
isearch-selected-frame
isearch-slow-terminal-mode
isearch-small-window
isearch-string
isearch-success
isearch-unhidden-extents
isearch-window-configuration
isearch-window-end
isearch-window-start
isearch-within-brackets
isearch-word
isearch-wrapped
isearch-yank-flag</t>
<t tx="ekr.20050712092501.25">lisp-body-indent
lisp-directory
lisp-imenu-generic-expression
lisp-indent-function
lisp-indent-offset
lisp-interaction-mode-map
lisp-interaction-mode-menubar-menu
lisp-interaction-mode-popup-menu
lisp-mode-abbrev-table
lisp-mode-map
lisp-mode-syntax-table</t>
<t tx="ekr.20050712092501.26">list-buffers-directory
list-buffers-header-line
list-buffers-identification
list-diary-entries-hook
list-directory-brief-switches
list-directory-verbose-switches
list-matching-lines-default-context-lines
list-matching-lines-whole-buffer
list-mode-extent
list-mode-extent-old-point
list-mode-hook
list-mode-map</t>
<t tx="ekr.20050712092501.27">mail-abbrev-mailrc-file
mail-alias-file
mail-aliases
mail-archive-file-name
mail-default-directory
mail-default-reply-to
mail-from-style
mail-header-separator
mail-host-address
mail-interactive
mail-lock-method
mail-lock-methods
mail-self-blind
mail-signature
mail-specify-envelope-from
mail-use-rfc822
mail-user-agent
mail-yank-ignored-headers
mail-yank-prefix</t>
<t tx="ekr.20050712092501.28">minibuffer-completion-confirm
minibuffer-completion-predicate
minibuffer-completion-table
minibuffer-confirm-incomplete
minibuffer-default
minibuffer-electric-file-name-behavior
minibuffer-exit-hook
minibuffer-frame-alist
minibuffer-frame-plist
minibuffer-help-form
minibuffer-history
minibuffer-history-minimum-string-length
minibuffer-history-position
minibuffer-history-search-history
minibuffer-history-sexp-flag
minibuffer-history-uniquify
minibuffer-history-variable
minibuffer-local-completion-map
minibuffer-local-isearch-map
minibuffer-local-map
minibuffer-local-must-match-map
minibuffer-max-depth
minibuffer-scroll-window
minibuffer-setup-hook
minibuffer-smart-completion-tracking-behavior</t>
<t tx="ekr.20050712092501.29">mode-compile-after-compile-hook
mode-compile-after-kill-hook
mode-compile-always-save-buffer-p
mode-compile-before-compile-hook
mode-compile-before-kill-hook
mode-compile-chosen-compiler
mode-compile-default-make-options
mode-compile-expert-p
mode-compile-ignore-makefile-backups
mode-compile-ignore-makerule-regexp
mode-compile-make-options
mode-compile-make-program
mode-compile-never-edit-command-p
mode-compile-other-frame-p
mode-compile-preferred-default-makerule
mode-compile-reading-time
mode-compile-save-all-p
mode-compile-version
mode-for-help
mode-line-buffer-identification
mode-line-format
mode-line-map
mode-line-menu
mode-line-modified
mode-line-process
mode-motion-extent
mode-motion-help-echo-string
mode-motion-hook
mode-name
mode-popup-menu
mode-specific-map</t>
<t tx="ekr.20050712092501.30">modeline-3d-p
modeline-buffer-id-extent
modeline-buffer-id-left-extent
modeline-buffer-id-left-map
modeline-buffer-id-right-extent
modeline-buffer-id-right-map
modeline-buffer-identification
modeline-click-swaps-buffers
modeline-format
modeline-map
modeline-menu
modeline-minor-mode-extent
modeline-minor-mode-map
modeline-modified
modeline-modified-extent
modeline-modified-map
modeline-mousable-minor-mode-extent
modeline-multibyte-status
modeline-narrowed-extent
modeline-narrowed-map
modeline-pointer-glyph
modeline-process
modeline-scrolling-method
modeline-shadow-thickness</t>
<t tx="ekr.20050712092501.31">mouse-avoidance-mode
mouse-avoidance-mode-line-string
mouse-enter-frame-hook
mouse-grabbed-buffer
mouse-highlight-priority
mouse-highlight-text
mouse-leave-frame-hook
mouse-motion-handler
mouse-track-activate-strokes
mouse-track-cleanup-hook
mouse-track-click-count
mouse-track-click-hook
mouse-track-down-hook
mouse-track-drag-hook
mouse-track-drag-up-hook
mouse-track-multi-click-time
mouse-track-rectangle-p
mouse-track-scroll-delay
mouse-track-timeout-id
mouse-track-up-hook
mouse-track-up-time
mouse-track-up-x
mouse-track-up-y
mouse-track-x-threshold
mouse-track-y-threshold
mouse-yank-at-point
mouse-yank-function</t>
<t tx="ekr.20050712092501.32">mswindows-alt-by-itself-activates-menu
mswindows-bitmap-file-path
mswindows-construct-process-command-line-alist
mswindows-downcase-file-names
mswindows-dynamic-frame-resize
mswindows-font-regexp
mswindows-get-true-file-attributes
mswindows-ls-round-file-size
mswindows-ls-sort-case-insensitive
mswindows-match-one-cmd-exe-token-regexp
mswindows-mouse-button-max-skew-x
mswindows-mouse-button-max-skew-y
mswindows-mouse-button-tolerance
mswindows-num-mouse-buttons
mswindows-post-win-initted
mswindows-pre-win-initted
mswindows-start-process-inherit-error-mode
mswindows-start-process-share-console
mswindows-system-shells
mswindows-use-system-frame-size-defaults
mswindows-win-initted</t>
<t tx="ekr.20050712092501.33">package-get-base
package-get-download-sites

packages-data-path-depth
packages-hardcoded-lisp
packages-hierarchy-depth
packages-load-path-depth
packages-no-package-hierarchy-regexp
packages-package-list
packages-special-base-regexp
packages-unbytecompiled-lisp
packages-useful-lisp</t>
<t tx="ekr.20050712092501.34">regexp-history
regexp-search-ring
regexp-search-ring-max
regexp-search-ring-yank-pointer

search-caps-disable-folding
search-dialog
search-dialog-direction
search-dialog-regexp
search-exit-option
search-highlight
search-invisible
search-nonincremental-instead
search-ring
search-ring-max
search-ring-update
search-ring-yank-pointer
search-slow-speed
search-slow-window-lines
search-whitespace-regexp</t>
<t tx="ekr.20050712092501.35">toolbar-active
toolbar-blank-press-function
toolbar-buttons-captioned-p
toolbar-captioned-p
toolbar-compile-icon
toolbar-copy-function
toolbar-copy-icon
toolbar-cut-function
toolbar-cut-icon
toolbar-debug-icon
toolbar-dired-function
toolbar-disk-icon
toolbar-file-icon
toolbar-folder-icon
toolbar-help-enabled
toolbar-icon-directory
toolbar-info-frame
toolbar-info-frame-plist
toolbar-info-icon
toolbar-info-use-separate-frame
toolbar-ispell-function
toolbar-last-win-icon
toolbar-mail-commands-alist
toolbar-mail-icon
toolbar-mail-reader
toolbar-map
toolbar-news-commands-alist
toolbar-news-frame
toolbar-news-frame-plist
toolbar-news-frame-properties
toolbar-news-icon
toolbar-news-reader
toolbar-news-use-separate-frame
toolbar-next-win-icon
toolbar-open-function
toolbar-paste-function
toolbar-paste-icon
toolbar-pointer-glyph
toolbar-print-function
toolbar-printer-icon
toolbar-replace-function
toolbar-replace-icon
toolbar-save-function
toolbar-spell-icon
toolbar-undo-function
toolbar-undo-icon
toolbar-vector-compile
toolbar-vector-copy
toolbar-vector-cut
toolbar-vector-debug
toolbar-vector-dired
toolbar-vector-info
toolbar-vector-mail
toolbar-vector-news
toolbar-vector-open
toolbar-vector-paste
toolbar-vector-print
toolbar-vector-replace
toolbar-vector-save
toolbar-vector-spell
toolbar-vector-undo
toolbar-visible-p</t>
<t tx="ekr.20050712094115">debug-ignored-errors
debug-mswindows-process-command-lines
debug-on-error
debug-on-next-call
debug-on-quit
debug-on-signal
debug-paths
debugger</t>
<t tx="ekr.20050712094115.1">default
default-abbrev-mode
default-buffer-file-coding-system
default-case-fold-search
default-ctl-arrow
default-custom-frame-properties
default-directory
default-directory-function
default-file-dialog-filter-alist
default-fill-column
default-frame-alist
default-frame-name
default-frame-plist
default-function-key-map
default-gutter
default-gutter-border-width
default-gutter-height
default-gutter-position
default-gutter-position-changed-hook
default-gutter-visible-p
default-gutter-width
default-justification
default-left-margin
default-major-mode
default-menubar
default-minibuffer-frame
default-mode-line-format
default-modeline-format
default-mouse-track-adjust
default-mouse-track-down-event
default-mouse-track-extent
default-mouse-track-max-anchor
default-mouse-track-min-anchor
default-mouse-track-normalize-point-function
default-mouse-track-previous-point
default-mouse-track-result
default-mouse-track-type
default-mouse-track-type-list
default-mouse-track-window
default-msprinter-frame-plist
default-mswindows-frame-plist
default-popup-menu
default-profiling-interval
default-tab-width
default-text-properties
default-toolbar
default-toolbar-border-width
default-toolbar-height
default-toolbar-position
default-toolbar-visible-p
default-toolbar-width
default-truncate-lines</t>
<t tx="ekr.20050712094115.2">global-abbrev-table
global-auto-revert-mode
global-map
global-mark-ring
global-mark-ring-max
global-mode-string
global-popup-menu
global-semantic-auto-parse-mode
global-semantic-show-dirty-mode
global-semantic-show-unmatched-syntax-mode
global-semantic-summary-mode
global-senator-minor-mode</t>
<t tx="ekr.20050712094115.3">help-buffer-list
help-buffer-prefix-string
help-char
help-echo-owns-message
help-form
help-map
help-max-help-buffers
help-mode-abbrev-table
help-mode-map
help-mode-syntax-table
help-selects-help-window
help-sticky-window
help-symbol-function-and-variable-context-menu
help-symbol-function-context-menu
help-symbol-regexp
help-symbol-variable-context-menu
help-window-config
</t>
<t tx="ekr.20050712094115.4">load-file-name
load-force-doc-strings
load-history
load-home-init-file
load-ignore-elc-files
load-in-progress
load-path
load-read-function
load-user-init-file-p
load-warn-when-source-newer
load-warn-when-source-only
</t>
<t tx="ekr.20050712094115.5">message-archive-header
message-archive-note
message-citation-line-function
message-cite-function
message-cross-post-default
message-cross-post-note
message-cross-post-note-function
message-followup-to-note
message-from-style
message-indent-citation-function
message-mark-insert-begin
message-mark-insert-end
message-send-mail-function
message-signature
message-signature-file
message-signature-insert-empty-line
message-signature-separator
message-stack
message-user-organization-file
message-yank-prefix</t>
<t tx="ekr.20050712094115.6">paths-core-load-path-depth
paths-default-info-directories

paths-el-original-directory-abbrev-alist
paths-el-original-manual-program
paths-el-original-mh-libs
paths-el-original-mh-progs
paths-el-original-news-inews-program
paths-el-original-remote-shell-program
paths-el-original-rmail-spool-directory
paths-el-original-sendmail-program

paths-lisp-filename-regexp
paths-mule-load-path-depth
paths-no-lisp-directory-regexp
paths-site-load-path-depth
paths-version-control-filename-regexp</t>
<t tx="ekr.20050712094115.7">xwem-after-init-hook
xwem-after-init-wins-hook
xwem-applications-alist
xwem-before-init-hook
xwem-before-init-wins-hook
xwem-cl-activate-hook
xwem-cl-change-hook
xwem-cl-create-hook
xwem-cl-deactivate-hook
xwem-cl-destroy-hook
xwem-cl-iconify-hook
xwem-cl-mark-ring
xwem-cl-refit-hook
xwem-cl-state-change-hook
xwem-cl-withdraw-hook
xwem-clgen-map
xwem-client-default-properties
xwem-client-deselect-hook
xwem-client-select-hook
xwem-config-read-hook
xwem-debug-routines
xwem-dedicated-frame-defalut-properties
xwem-default-focus-mode
xwem-default-parent-map
xwem-dir
xwem-embedded-frame-default-properties
xwem-frame-default-properties
xwem-global-map
xwem-help-key
xwem-icons-dir
xwem-icons-list
xwem-kbd-now-grabbing
xwem-kbd-quit-hook
xwem-keyboard-echo-keystrokes
xwem-keyboard-init-hook
xwem-load-hook
xwem-manage-default-properties
xwem-manage-expectances
xwem-manage-list
xwem-messages-ignore-labels
xwem-minibuffer-focusin-hook
xwem-minibuffer-focusout-hook
xwem-override-local-map
xwem-override-map
xwem-post-command-hook
xwem-pre-command-hook
xwem-prefix-arg
xwem-prefix-help-command
xwem-quit-command
xwem-quit-key
xwem-sound-alist
xwem-sound-list
xwem-started
xwem-tabber-click-cl
xwem-tabber-click-frame
xwem-universal-key
xwem-version
xwem-win-min-height
xwem-win-min-width
xwem-win-split-hook
xwem-worklog-load-hook
xwem-worklog-login-hook
xwem-worklog-logout-hook
xwem-worklog-task-pause-hook
xwem-worklog-task-resume-hook
xwem-worklog-task-start-hook
xwem-worklog-task-stop-hook
xwem-worklog-tasks-description</t>
<t tx="ekr.20050716104357">@nocolor

- put the jyleo-nnn.jar file in c:\prog

- Execute the following command in a console window
    cd c:\prog
    jar xvf j-leo-nnn.jar

This creates a folder called j-leo-nnn

- Do the following, or execute jleo.bat

cd c:\prog\j-leo-nnn\src
java -jar c:\jython22a0\jython.jar leo.py

Note:  at present this gives KeyError: HOME

In leo.py, in computeHomeDir, I changed:
@color

home = os.getenv('HOME' )#,default=dotDir)

to:

try:
    home = os.getenv('HOME' )#,default=dotDir)
except Exception:
    home = ''
</t>
<t tx="ekr.20050721093241">@nocolor

The following are notes for anyone who is interested in writing alternate gui's for Leo.

Rule 1: Leo's core is (or should be) free of gui-specific code.

Core code calls 'gui wrapper methods' defined by gui-specific classes.  The base classes for these gui-specific classes are in the node Code--&gt;Gui Base classes.

Rule 2: Gui-specific code should be localized.  

The @file nodes contained in the node 'Code--&gt;Gui Tkinter classes' in leoPy.leo contain all of Leo's Tkinter-specific code.  Gui plugins would typically put all similar code in a single file.

Rule 3: Gui-specific code can call gui methods directly.

There are no restrictions about the code in the gui-specific classes.

Rule 4:  Gui-specific classes must implement the 'gui wrapper methods' specified in the gui base classes.

This is the way that gui-specific classes provide gui-specific services to Leo's core.

The alternative would be to implement all gui-specific commands directly in the gui-specific code.  But this would be much more work than needed.  For example, only a few gui-specific wrappers are needed to implement all commands that deal with body text.  Implementing each of these commands 'from scratch' would duplicate a lot of code unnecessarily.

Using the gui wrapper methods is a bit messy for two reasons:

1.  It requires defining enough wrappers (both in the base gui classes and subclasses) so that all gui-specific services needed by Leo's core are available.   Adding a wrapper to a gui base class involves adding it to all gui-specific subclasses.  It's easy to forget to add a wrapper.  The gui base class defines all wrappers as a function that just calls oops().  This prints a warning that the wrapper should be defined in a subclass.

2. The original wrappers assumed Tkinter-like indices.  Wrappers that were defined later assume Python indices (see Rule 5 below).   The newer style wrappers that use Python indices have 'Python' in their name.   Having two sets of wrappers is one of the ugliest features of the present code.  I find it hard to remember which wrappers exist and what exactly they do :-)

Rule 5:  Leo's core should use Python indices, not gui-specific indices.

Leo's core mostly follows this rule: there may be a few exceptions.

A Python index is an int that runs from 0 (beginning of text) to len(s) (end of text s).  That is, there are exactly len(s) + 1 valid indices.  In contrast, Tkinter indices run from "1.0" to "x.y" where text s has x lines and where the length of the last line is y-1. 

Two (recently written) functions in leoGlobals.py support conversions from Python indices to the row/column indices used by Tkinter.

- g.convertPythonIndexToRowCol converts a Python index to a row/column index used by Tkinter.
- g.convertRowColToPythonIndex does the reverse.

Important:  the first Tkinter index is '1.0', not '0.0', but the row returned by g.convertPythonIndexToRowCol is zero based, so the code that actually creates Tkinter indices from row/col must add 1 to the row.  Similar remarks apply when going in the reverse direction.
</t>
<t tx="ekr.20050920084036.55">def getPublicCommands (self):        

    c = self.c ; k = self.k 

    return {
        'activate-cmds-menu':                   self.activateCmdsMenu,
        'activate-edit-menu':                   self.activateEditMenu,
        'activate-file-menu':                   self.activateFileMenu,
        'activate-help-menu':                   self.activateHelpMenu,
        'activate-outline-menu':                self.activateOutlineMenu,
        'activate-plugins-menu':                self.activatePluginsMenu,
        'activate-window-menu':                 self.activateWindowMenu,
        'add-editor':                           c.frame.body.addEditor,
        'add-space-to-lines':                   self.addSpaceToLines,
        'add-tab-to-lines':                     self.addTabToLines, 
        'back-to-indentation':                  self.backToIndentation,
        'back-char':                            self.backCharacter,
        'back-char-extend-selection':           self.backCharacterExtendSelection,
        'back-paragraph':                       self.backwardParagraph,
        'back-paragraph-extend-selection':      self.backwardParagraphExtendSelection,
        'back-sentence':                        self.backSentence,
        'back-sentence-extend-selection':       self.backSentenceExtendSelection,
        'back-word':                            self.backwardWord,
        'back-word-extend-selection':           self.backwardWordExtendSelection,
        'backward-delete-char':                 self.backwardDeleteCharacter,
        'backward-kill-paragraph':              self.backwardKillParagraph,
        'backward-find-character':              self.backwardFindCharacter,
        'backward-find-character-extend-selection': self.backwardFindCharacterExtendSelection,
        'beginning-of-buffer':                  self.beginningOfBuffer,
        'beginning-of-buffer-extend-selection': self.beginningOfBufferExtendSelection,
        'beginning-of-line':                    self.beginningOfLine,
        'beginning-of-line-extend-selection':   self.beginningOfLineExtendSelection,
        'capitalize-word':                      self.capitalizeWord,
        'center-line':                          self.centerLine,
        'center-region':                        self.centerRegion,
        'clean-lines':                          self.cleanLines,
        'clear-extend-mode':                    self.clearExtendMode,
        'clear-selected-text':                  self.clearSelectedText,
        'click-click-box':                      self.clickClickBox,
        'click-headline':                       self.clickHeadline,
        'click-icon-box':                       self.clickIconBox,
        'contract-body-pane':                   c.frame.contractBodyPane,
        'contract-log-pane':                    c.frame.contractLogPane,
        'contract-outline-pane':                c.frame.contractOutlinePane,
        'contract-pane':                        c.frame.contractPane,
        'count-region':                         self.countRegion,
        'cycle-focus':                          self.cycleFocus,
        'cycle-all-focus':                      self.cycleAllFocus,
        'cycle-editor-focus':                   c.frame.body.cycleEditorFocus,
        'dabbrev-completion':                   self.dynamicExpansion2,
        'dabbrev-expands':                      self.dynamicExpansion,
        'delete-char':                          self.deleteNextChar,
        'delete-editor':                        c.frame.body.deleteEditor,
        'delete-indentation':                   self.deleteIndentation,
        'delete-spaces':                        self.deleteSpaces,
        'do-nothing':                           self.doNothing,
        'downcase-region':                      self.downCaseRegion,
        'downcase-word':                        self.downCaseWord,
        'double-click-headline':                self.doubleClickHeadline,
        'double-click-icon-box':                self.doubleClickIconBox,
        'end-of-buffer':                        self.endOfBuffer,
        'end-of-buffer-extend-selection':       self.endOfBufferExtendSelection,
        'end-of-line':                          self.endOfLine,
        'end-of-line-extend-selection':         self.endOfLineExtendSelection,
        'escape':                               self.watchEscape,
        'eval-expression':                      self.evalExpression,
        'exchange-point-mark':                  self.exchangePointMark,
        'expand-body-pane':                     c.frame.expandBodyPane,
        'expand-log-pane':                      c.frame.expandLogPane,
        'expand-outline-pane':                  c.frame.expandOutlinePane,
        'expand-pane':                          c.frame.expandPane,
        'extend-to-line':                       self.extendToLine,
        'extend-to-paragraph':                  self.extendToParagraph,
        'extend-to-sentence':                   self.extendToSentence,
        'extend-to-word':                       self.extendToWord,
        'fill-paragraph':                       self.fillParagraph,
        'fill-region':                          self.fillRegion,
        'fill-region-as-paragraph':             self.fillRegionAsParagraph,
        'find-character':                       self.findCharacter,
        'find-character-extend-selection':      self.findCharacterExtendSelection,
        'find-word':                            self.findWord,
        'flush-lines':                          self.flushLines,
        'focus-to-body':                        self.focusToBody,
        'focus-to-log':                         self.focusToLog,
        'focus-to-minibuffer':                  self.focusToMinibuffer,
        'focus-to-tree':                        self.focusToTree,
        'forward-char':                         self.forwardCharacter,
        'forward-char-extend-selection':        self.forwardCharacterExtendSelection,
        'forward-paragraph':                    self.forwardParagraph,
        'forward-paragraph-extend-selection':   self.forwardParagraphExtendSelection,
        'forward-sentence':                     self.forwardSentence,
        'forward-sentence-extend-selection':    self.forwardSentenceExtendSelection,
        'forward-end-word':                     self.forwardEndWord, # New in Leo 4.4.2.
        'forward-end-word-extend-selection':    self.forwardEndWordExtendSelection, # New in Leo 4.4.2.
        'forward-word':                         self.forwardWord,
        'forward-word-extend-selection':        self.forwardWordExtendSelection,
        'fully-expand-body-pane':               c.frame.fullyExpandBodyPane,
        'fully-expand-log-pane':                c.frame.fullyExpandLogPane,
        'fully-expand-pane':                    c.frame.fullyExpandPane,
        'fully-expand-outline-pane':            c.frame.fullyExpandOutlinePane,
        'goto-char':                            self.gotoCharacter,
        'goto-global-line':                     self.gotoGlobalLine,
        'goto-line':                            self.gotoLine,
        'hide-body-pane':                       c.frame.hideBodyPane,
        'hide-log-pane':                        c.frame.hideLogPane,
        'hide-pane':                            c.frame.hidePane,
        'hide-outline-pane':                    c.frame.hideOutlinePane,
        'how-many':                             self.howMany,
        # Use indentBody in leoCommands.py
        'indent-relative':                      self.indentRelative,
        'indent-rigidly':                       self.tabIndentRegion,
        'indent-to-comment-column':             self.indentToCommentColumn,
        'insert-newline':                       self.insertNewline,
        'insert-parentheses':                   self.insertParentheses,
        'keep-lines':                           self.keepLines,
        'kill-paragraph':                       self.killParagraph,
        'line-number':                          self.lineNumber,
        'move-lines-down':                      self.moveLinesDown,
        'move-lines-up':                        self.moveLinesUp,
        'move-past-close':                      self.movePastClose,
        'move-past-close-extend-selection':     self.movePastCloseExtendSelection,
        'newline-and-indent':                   self.insertNewLineAndTab,
        'next-line':                            self.nextLine,
        'next-line-extend-selection':           self.nextLineExtendSelection,
        'previous-line':                        self.prevLine,
        'previous-line-extend-selection':       self.prevLineExtendSelection,
        'remove-blank-lines':                   self.removeBlankLines,
        'remove-space-from-lines':              self.removeSpaceFromLines,
        'remove-tab-from-lines':                self.removeTabFromLines,
        'reverse-region':                       self.reverseRegion,
        'scroll-down':                          self.scrollDown,
        'scroll-down-extend-selection':         self.scrollDownExtendSelection,
        'scroll-outline-down-line':             self.scrollOutlineDownLine,
        'scroll-outline-down-page':             self.scrollOutlineDownPage,
        'scroll-outline-left':                  self.scrollOutlineLeft,
        'scroll-outline-right':                 self.scrollOutlineRight,
        'scroll-outline-up-line':               self.scrollOutlineUpLine,
        'scroll-outline-up-page':               self.scrollOutlineUpPage,
        'scroll-up':                            self.scrollUp,
        'scroll-up-extend-selection':           self.scrollUpExtendSelection,
        # Exists, but can not be executed via the minibuffer.
        # 'self-insert-command':                self.selfInsertCommand,
        'set-comment-column':                   self.setCommentColumn,
        'set-extend-mode':                      self.setExtendMode,
        'set-fill-column':                      self.setFillColumn,
        'set-fill-prefix':                      self.setFillPrefix,
        #'set-mark-command':                    self.setRegion,
        #'show-colors':                          self.showColors,
        #'show-fonts':                           self.showFonts,
        'simulate-begin-drag':                  self.simulateBeginDrag,
        'simulate-end-drag':                    self.simulateEndDrag,
        'sort-columns':                         self.sortColumns,
        'sort-fields':                          self.sortFields,
        'sort-lines':                           self.sortLines,
        'split-line':                           self.splitLine,
        'tabify':                               self.tabify,
        'toggle-extend-mode':                   self.toggleExtendMode,
        'transpose-chars':                      self.transposeCharacters,
        'transpose-lines':                      self.transposeLines,
        'transpose-words':                      self.transposeWords,
        'untabify':                             self.untabify,
        'upcase-region':                        self.upCaseRegion,
        'upcase-word':                          self.upCaseWord,
        'view-lossage':                         self.viewLossage,
        'what-line':                            self.whatLine,
    }
</t>
<t tx="ekr.20050920084036.149">def backwardWord (self,event):
    '''Move the cursor to the previous word.'''
    self.moveWordHelper(event,extend=False,forward=False)
    
def backwardWordExtendSelection (self,event):
    '''Extend the selection by moving the cursor to the next word.'''
    self.moveWordHelper(event,extend=True,forward=False)
    
def forwardEndWord (self,event): # New in Leo 4.4.2
    '''Move the cursor to the next word.'''
    self.moveWordHelper(event,extend=False,forward=True,end=True)
        
def forwardEndWordExtendSelection (self,event): # New in Leo 4.4.2
    '''Extend the selection by moving the cursor to the previous word.'''
    self.moveWordHelper(event,extend=True,forward=True,end=True)

def forwardWord (self,event):
    '''Move the cursor to the next word.'''
    self.moveWordHelper(event,extend=False,forward=True)
    
def forwardWordExtendSelection (self,event):
    '''Extend the selection by moving the cursor to the previous word.'''
    self.moveWordHelper(event,extend=True,forward=True)
</t>
<t tx="ekr.20051013084256">def dismiss (self):
    
    self.top.withdraw()
</t>
<t tx="ekr.20051026092433">def updateTab (self,p,w):

    c = self.c ; d = g.scanDirectives(c,p)
    tab_width = d.get("tabwidth",c.tab_width)
    
    i,j = g.app.gui.getTextSelection(w)
    if i != j:
        w.delete(i,j)
    if tab_width &gt; 0:
        w.insert("insert",'\t')
    else:
        # Get the preceeding characters.
        s = w.get("insert linestart","insert")
    
        # Compute n, the number of spaces to insert.
        width = g.computeWidth(s,tab_width)
        n = abs(tab_width) - (width % abs(tab_width))
        w.insert("insert",' ' * n)
</t>
<t tx="ekr.20051026171121">i,j = oldSel

if i != j:
    # No auto-indent if there is selected text.
    w.delete(i,j)
    w.insert(i,ch)
else:
    w.insert(i,ch)
    allow_in_nocolor = c.config.getBool('autoindent_in_nocolor_mode')
    if (
        (allow_in_nocolor or c.frame.body.colorizer.useSyntaxColoring(p)) and
        undoType != "Change"
    ):
        # No auto-indent if in @nocolor mode or after a Change command.
        self.updateAutoIndent(p,w)
</t>
<t tx="ekr.20051026171121.1"># By David McNab:
def updateAutoIndent (self,p,w):

    c = self.c ; d = g.scanDirectives(c,p)
    tab_width = d.get("tabwidth",c.tab_width) # Get the previous line.
    s = w.get("insert linestart - 1 lines","insert linestart -1c")
    # Add the leading whitespace to the present line.
    junk, width = g.skip_leading_ws_with_indent(s,0,tab_width)
    if s and len(s) &gt; 0 and s [ -1] == ':':
        # For Python: increase auto-indent after colons.
        if c.frame.body.colorizer.scanColorDirectives(p) == "python":
            width += abs(tab_width)
    if self.smartAutoIndent:
        # Determine if prev line has unclosed parens/brackets/braces
        bracketWidths = [width] ; tabex = 0
        for i in range(0,len(s)):
            if s [i] == '\t':
                tabex += tab_width-1
            if s [i] in '([{':
                bracketWidths.append(i+tabex+1)
            elif s [i] in '}])' and len(bracketWidths) &gt; 1:
                bracketWidths.pop()
        width = bracketWidths.pop()
    ws = g.computeLeadingWhitespace(width,tab_width)
    if ws:
        w.insert("insert",ws)
</t>
<t tx="ekr.20051027172949">def updateAutomatchBracket (self,p,w,ch,oldSel):

    # assert ch in ('(',')','[',']','{','}')
    
    c = self.c ; d = g.scanDirectives(c,p) ; i,j = oldSel
    language = d.get('language')
    
    if ch in ('(','[','{',):
        automatch = language not in ('plain',)
        if automatch:
            ch = ch + {'(':')','[':']','{':'}'}.get(ch)
        if i != j:
            w.delete(i,j)
        w.insert(i,ch)
        if automatch:
            w.mark_set('insert','insert-1c')
    else:
        ch2 = w.get('insert')
        if ch2 in (')',']','}'):
            w.mark_set('insert','insert+1c')
        else:
            if i != j:
                w.delete(i,j)
            w.insert(i,ch)
</t>
<t tx="ekr.20051031040240"></t>
<t tx="ekr.20051125080855">def selfInsertCommand(self,event,action='insert'):
    
    '''Insert a character in the body pane.
    This is the default binding for all keys in the body pane.'''
    
    c = self.c ; p = c.currentPosition()
    ch = event and event.char or ''
    if event and event.keysym == 'Return': ch = '\n' # This fixes the MacOS return bug.
    w = self.editWidget(event)
    if not w: return 'break'

    name = c.widget_name(w)
    oldSel =  name.startswith('body') and g.app.gui.getTextSelection(w) or (None,None)
    oldText = name.startswith('body') and p.bodyString() or ''
    undoType = 'Typing'
    trace = c.config.getBool('trace_masterCommand')
    brackets = self.openBracketsList + self.closeBracketsList
    inBrackets = g.toUnicode(ch,g.app.tkEncoding) in brackets
    
    if trace: g.trace(name,repr(ch),ch in brackets)
    
    if g.doHook("bodykey1",c=c,p=p,v=p,ch=ch,oldSel=oldSel,undoType=undoType):
        return "break" # The hook claims to have handled the event.
        
    if ch == '\t':
        self.updateTab(p,w)
    elif ch == '\b':
        # This is correct: we only come here if there no bindngs for this key. 
        self.backwardDeleteCharacter(event)
    elif ch in ('\r','\n'):
        ch = '\n'
        &lt;&lt; handle newline &gt;&gt;
    elif inBrackets and self.autocompleteBrackets:
        self.updateAutomatchBracket(p,w,ch,oldSel)
    elif ch: # Null chars must not delete the selection.
        i,j = oldSel
        if i != j:                  w.delete(i,j)
        elif action == 'overwrite': w.delete(i,'%s+1c' % i)
        w.insert(i,ch)
        if inBrackets and self.flashMatchingBrackets: # New in 4.4.1.
           self.flashMatchingBracketsHelper(w,i,ch)               
    else:
        return 'break' # New in 4.4a5: this method *always* returns 'break'
        
    # New in 4.4.1: Set the column for up and down keys.
    spot = w.index('insert')
    c.editCommands.setMoveCol(spot)

    # Update the text and handle undo.
    newText = g.app.gui.getAllText(w) # New in 4.4b3: converts to unicode.
    # g.trace(repr(newText))
    w.see(w.index('insert'))
    if newText != oldText:
        c.frame.body.onBodyChanged(undoType=undoType,
            oldSel=oldSel,oldText=oldText,oldYview=None)
            
    g.doHook("bodykey2",c=c,p=p,v=p,ch=ch,oldSel=oldSel,undoType=undoType)
    return 'break'</t>
<t tx="ekr.20051129084430">@nocolor

- Download jython_Release_2_2alpha1.jar and put it anywhere (say on the desktop)

- Double-click the file.  This brings up an installer.  Follow the direction.
  (I installed to c:\jython-2.2a1

- Using the Control Panel, System, Advanced tab, environment variables,
  add c:\jython-2.2a1\jython.jar to CLASSPATH (in user variables)</t>
<t tx="ekr.20051129084430.1"></t>
<t tx="ekr.20051203084725">- Put whatever.jar in c:\prog
- cd: c:\prog
- jar xvf whatever.jar</t>
<t tx="ekr.20051203084725.1">Install:

Put JythonShellEA.jar in c:\prog\JythonShell

(optional) Expand the jar so you can see the code:

jar xvf JythonShellEA.jar

Run:

Here is the contents of jythonShell.bat:

cd c:\prog\jythonShell
java -cp c:\jython-2.2a1\jython.jar;c:\prog\jythonShell\JythonShellEA2.1.jar org.leo.shell.JythonShell</t>
<t tx="ekr.20051218121447">def moveWordHelper (self,event,extend,forward,end=False):

    '''Move the cursor to the next word.
    The cursor is placed at the start of the word unless end=True'''

    c = self.c
    w = self.editWidget(event)
    if not w: return
    
    c.widgetWantsFocusNow(w)
    s = w.get('1.0','end') ; n = len(s)

    def toGui (i): return g.app.gui.toGuiIndex(s,w,i)
    def toPython (i): return g.app.gui.toPythonIndex(s,w,i)

    i = toPython(w.index('insert'))
    
    if forward:
        # Unlike backward-word moves, there are two options...
        if end:
            while 0 &lt;= i &lt; n and not g.isWordChar(s[i]):
                i += 1
            while 0 &lt;= i &lt; n and g.isWordChar(s[i]):
                i += 1
        else:
            while 0 &lt;= i &lt; n and g.isWordChar(s[i]):
                i += 1
            while 0 &lt;= i &lt; n and not g.isWordChar(s[i]):
                i += 1
    else:
        i -= 1
        while 0 &lt;= i &lt; n and not g.isWordChar(s[i]):
            i -= 1
        while 0 &lt;= i &lt; n and g.isWordChar(s[i]):
            i -= 1
        i += 1
    
    self.moveToHelper(event,toGui(i),extend)</t>
<t tx="ekr.20060106082440">4.4-a4-snapshot1
    5376 downloads of .exe file</t>
<t tx="ekr.20060111112513.1">@nocolor
http://sourceforge.net/forum/message.php?msg_id=3516227
By: nobody

Some highlights:
* simpler startup:
jyleo leo.py
should be sufficient to start it up.
* new editor colorization
* the JythonShell is much more powerful and cooler
* new plugins
* Chapters support
* mod_script is in place.
* dyna-menu was converted.  I guess 'e' will have to judge the conversion.
* multi-language script support.
* drag and drop
* some powerful new editor commands.  Try keyword completing on the language
in effect.  Say if it is python:
se(Tab)
becomes
self

Some warnings:
1. Be careful about reading your regular leo files into jyleo and saving them.
Its quite conceivable that jyleo will write it out to an XML format that regular
leo can't handle.  Why?  Well jyleo is using an XML library to spit its XML
out while leo uses a home grown method.  The library can handle leo's XML, but
Ive seen regular leo not be able to handle jyleo's XML.  Its based around &lt;tag/&gt;
I believe.

2. If you move jyleo after executing it you will need to clear out your compiled
py files as the __file__ attribute is hard compiled into the resulting objects.
Not what we want.  We want it to be set at runtime.  Ive been waiting a long
time for jython to release again and hopefully fix this, but Im not holding
my breath anymore.

----------
Its hard to give this thing a number, I want to call it jyleo2, but jyleo is
sufficient.  Dependent upon bug reports the next release could be much sooner
than before, maybe even weeks.  I hope one thing, that the dreaded "I can't
get it to start" problems are gone.  I took the snapshot and expanded it in
Windows XP.  Went to the src directory and typed: jython leo.py
and it started.  That's what I wanted to see.  I didn't have to mess with the
CLASSPATH or anything.

things needed:
java 5
a jython2.2a1 or beyond.  jython2.2a1 is the most recent snapshot.

Beyond bug fixing, I will be planning to add more SwingMacs command as time
goes along.  But I think most major features are in place.  Of course the 3D
experiments in the future could change that... :D

A NOTE ON STARTUP TIMES: In my experience it takes awhile for jyleo to start.
It will take much longer the first time you execute it because the py files
are being compiled.  Ive haven't been able to figure out what eats the time,
it may just have a slow startup in the aggregate.  So don't think its not doing
anything, it probably is.

leouser</t>
<t tx="ekr.20060129052538.2">def masterClickHandler (self,event,func=None):
    
    k = self ; c = k.c
    if not event: return
    w = event.widget ; wname = c.widget_name(w)
    trace = c.config.getBool('trace_masterClickHandler') and not g.app.unitTesting

    if trace: g.trace(wname,func and func.__name__)
    # c.frame.body.colorizer.interrupt() # New in 4.4.1
        
    # A click outside the minibuffer terminates any state.
    if k.inState() and c.useTextMinibuffer and w != c.frame.miniBufferWidget:
        if not c.widget_name(w).startswith('log'):
            k.keyboardQuit(event,hideTabs=False)
            # k.endMode(event) # Less drastic than keyboard-quit.
            w and c.widgetWantsFocusNow(w)
            if trace: g.trace('inState: break')
            return 'break'
    
    
    # Update the selection point immediately for updateStatusLine.
    k.previousSelection = None
    if 0:#wname.startswith('body'):
        c.frame.body.onClick(event) # New in Leo 4.4.2.
    elif 0:#wname.startswith('mini'):
        x = w.index('@%s,%s' % (event.x,event.y))
        i, j = k.getEditableTextRange()
        xcol = int(x.split('.')[1])
        icol = int(i.split('.')[1])
        jcol = int(j.split('.')[1])
        # g.trace(xcol,icol,jcol,icol &lt;= xcol &lt;= jcol)
        if icol &lt;= xcol &lt;= jcol:
            g.app.gui.setTextSelection(w,x,x,insert=x)
        else:
            if trace: g.trace('2: break')
            return 'break'
    
    
    if event and func:
        # Don't even *think* of overriding this.
        val = func(event)
        c.masterFocusHandler()
        if trace: g.trace('val:',val)
        return val
    else:
        # All tree callbacks have a func, so we can't be in the tree.
        # g.trace('*'*20,'auto-deactivate tree: %s' % wname)
        c.frame.tree.OnDeactivate()
        c.widgetWantsFocusNow(w)
        if trace: g.trace('end: None')
        return None
    
        
masterClick3Handler = masterClickHandler
masterDoubleClick3Handler = masterClickHandler
</t>
<t tx="ekr.20060207080537">def createBindings (self):
    
    # Legacy bindings.  Can be overwritten in subclasses.
    
    # g.trace('legacy')
    
    def findButtonCallback2(event,self=self):
        self.findButton()
        return 'break'

    for widget in (self.find_ctrl, self.change_ctrl):
        widget.bind ("&lt;Button-1&gt;",  self.resetWrap)
        widget.bind("&lt;Key&gt;",        self.resetWrap)
        widget.bind("&lt;Control-a&gt;",  self.selectAllFindText)
    
    for widget in (self.find_ctrl, self.change_ctrl):
        widget.bind("&lt;Key-Return&gt;", findButtonCallback2)
        widget.bind("&lt;Key-Escape&gt;", self.onCloseWindow)
</t>
<t tx="ekr.20060208112908"></t>
<t tx="ekr.20060208112908.1">The Tortoise cvs params:

:ext:edream@cvs.sourceforge.net:/cvsroot/leo

That is...

Protocol: pserver
Server: cvs.sourceforge.net
Repository folder: /cvsroot/leo
User name: your cvs name

### :pserver:anonymous@cvs.sourceforge.net:/cvsroot/leo</t>
<t tx="ekr.20060217111834">.  any char
^  start line
$  end of line
\w alphanum: [a-zA-Z0-9_]
\W non-alphanum
\s whitespace
\S non-whitespace

These can be done with regexps:
    
copy-to-end-of-each-line:   (.)$        --&gt;  \1x
copy-to-start-of-each-line: ^([ \t]+)   --&gt;  \1x
remove-leading-ws:  ^[ \t]+             --&gt;  empty
remove-trailing-ws: [ \t]+$             --&gt;  empty
paste-at-column:    ^(.{4})             --&gt;  \1x
paste-after-lws:    ^([ \t]+)           --&gt;  \1x</t>
<t tx="ekr.20060328110802"># ddm 13/02/06
lua_keywords = [
    "and", "break", "do", "else", "elseif", "end",
    "false", "for", "function", "if", "in", "local",
    "nil", "not", "or", "repeat", "return", "then",
    "true", "until", "while",
]
</t>
<t tx="ekr.20060331094112">To generate a SSH key using PuTTY:

Execute c:\"Program Files"\tortoiseCVS\PUTTYGEN.EXE

Select "SSH2 DSA", within the "Parameters" section.

Click on the "Generate" button. Follow the instruction to move the mouse over
the blank area of the program in order to create random data used by PUTTYGEN to
generate secure keys. Key generation will occur once PUTTYGEN has collected
sufficient random data.

Enter edream@cvs.sourceforge.net for the key comment (depends on what host the
key is for)

(Omit) Enter the desired passphrase in the "Key passphrase" and "Confirm passphrase"
fields. If the key will be used for automation of operations (i.e. as part of a
script), you may choose to omit this step from the key generation process.

Click on the "Save private key" button. Use the resulting dialog to save your
private key data for future use. You may use a filename such as
"SourceForge-Shell.ppk" or "SourceForge-CF.ppk". The .ppk extension is used for
PuTTY Private Key files.

Go to the SSH key posting page on the SourceForge.net site: http://sourceforge.net/account/

Copy your public key data from the "Public key for pasting into OpenSSH
authorized_keys2 file" section of the PuTTY Key Generator, and paste the key
data to the provided form on the SourceForge.net site. Click on the "Update"
button to complete the posting process.

Exit the PuTTY Key Generator (PUTTYGEN).

Key data sync to hosts from the SourceForge.net site occurs on regular
intervals. Your key data will be synchronized to the designated servers (either
shell and CVS, or the Compile Farm) after a short delay.</t>
<t tx="ekr.20060416113431">def computeLeoDir ():
    
    loadDir = g.app.loadDir
    
    g.app.leoDir = theDir = g.os_path_dirname(loadDir)
    
    if theDir not in sys.path:
        sys.path.append(theDir)
        
    if 0: # This is required so we can do import leo (as a package)
        theParentDir = g.os_path_dirname(theDir)
        if theParentDir not in sys.path:
            sys.path.append(theParentDir)
</t>
<t tx="ekr.20060526092203">def regexHelper (self,s,i,j,pattern,backwards,nocase):
   
    try:
        flags = re.MULTILINE
        if nocase: flags |= re.IGNORECASE
        re_obj = re.compile(pattern,flags)
    except Exception:
        g.es('Invalid regular expression: %s' % (pattern),color='blue')
        self.errors += 1 # Abort the search.
        return -1, -1
        
    if backwards: # Scan to the last match.
        last_mo = None
        while 1:
            mo = re_obj.search(s,i,j)
            if mo is None: break
            i = mo.end()
            last_mo = mo
        self.match_obj = mo = last_mo
    else:
        self.match_obj = mo = re_obj.search(s,i,j)
        
    if mo is None:
        return -1, -1
    else:
        k  = mo.start()
        k2 = mo.end()
        if 0:
            g.trace('i: %d, j: %d k: %d, k2: %d, s[k:k2]: %s, len(s): %d, s[-1]: %s,' % (
                i,j,k,k2,repr(s[k:k2]),len(s),repr(s[-1])))
        # g.trace('groups',mo.groups())
        if k == k2:
            return -1, -1 # A non-empty pattern can match an empty string.  Move on!
        else:
            return k, k2
</t>
<t tx="ekr.20060528100747.3">def createTextWidget (self,frame,parentFrame,p,name):   #agp
    
    c = self.c
    
    #parentFrame.configure(bg='LightSteelBlue1')

    wrap = c.config.getBool('body_pane_wraps')
    wrap = g.choose(wrap,"word","none")
    
    # Setgrid=1 cause severe problems with the font panel.
    body = w = Tk.Text(parentFrame, name='bodytext', bd=0, relief="flat", setgrid=0, wrap=wrap,padx=10,pady=10)
    
    body.bind("&lt;MouseWheel&gt;",frame.TopMouseWheel)
    #print str(body),body['font']
    
    frame.bodyBar = self.bodyBar = bodyBar = g.app.gui.SCROLLBAR(parentFrame,1)
    #Tk.Scrollbar(parentFrame,name='bodyBar',bg="black",troughcolor="black")
    
    def yscrollCallback(x,y,bodyBar=bodyBar,w=w):
        # g.trace(x,y)
        if hasattr(w,'leo_scrollBarSpot'):
            w.leo_scrollBarSpot = (x,y)
        return bodyBar.set(x,y)
   
    body['yscrollcommand'] = yscrollCallback # bodyBar.set

    bodyBar.command =  body.yview   #['command']
    
    bodyBar.pack(side="right", fill="y")
    
    
    
    # Always create the horizontal bar.
    frame.bodyXBar = self.bodyXBar = bodyXBar = g.app.gui.SCROLLBAR(parentFrame,0)
    #Tk.Scrollbar(parentFrame,name='bodyXBar',orient="horizontal")
    body['xscrollcommand'] = bodyXBar.set
    bodyXBar.command = body.xview    #['command']
    
    
    if wrap == "none":
        # g.trace(parentFrame)
        pass
    
    bodyXBar.pack(side="bottom", fill="x")
        
    body.pack(expand=1,fill="both")

    self.wrapState = wrap

    if 0: # Causes the cursor not to blink.
        body.configure(insertofftime=0)
        
    # Inject ivars
    if name == '1':
        w.leo_p = w.leo_v = None # Will be set when the second editor is created.
    else:
        w.leo_p = p.copy()
        w.leo_v = body.leo_p.v
    w.leo_active = True
    w.leo_frame = parentFrame
    w.leo_name = name
    w.leo_label = None
    w.leo_label_s = None
    w.leo_scrollBarSpot = None
    w.leo_insertSpot = None
    w.leo_selection = None

    return w</t>
<t tx="ekr.20060531093331">@
Ever have a clone that is difficult to understand outside the context of its
original parent? Here's some code to help. It displays the headline of the
current node plus the headlines of all the parents of all the clones of the
current node. Selecting a displayed parent headline moves the current node to
the corresponding clone in the outline.

The idea is to be able to quickly see the context of all the clones of the
current node and to be able to easily navigate from one clone instance to the
next.
@c

@others
c.cn = cloneNavigator(c)
c.cn.displayClones(c)
</t>
<t tx="ekr.20060531093331.1">class cloneNavigator:
    '''
       Displays the headline of the current node plus the headlines of
       all the parents of all the clones of the current node.  Selecting
       a displayed parent headline moves the current node to the
       corresponding clone in the outline.
       
       The idea is to be able to quickly see the context of all the clones
       of the current node and to be able to easily navigate from one clone
       instance to the next.
    '''
    @others</t>
<t tx="ekr.20060531093331.2">def __init__ (self,c):
    self.c = c
    import Tkinter as Tk
    if 0:
        f = Tk.Toplevel()
    else:
        log = c.frame.log
        log.selectTab('Clones')
        f = log.tabFrame
        for w in f.winfo_children():
            w.destroy()
    
    # Create and pack empty label and listbox
    self.title = Tk.Label(f)
    self.title.pack(anchor="nw")
    self.lb = Tk.Listbox(f)
    self.lb.pack(expand=1,fill="both")</t>
<t tx="ekr.20060531093331.3">def getAllClones(self,p):
    c = self.c
    def clonesOf(p,p1=p):
        return p.v.t == p1.v.t
    return filter(clonesOf, c.allNodes_iter(copy=True))</t>
<t tx="ekr.20060531093331.4">def displayClones(self,c):
    '''Displays the parent headline for all the clones of the current position'''
    cp = c.currentPosition()
    
    # "Title" is the headline of the current node
    self.title.configure(text=cp.headString())
    
    # Initialize listbox and clone list
    clones = self.getAllClones(cp)
    self.lb.delete(0,self.lb.size()-1)
    
    &lt;&lt;Fill listbox with clone parent headlines&gt;&gt;    
    &lt;&lt;Goto selected position when listbox selection changes&gt;&gt;
</t>
<t tx="ekr.20060531093331.5"># Add the headlines of all the clone parents to the listbox
for p in clones:
    if p.parent():
        text = p.parent().headString()
    else:
        text = "&lt;root&gt;"
    self.lb.insert(self.lb.size(),text)
    
    # Initial listbox selection corresponds to current position
    if p.v == cp.v:
        self.lb.selection_set(self.lb.size()-1)</t>
<t tx="ekr.20060531093331.6"># Callback for when a listbox entry is selected            
def gotoSelectedPosition(event,lb=self.lb,c=c,positions=clones):
    idx = int(lb.curselection()[0])
    p = positions[idx]
    c.frame.tree.expandAllAncestors(p)
    c.selectPosition(p)
    return
self.lb.bind(g.angleBrackets("ListboxSelect"), gotoSelectedPosition)</t>
<t tx="ekr.20060627083506">def flashMatchingBracketsHelper (self,w,index,ch):

    s = g.app.gui.getAllText(w)
    i = g.app.gui.toPythonIndex(s,w,index)
    
    d = {}
    if ch in self.openBracketsList:
        for z in xrange(len(self.openBracketsList)):
            d [self.openBracketsList[z]] = self.closeBracketsList[z]
        reverse = False # Search forward
    else:
        for z in xrange(len(self.openBracketsList)):
            d [self.closeBracketsList[z]] = self.openBracketsList[z]
        reverse = True # Search backward

    delim2 = d.get(ch)
    j = g.skip_matching_python_delims(s,i,ch,delim2,reverse=reverse)
    if j != -1:
        j = g.app.gui.toGuiIndex(s,w,j)
        self.flashCharacter(w,j)
</t>
<t tx="ekr.20060627091557">def flashCharacter(self,w,i):
    
    bg      = self.bracketsFlashBg or 'DodgerBlue1'
    fg      = self.bracketsFlashFg or 'white'
    flashes = self.bracketsFlashCount or 2
    delay   = self.bracketsFlashDelay or 75

    def addFlashCallback(w,count,index):
        w.tag_add('flash',index,'%s+1c' % (index))
        w.after(delay,removeFlashCallback,w,count-1,index)
    
    def removeFlashCallback(w,count,index):
        w.tag_remove('flash','1.0','end')
        if count &gt; 0:
            w.after(delay,addFlashCallback,w,count,index)

    try:
        w.tag_configure('flash',foreground=fg,background=bg)
        addFlashCallback(w,flashes,i)
    except Exception:
        pass
</t>
<t tx="ekr.20060804095512">def initBracketMatcher (self,c):

    self.openBracketsList  = c.config.getString('open_flash_brackets')  or '([{'
    self.closeBracketsList = c.config.getString('close_flash_brackets') or ')]}'
    
    if len(self.openBracketsList) != len(self.closeBracketsList):
        g.es_print('bad open/close_flash_brackets setting: using defaults')
        self.openBracketsList  = '([{'
        self.closeBracketsList = ')]}'

    # g.trace('self.openBrackets',openBrackets)
    # g.trace('self.closeBrackets',closeBrackets)
</t>
<t tx="ekr.20060829084924"># Get the default body font.
defaultBodyfont = self.fonts.get('default_body_font')
if not defaultBodyfont:
    defaultBodyfont = c.config.getFontFromParams(
        "body_text_font_family", "body_text_font_size",
        "body_text_font_slant",  "body_text_font_weight",
        c.config.defaultBodyFontSize)
    self.fonts['default_body_font'] = defaultBodyfont

# Configure fonts.
w = c.frame.body.bodyCtrl
keys = default_font_dict.keys() ; keys.sort()
for key in keys:
    option_name = default_font_dict[key]
    # First, look for the language-specific setting, then the general setting.
    for name in ('%s_%s' % (self.language,option_name),(option_name)):
        font = self.fonts.get(name)
        if font:
            # g.trace('found',name,id(font))
            w.tag_config(key,font=font)
            break
        else:
            family = c.config.get(name + '_family','family')
            size   = c.config.get(name + '_size',  'size')   
            slant  = c.config.get(name + '_slant', 'slant')
            weight = c.config.get(name + '_weight','weight')
            if family or slant or weight or size:
                family = family or g.app.config.defaultFontFamily
                size   = size or c.config.defaultBodyFontSize
                slant  = slant or 'roman'
                weight = weight or 'normal'
                font = g.app.gui.getFontFromParams(family,size,slant,weight)
                # Save a reference to the font so it 'sticks'.
                self.fonts[name] = font 
                # g.trace(key,name,family,size,slant,weight,id(font))
                w.tag_config(key,font=font)
                break
    else: # Neither the general setting nor the language-specific setting exists.
        if len(self.fonts.keys()) &gt; 1: # Restore the default font.
            # g.trace('default',key)
            w.tag_config(key,font=defaultBodyfont)</t>
<t tx="ekr.20060831163241">def test_selfInsertCommand(self):
    
    self = c.editCommands
    event = g.Bunch(char='É',keysym=None,widget=c.frame.body.bodyCtrl)
    self.selfInsertCommand(event)</t>
<t tx="ekr.20060908104329"></t>
<t tx="ekr.20060910141935"></t>
<t tx="ekr.20060910141935.1"># c.k.simulateCommand('read-zodb-file')

path = r'c:\prog\tigris-cvs\leo\test\test2.leo'

if g.os_path_exists(path):
    c.zodbCommands.readFile()
else:
    g.es_print('not found: %s' % path)</t>
<t tx="ekr.20060910141935.2"># c.k.simulateCommand('write-zodb-file')

path = c.fileName()
# path = r'c:\prog\tigris-cvs\leo\test\test2.leo'

if g.os_path_exists(path):
    c.zodbCommands.writeFile()
else:
    g.es_print('not found: %s' % path)</t>
<t tx="ekr.20060924124119">def defineCmdsMenuCursorTable (self):

    self.cursorMenuBackTable = [
        # &amp;: b,c,l,p,s,v,w
        'back-&amp;char',
        'back-&amp;paragraph',
        'back-&amp;sentence',
        'back-&amp;word',
        '-',
        'beginning-of-&amp;buffer',
        'beginning-of-&amp;line',
        '-',
        'pre&amp;vious-line',
    ]
    
    self.cursorMeuuBackExtendTable = [
        # &amp;: b,c,l,p,s,v,w
        'back-&amp;char-extend-selection',
        'back-&amp;paragraph-extend-selection',
        'back-&amp;sentence-extend-selection',
        'back-&amp;word-extend-selection',
        '-',
        'beginning-of-&amp;buffer-extend-selection',
        'beginning-of-&amp;line-extend-selection',
        '-',
        'pre&amp;vious-line-extend-selection',
    ]
    
    self.cursorMenuExtendTable = [
        # &amp;: l,p,s,w
        'extend-to-&amp;line',
        'extend-to-&amp;paragraph',
        'extend-to-&amp;sentence',
        'extend-to-&amp;word',
    ]
    
    self.cursorMenuForwardTable = [
        # &amp;: b,c,e,l,n,p,s,w
        'end-of-&amp;buffer',
        'end-of-&amp;line',
        '-',
        'forward-&amp;char',
        'forward-&amp;paragraph',
        'forward-&amp;sentence',
        'forward-&amp;end-word',
        'forward-&amp;word',
        '-',
        '&amp;next-line',
    ]
    
    self.cursorMenuForwardExtendTable = [
        # &amp;: b,c,e,l,n,p,s,w
        'end-of-&amp;buffer-extend-selection',
        'end-of-&amp;line-extend-selection',
        '-',
        'forward-&amp;char-extend-selection',
        'forward-&amp;paragraph-extend-selection',
        'forward-&amp;sentence-extend-selection',
        'forward-&amp;end-word-extend-selection',
        'forward-&amp;word-extend-selection',#
        '-',
        '&amp;next-line-extend-selection',    
    ]</t>
<t tx="ekr.20060927173836.2"></t>
<t tx="ekr.20061008140603">def runEditCommandTest (c,p):
    
    u = testUtils(c) ; atTest = p.copy()
    w = c.frame.body.bodyCtrl

    h = atTest.headString()
    assert h.startswith('@test '),'expected head: %s, got: %s' % ('@test',h)
    commandName = h[6:].strip()
    # Ignore everything after the actual command name.
    i = g.skip_id(commandName, 0, chars='-')
    commandName = commandName[:i]
    assert commandName, 'empty command name'
    command = c.commandsDict.get(commandName)
    assert command, 'no command: %s' % (commandName)
    
    work,before,after = u.findChildrenOf(atTest)
    before_h = 'before sel='
    after_h = 'after sel='
    for node,h in ((work,'work'),(before,before_h),(after,after_h)):
        h2 = node.headString()
        assert h2.startswith(h),'expected head: %s, got: %s' % (h,h2)

    sels = []
    for node,h in ((before,before_h),(after,after_h)):
        sel = node.headString()[len(h):].strip()
        aList = [str(z) for z in sel.split(',')]
        sels.append(tuple(aList))
    sel1,sel2 = sels
    
    c.beginUpdate()
    try:
        c.selectPosition(work)
        c.setBodyString(work,before.bodyString())
        g.app.gui.setTextSelection(w,sel1[0],sel1[1])
        c.k.simulateCommand(commandName)
        s1 = work.bodyString() ; s2 = after.bodyString()
        assert s1 == s2, 'expected body: %s, got: %s' % (repr(s1),repr(s2))
        sel3 = g.app.gui.getTextSelection(w)
        assert sel2 == sel3, 'expected sel: %s, got: %s' % (sel2,sel3)
        c.selectPosition(atTest)
        atTest.contract()
    finally:
        c.endUpdate()</t>
<t tx="ekr.20061010121944">def createRecentFiles (self):
    
    '''Trye to reate .leoRecentFiles.txt in
    - the users home directory first,
    - Leo's config directory second.'''

    for theDir in (g.app.homeDir,g.app.globalConfigDir):
        if theDir:
            try:
                fileName = g.os_path_join(theDir,'.leoRecentFiles.txt')
                f = file(fileName,'w')
                f.close()
                g.es_print('created %s' % (fileName),color='red')
                return
            except Exception:
                g.es_print('can not create %s' % (fileName),color='red')
                g.es_exception()</t>
<t tx="ekr.20061016104544">@ 

New colorizer did not handle @&lt;newline&gt; properly.
(It required a space after the '@').</t>
<t tx="ekr.20061017082211">def onClick (self,event): #disabled in masterclick
    
    c = self.c ; k = c.k
    w = event and event.widget
    wname = c.widget_name(w)
    
    if wname.startswith('body'):
        # A hack to support middle-button pastes: remember the previous selection.
        
        #agp x, y = event.x, event.y
        #agp k.previousSelection = g.app.gui.getSelectionRange(w)
        #agp i = w.index('@%s,%s' % (x,y))
        # g.trace(x,y,i)
        #agp g.app.gui.setTextSelection(w,i,i,insert=i)
        #agp c.editCommands.setMoveCol(i)
        print "onclick",event
        c.frame.updateStatusLine()
        self.selectEditor(w)
    else:
        g.trace('can not happen')</t>
<t tx="ekr.20061017083312">def selectEditor(self,w):
    
    c = self.c ; d = self.editorWidgets
    trace = False
    if trace: g.trace(g.app.gui.widget_name(w),id(w),g.callers())
    if w.leo_p is None:
        if trace: g.trace('no w.leo_p') 
        return 'break'
    # Inactivate the previously active editor.
    # Don't capture ivars here! selectMainEditor keeps them up-to-date.
    for key in d.keys():
        w2 = d.get(key)
        if w2 != w and w2.leo_active:
            w2.leo_active = False
            self.unselectLabel(w2)
            w2.leo_scrollBarSpot = w2.yview()
            w2.leo_insertSpot = g.app.gui.getInsertPoint(w2)
            w2.leo_selection = g.app.gui.getSelectionRange(w2)
            # g.trace('inactive:',id(w2),'scroll',w2.leo_scrollBarSpot,'ins',w2.leo_insertSpot)
            break
    else:
        if trace: g.trace('no active editor!')
    
    # Careful, leo_p may not exist.
    if not c.positionExists(w.leo_p):
        if trace: g.trace('does not exist',w.leo_name)
        for p2 in c.allNodes_iter():
            if p2.v == w.leo_v:
                w.leo_p = p2.copy()
                break
        else:
             # This *can* happen when selecting a deleted node.
            w.leo_p = c.currentPosition()
            if trace: g.trace('previously deleted node')
            return 'break'

    self.frame.bodyCtrl = self.bodyCtrl = w # Must change both ivars!
    w.leo_active = True
    c.selectPosition(w.leo_p,updateBeadList=True) # Calls selectMainEditor.
    c.recolor_now()
    &lt;&lt; restore the selection, insertion point and the scrollbar &gt;&gt;
    c.bodyWantsFocusNow()
    return 'break'</t>
<t tx="ekr.20061017083312.1"># g.trace('active:',id(w),'scroll',w.leo_scrollBarSpot,'ins',w.leo_insertSpot)

if w.leo_insertSpot:
    g.app.gui.setInsertPoint(w,w.leo_insertSpot)
    w.see(w.leo_insertSpot)
else:
    g.app.gui.setInsertPoint(w,'1.0')
    
if w.leo_scrollBarSpot:
    first,last = w.leo_scrollBarSpot
    w.yview('moveto',first)

if w.leo_selection:
    try:
        start,end = w.leo_selection
        g.app.gui.setSelectionRange(w,start,end)
    except Exception:
        pass
</t>
<t tx="ekr.20061019170752.1"></t>
<t tx="ekr.20061019171123">@nocolor

Two body editors open looking at the same node, so you can write 
code at the bottom of the body based on something close to the top. 
Let's say the top pane's showing a data structure defined a page or 
so down from the start of the body, and the bottom pane's showing a
method you're writing at the bottom on the body.

As soon as you enter a character in the bottom pane the point of 
view of the top pane snaps back to the first line of the body, no 
damage caused but now you can't see the datastructure definition you 
were using for reference.

This probably indicates that the body should be split into more than 
one node... but thought I'd let you know it was doing that anyway.

--------------

Still something funky I'm afraid.  Two body panes one above the 
other looking at the same body text.

Say each one is displaying 10 lines.

In one I scroll down to view lines 80-90 by dragging the scroll bar 
on the right, but when I click line 85 to position the cursor it 
jumps to line 5.

@color</t>
<t tx="ekr.20061019171123.1">@nocolor

The new colorizer was innocent: the problem is that at.directiveKind4 uses leoColor.leoKeywords,
so multipath must add entroes to leoColor.leoColors.

This should be changed, but it is too late in the development cycle to do more than put a band-aid on the problem.

@color</t>
<t tx="ekr.20061019171123.2">@nocolor
@language python

http://sourceforge.net/forum/message.php?msg_id=3971242
By: nobody

I just tried to use mod_shadow plugin the first time and it took me sometime
to figure out that I immediately triggered a bug.

The problem is, that I use c++ as programming language, but leo only provides an
\@language c directive. This is OK for colorizing, but it prevents the mod_shadow
plugin to derive the correct file name extension from the language directive (at
least that´s what I guessed from the error messages). To fix it I simply copied
all c language entries in leoApp.py to create cpp new similar cpp language
entries. I have not tried to understand the code that triggers this error in
detail, so I don´t know if this fixes all issues, but at least it seems to work
at the moment.

@color</t>
<t tx="ekr.20061021100018">Typing in leoDocs.leo will show the problem.</t>
<t tx="ekr.20061021144254"></t>
<t tx="ekr.20061021150733"></t>
<t tx="ekr.20061023071509">@nocolor

http://sourceforge.net/forum/message.php?msg_id=3975898

If the setting "@int initial_window_left" has a value of 0 (zero), leo starts
up without showing a single pane.

@color</t>
<t tx="ekr.20061023153133">patch -p1 &lt; patchfile
</t>
<t tx="ekr.20061023214728">@nocolor

See the node Users Guide--&gt;Chapter 18: Emacs and Leo in LeoDocs.leo for full details.</t>
<t tx="ekr.20061024060248.1">@first # -*- coding: utf-8 -*-

&lt;&lt; docstring&gt;&gt;

@language python
@tabwidth -4

# As in leo.py we must be very careful about imports.
g = None # set by init: do *not* import it here!
inited = False

@others</t>
<t tx="ekr.20061024060248.2">'''A module to allow the Pymacs bridge to access Leo data.

All code in this module must be called *from* Emacs:
calling Pymacs.lisp in other situations will hang Leo.

Emacs code initiallizes this module with::
    
    (pymacs-eval "sys.path.append('c:\\prog\\tigris-cvs\\leo\\src')")
    (setq leo (pymacs-load "leoPymacs"))

'''
</t>
<t tx="ekr.20061024060248.3">def hello():

    init()
    return 'Hello from Leo.  g.app: %s' % g.app</t>
<t tx="ekr.20061024075542">def init ():
    
    global inited

    if inited:
        return
    else:
        inited = True
    
    # Create the dummy app
    import leo 
    leo.run(pymacs=True)
    
    import leoGlobals
    global g ; g = leoGlobals

    # These traces show up in the pymacs buffer.
    g.trace('app',g.app)
    g.trace('gui',g.app.gui)
</t>
<t tx="ekr.20061024075542.1">def open (fileName=None):
    
    init()
    
    if g.app.unitTesting:
        return
    
    if not fileName:
        g.es_print('leoPymacs.open: no file name')
        return None

    # openWithFileName checks to see if the file is already open.
    ok, frame = g.openWithFileName(
        fileName,
        old_c=None,
        enableLog=False,
        readAtFileNodesFlag=True)

    c = ok and frame.c or None
    if c:
        g.es_print('leoPymacs.open: %s' % c)
    else:
        g.es_print('leoPymacs.open: Can not open %s' % fileName)

    return c</t>
<t tx="ekr.20061024084200">def run_script(c,script,p=None):
    
    # It is possible to use script=None, in which case p must be defined.
    
    init()
    
    if c is None:
        c,frame = g.app.newLeoCommanderAndFrame(fileName='dummy script file')
            
    g.app.scriptResult = None

    c.executeScript(
        event=None,
        p=p,
        script=script,
        useSelectedText=False,
        define_g=True,
        define_name='__main__',
        silent=True,  # Don't write to the log.
    )
    
    # g.trace('script returns: ',repr(g.app.scriptResult))
    return g.app.scriptResult</t>
<t tx="ekr.20061024130957">def get_app ():
    '''Scripts can use g.app.scriptDict for communication with pymacs.'''
    init()
    return g.app
    
def get_g():
    init()
    return g
    
def script_result():
    init()
    return g.app.scriptResult</t>
<t tx="ekr.20061024131236">def dump (anObject):
    
    init()
    
    return str(g.toEncodedString(repr(anObject),encoding='ascii'))
</t>
<t tx="ekr.20061025094855"># It is set by tkFrame.finishCreate</t>
<t tx="ekr.20061026054758">@nocolor

http://sourceforge.net/forum/message.php?msg_id=3980193

What I'm needing is 2 commands:

1) move cursor to the end of the current word (if cursor is in a word) or end
of next word (if cursor is not in a word), WITHOUT SELECTING - the functionality
of Ctrl-RtArrow in normal editors

2) extend selection from current cursor position to the end of the current or
next word - the functionality of Shift-Ctrl-RtArrow in normal editors.

EKR: The term 'normal' editor is misleading.  There are two different ways of moving forward:
forward-word and forward-end-word.

@color</t>
<t tx="ekr.20061026071140">if 0: # New commands are not needed.  The old commands just need to be smarter.

    def backwardStartWordExtendSelection (self,event): # New in Leo 4.4.2
        '''Extend the selection by moving the cursor to the next word.'''
        self.moveWordHelper(event,extend=True,forward=False,past=False)
        
    def backwardStartWord (self,event): # New in Leo 4.4.2.
        '''Move the cursor to the previous word.'''
        self.moveWordHelper(event,extend=False,forward=False,past=False)
</t>
<t tx="ekr.20061026081935"></t>
<t tx="ekr.20061026083956">@nocolor

http://sourceforge.net/forum/message.php?msg_id=3978307
By: johnmwhite

The auto-creation of .leoRecentFiles.txt doesn't seem to work. Everything is
fine if myLeoSettings.leo is in the home directory along with .leoRecentFiles.txt,
but strange things happen if .leoRecentFiles.txt does not exist.

----

I simply removed a very misleading message in writeRecentFiles.</t>
<t tx="ekr.20061028072406"></t>
<t tx="ekr.20061028082834"># This can't be done in initSettingsFiles because the local directory does not exits.
localDirectory = g.os_path_dirname(fileName)

#  Set the local leoSettings.leo file.
localConfigFile = g.os_path_join(localDirectory,'leoSettings.leo')
if not g.os_path_exists(localConfigFile):
    localConfigFile = None

# Set the local myLeoSetting.leo file.
myLocalConfigFile = g.os_path_join(localDirectory,'myLeoSettings.leo')
if not g.os_path_exists(myLocalConfigFile):
    myLocalConfigFile = None</t>
<t tx="ekr.20061028084753"></t>
</tnodes>
</leo_file>
